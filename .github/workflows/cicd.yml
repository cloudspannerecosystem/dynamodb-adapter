name: DynamoDB-CI

on:
  push:
    branches:
      - develop

  pull_request:
    types:
      - opened
      - edited
      - closed
      - synchronize
    branches:
      - develop

  release:
    types: [ published ]


env:
#  LOCATION: ${{ secrets.LOCATION }}
  TRIVY_VERSION: "0.46.0"
#  PROJECT_ID : ${{ secrets.PROJECT_ID }}
#  ARTIFACT_REGISTRY: ${{ secrets.ARTIFACT_REGISTRY }}
#  IMAGE: ${{ secrets.IMAGE }}
  APP_VERSION: ${{ github.sha }}

jobs:
  golangLint:
    name: Lint Scan
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          cache: true

      - name: golangci-lint
        run: |
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
          golangci-lint --version

      - name: Run Golangci Lint
        id: lint
        run: |
          golangci-lint run --timeout 5m --issues-exit-code 0 --out-format=tab > lint_results_table.md
          if [ -s lint_results_table.md ]; then
              echo "Issues found"
              echo "lint_flag=true" >> "$GITHUB_OUTPUT"
          else
              echo "No issues found"
          fi

      - name: Lint Error Comment on PR
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request' && steps.lint.outputs.lint_flag
        with:
          script: |
            const fs = require('fs');
            const table = fs.readFileSync('lint_results_table.md', 'utf8');
            const commentMessage = 'Please fix the above lint and re-run the job.';

            // Comment on the pull request using the github context
            github.rest.issues.createComment({
            issue_number: context.payload.pull_request.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `### Golang Lint Detected\n\n${table}\n\n${commentMessage}`,
            })
              .then(() => {
              console.log('Commented on the pull request successfully. Please review and resolve the Lint Comment');
              // process.exit(1); // Exit the script with a failure status to fail the GitHub workflow
            })
              .catch((error) => {
              console.error('Error commenting on the pull request:', error);
              // process.exit(1);
            });

  compileTest:
    name: Unit Test, Integration Test & Sonar Cloud Scan
    runs-on: ubuntu-latest
    permissions:
      contents: 'write'
      id-token: 'write'
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
      - name: Setup go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

#      - id: 'auth'
#        name: 'Authenticate to Google Cloud'
#        uses: 'google-github-actions/auth@v2'
#        with:
#          project_id: ${{ env.PROJECT_ID }}
#          workload_identity_provider: ${{ secrets.workload_identity_provider }}
#          service_account: ${{ secrets.service_account_deploy }}
#          create_credentials_file: true
#          export_environment_variables: true

#      - name: 'Set up Cloud SDK'
#        uses: 'google-github-actions/setup-gcloud@v2.1.0'
#        with:
#          version: '>= 416.0.0'
#          install_components: 'kubectl'
#
#      - name: Get config file from GCS
#        run: |
#          gcloud storage cp gs://gcs-fuse-csi-proxy-ad/config-without-otel.yaml config.yaml
##
#      - name: Build
#        run: |-
#            gcloud auth configure-docker ${{ env.LOCATION }}-docker.pkg.dev
#            docker pull "${{ env.LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY}}/${{ env.IMAGE }}:latest"
#            docker build \
#              --platform linux/amd64 --tag "${{ env.LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY}}/${{ env.IMAGE }}:${{ env.APP_VERSION }}" .
#
#            # Create duplicate image tag for unit test
#            docker tag "${{ env.LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY}}/${{ env.IMAGE }}:${{ env.APP_VERSION }}" \
#              "${{ env.LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY}}/${{ env.IMAGE }}:unit-test"

      - name: Run unit test cases
        id: unit_test
        run: |
            go mod tidy
            go test -v -short ./... -coverprofile=cover.out | tee -a ${GITHUB_WORKSPACE}/unit_test_result.txt ; (exit ${PIPESTATUS[0]})
            go tool cover -func cover.out | grep total: >> ${GITHUB_WORKSPACE}/unit_test_result.txt


      - name: Comment unit test result on PR
        uses: actions/github-script@v7
        if: ${{ success() || failure() }}
        continue-on-error: true
        with:
          script: |
            const fs = require('fs');
            const filePath = `${process.env.GITHUB_WORKSPACE}/unit_test_result.txt`;
            const unit_test_result = fs.readFileSync(filePath, 'utf8');

            // Comment on the pull request using the github context
            github.rest.issues.createComment({
            issue_number: context.payload.pull_request.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `### Unit test result\n\n${unit_test_result}\n`,
            })
              .then(() => {
              console.log('Commented on the pull request successfully.');
              // process.exit(1); // Exit the script with a failure status to fail the GitHub workflow
            })
              .catch((error) => {
              console.error('Error commenting on the pull request:', error);
              // process.exit(1);
            });
      
      - name: Run integration test cases
        id: integration_test
        env:
          INTEGRATION_TEST_CRED_PATH: ${{ secrets.INTEGRATION_TEST_CRED_PATH }}
        run: |
            go run ${process.env.GITHUB_WORKSPACE}/integrationtest/setup.go setup
            go test ${process.env.GITHUB_WORKSPACE}/integrationtest/api_test.go
            go run ${process.env.GITHUB_WORKSPACE}/integrationtest/setup.go teardown

      - name: Comment integration test result on PR
        uses: actions/github-script@v7
        if: ${{ success() || failure() }}
        continue-on-error: true
        with:
          script: |
            const fs = require('fs');
            const filePath = `${process.env.GITHUB_WORKSPACE}/integration_test_result.txt`;
            const integration_test_result = fs.readFileSync(filePath, 'utf8');
            
            // Extract and format the integration test result
            const lines = integration_test_result.split('\n');
            let formatted_result = '### Integration Test Result\n\n';
            formatted_result += '| Test Package             | Status | Duration  |\n';
            formatted_result += '|--------------------------|--------|-----------|\n';
            lines.forEach((line, index) => {
              const match = line.match(/^(ok|FAIL)\s+(\S+)\s+([\d\.]+s)$/);
              if (match) {
                const status = match[1];
                let packageName = match[2];
                const duration = match[3];

                if(index === 0) {
                    packageName = "proxy-adaptor-integration-tests";
                } else {
                    packageName = "cassandra-adaptor-integration-tests";
                }
                formatted_result += `| ${packageName} | ${status} | ${duration} |\n`;
              }
            });

            // Comment on the pull request using the github context
            github.rest.issues.createComment({
            issue_number: context.payload.pull_request.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `${formatted_result}\n\n${integration_test_result}\n`,
            })
              .then(() => {
              console.log('Commented on the pull request successfully.');
              // process.exit(1); // Exit the script with a failure status to fail the GitHub workflow
            })
              .catch((error) => {
              console.error('Error commenting on the pull request:', error);
              // process.exit(1);
            });

      - name: Analyze with SonarCloud
        uses: sonarsource/sonarcloud-github-action@master
        env:
           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
           SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
           args: >
             -Dsonar.organization=cldcvr
             -Dsonar.projectKey=cloud-spanner-adaptor
             -Dproject.settings=sonar-project.properties
             -Dsonar.go.coverage.reportPaths=cover.out

      - name: Install Trivy
        run: |
          wget -q "https://github.com/aquasecurity/trivy/releases/download/v${TRIVY_VERSION}/trivy_${TRIVY_VERSION}_Linux-64bit.tar.gz"
          tar zxf "trivy_${TRIVY_VERSION}_Linux-64bit.tar.gz"

          sudo mv trivy /usr/local/bin/
          echo "Trivy ${TRIVY_VERSION} has been installed to /usr/local/bin/trivy"

#      - name: Trivy scan
#        id: trivy_scan
#        run: |
#          echo "Scanning the image for vulnerabilities"
#
#          trivy image --severity HIGH,CRITICAL,MEDIUM --ignore-unfixed -f json -o results.json "${{ env.LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY}}/${{ env.IMAGE }}:${{ env.APP_VERSION }}"
#
#          echo "------------------"
#
#          cat results.json | jq -r '.Results[] | select(.Vulnerabilities != null) | .Vulnerabilities[]' > scan_results
#          if jq -e '. == {}' < scan_results >/dev/null
#          then
#            echo "No vulnerabilities found"
#          else
#            echo "vulnerabilities found"
#            echo "vulnerability_flag=true" >> "$GITHUB_OUTPUT"
#            echo "| Vulnerability ID | Title | Package | Installed Version | Fixed Version | Status   | Severity | Published Date                                                                                                                    |" >> ../results_table.md
#            echo "|------------------|--------|--------------|-------------------|---------------|--------------|----------|----------------------------------------------------------------------------------------------------------------------------------|" >> ../results_table.md
#
#            jq -r '.Results[] | select(.Vulnerabilities != null) | .Vulnerabilities[] | "| \(.VulnerabilityID) | \(.Title) | \(.PkgName) | \(.InstalledVersion) | \(.FixedVersion) | \(.Status) | \(.Severity) | \(.PublishedDate) |"' results.json >> ../results_table.md
#
#            cat ../results_table.md
#            echo "Vulnerabilities found, please fix these to proceed :rotating_light:" >> $GITHUB_STEP_SUMMARY
#            cat ../results_table.md >> $GITHUB_STEP_SUMMARY
#          fi
#
#      - name: Trivy Error Comment on PR
#        uses: actions/github-script@v7
#        if: github.event_name == 'pull_request' && steps.trivy_scan.outputs.vulnerability_flag
#        with:
#          script: |
#            const fs = require('fs');
#            const table = fs.readFileSync('../results_table.md', 'utf8');
#            const commentMessage = 'Please fix the above vulnerabilities and re-run the job.';
#
#            // Comment on the pull request using the github context
#            github.rest.issues.createComment({
#            issue_number: context.payload.pull_request.number,
#            owner: context.repo.owner,
#            repo: context.repo.repo,
#            body: `### Vulnerabilities Detected\n\n${table}\n\n${commentMessage}`,
#            })
#              .then(() => {
#              console.log('Commented on the pull request successfully. Please review and resolve the vulnerabilities');
#              // process.exit(1); // Exit the script with a failure status to fail the GitHub workflow
#            })
#              .catch((error) => {
#              console.error('Error commenting on the pull request:', error);
#              // process.exit(1);
#            });

#      - name: Exit if trivy scan failed
#        if: steps.trivy_scan.outputs.vulnerability_flag
#        run: |
#          docker image rm "${{ env.LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY}}/${{ env.IMAGE }}:${{ env.APP_VERSION }}"
#          docker image rm "${{ env.LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY}}/${{ env.IMAGE }}:unit-test"
#          exit 1 #TODO Update exit code

