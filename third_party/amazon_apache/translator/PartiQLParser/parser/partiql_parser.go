// Code generated from PartiQLParser.g4 by ANTLR 4.13.2. DO NOT EDIT.

package parser // PartiQLParser

import (
	"fmt"
	"strconv"
	"sync"

	"github.com/antlr4-go/antlr/v4"
)

// Suppress unused import errors
var _ = fmt.Printf
var _ = strconv.Itoa
var _ = sync.Once{}

type PartiQLParser struct {
	*antlr.BaseParser
}

var PartiQLParserParserStaticData struct {
	once                   sync.Once
	serializedATN          []int32
	LiteralNames           []string
	SymbolicNames          []string
	RuleNames              []string
	PredictionContextCache *antlr.PredictionContextCache
	atn                    *antlr.ATN
	decisionToDFA          []*antlr.DFA
}

func partiqlparserParserInit() {
	staticData := &PartiQLParserParserStaticData
	staticData.LiteralNames = []string{
		"", "'ABSOLUTE'", "'ACTION'", "'ADD'", "'ALL'", "'ALLOCATE'", "'ALTER'",
		"'AND'", "'ANY'", "'ARE'", "'AS'", "'ASC'", "'ASSERTION'", "'AT'", "'AUTHORIZATION'",
		"'AVG'", "'BEGIN'", "'BETWEEN'", "'BIT'", "'BIT_LENGTH'", "'BY'", "'CASCADE'",
		"'CASCADED'", "'CASE'", "'CAST'", "'CATALOG'", "'CHAR'", "'CHARACTER'",
		"'CHARACTER_LENGTH'", "'CHAR_LENGTH'", "'CHECK'", "'CLOSE'", "'COALESCE'",
		"'COLLATE'", "'COLLATION'", "'COLUMN'", "'COMMIT'", "'CONNECT'", "'CONNECTION'",
		"'CONSTRAINT'", "'CONSTRAINTS'", "'CONTINUE'", "'CONVERT'", "'CORRESPONDING'",
		"'COUNT'", "'CREATE'", "'CROSS'", "'CURRENT'", "'CURRENT_DATE'", "'CURRENT_TIME'",
		"'CURRENT_TIMESTAMP'", "'CURRENT_USER'", "'CURSOR'", "'DATE'", "'DEALLOCATE'",
		"'DEC'", "'DECIMAL'", "'DECLARE'", "'DEFAULT'", "'DEFERRABLE'", "'DEFERRED'",
		"'DELETE'", "'DESC'", "'DESCRIBE'", "'DESCRIPTOR'", "'DIAGNOSTICS'",
		"'DISCONNECT'", "'DISTINCT'", "'DOMAIN'", "'DOUBLE'", "'DROP'", "'ELSE'",
		"'END'", "'END-EXEC'", "'ESCAPE'", "'EVERY'", "'EXCEPT'", "'EXCEPTION'",
		"'EXCLUDE'", "'EXCLUDED'", "'EXEC'", "'EXECUTE'", "'EXISTS'", "'EXPLAIN'",
		"'EXTERNAL'", "'EXTRACT'", "'DATE_ADD'", "'DATE_DIFF'", "'FALSE'", "'FETCH'",
		"'FIRST'", "'FLOAT'", "'FOR'", "'FOREIGN'", "'FOUND'", "'FROM'", "'FULL'",
		"'GET'", "'GLOBAL'", "'GO'", "'GOTO'", "'GRANT'", "'GROUP'", "'HAVING'",
		"'IDENTITY'", "'IMMEDIATE'", "'IN'", "'INDICATOR'", "'INITIALLY'", "'INNER'",
		"'INPUT'", "'INSENSITIVE'", "'INSERT'", "'INT'", "'INTEGER'", "'INTERSECT'",
		"'INTERVAL'", "'INTO'", "'IS'", "'ISOLATION'", "'JOIN'", "'KEY'", "'LANGUAGE'",
		"'LAST'", "'LATERAL'", "'LEFT'", "'LEVEL'", "'LIKE'", "'LOCAL'", "'LOWER'",
		"'MATCH'", "'MAX'", "'MIN'", "'MODULE'", "'NAMES'", "'NATIONAL'", "'NATURAL'",
		"'NCHAR'", "'NEXT'", "'NO'", "'NOT'", "'NULL'", "'NULLS'", "'NULLIF'",
		"'NUMERIC'", "'OCTET_LENGTH'", "'OF'", "'ON'", "'ONLY'", "'OPEN'", "'OPTION'",
		"'OR'", "'ORDER'", "'OUTER'", "'OUTPUT'", "'OVERLAPS'", "'OVERLAY'",
		"'PAD'", "'PARTIAL'", "'PLACING'", "'POSITION'", "'PRECISION'", "'PREPARE'",
		"'PRESERVE'", "'PRIMARY'", "'PRIOR'", "'PRIVILEGES'", "'PROCEDURE'",
		"'PUBLIC'", "'READ'", "'REAL'", "'REFERENCES'", "'RELATIVE'", "'REPLACE'",
		"'RESTRICT'", "'REVOKE'", "'RIGHT'", "'ROLLBACK'", "'ROWS'", "'SCHEMA'",
		"'SCROLL'", "'SECTION'", "'SELECT'", "'SESSION'", "'SESSION_USER'",
		"'SET'", "'SHORTEST'", "'SIZE'", "'SMALLINT'", "'SOME'", "'SPACE'",
		"'SQL'", "'SQLCODE'", "'SQLERROR'", "'SQLSTATE'", "'SUBSTRING'", "'SUM'",
		"'SYSTEM_USER'", "'TABLE'", "'TEMPORARY'", "'THEN'", "'TIME'", "'TIMESTAMP'",
		"'TO'", "'TRANSACTION'", "'TRANSLATE'", "'TRANSLATION'", "'TRIM'", "'TRUE'",
		"'UNION'", "'UNIQUE'", "'UNKNOWN'", "'UPDATE'", "'UPPER'", "'UPSERT'",
		"'USAGE'", "'USER'", "'USING'", "'VALUE'", "'VALUES'", "'VARCHAR'",
		"'VARYING'", "'VIEW'", "'WHEN'", "'WHENEVER'", "'WHERE'", "'WITH'",
		"'WORK'", "'WRITE'", "'ZONE'", "'LAG'", "'LEAD'", "'OVER'", "'PARTITION'",
		"'CAN_CAST'", "'CAN_LOSSLESS_CAST'", "'MISSING'", "'PIVOT'", "'UNPIVOT'",
		"'LIMIT'", "'OFFSET'", "'REMOVE'", "'INDEX'", "'LET'", "'CONFLICT'",
		"'DO'", "'RETURNING'", "'MODIFIED'", "'NEW'", "'OLD'", "'NOTHING'",
		"'TUPLE'", "'INTEGER2'", "'INT2'", "'INTEGER4'", "'INT4'", "'INTEGER8'",
		"'INT8'", "'BIGINT'", "'BOOL'", "'BOOLEAN'", "'STRING'", "'SYMBOL'",
		"'CLOB'", "'BLOB'", "'STRUCT'", "'LIST'", "'SEXP'", "'BAG'", "'^'",
		"','", "'+'", "'-'", "'/'", "'%'", "'@'", "'~'", "'*'", "'|'", "'&'",
		"'!'", "'<='", "'>='", "'='", "", "'||'", "'<'", "'>'", "'<<'", "'>>'",
		"'['", "']'", "'{'", "'}'", "'('", "')'", "':'", "';'", "'?'", "'.'",
	}
	staticData.SymbolicNames = []string{
		"", "ABSOLUTE", "ACTION", "ADD", "ALL", "ALLOCATE", "ALTER", "AND",
		"ANY", "ARE", "AS", "ASC", "ASSERTION", "AT", "AUTHORIZATION", "AVG",
		"BEGIN", "BETWEEN", "BIT", "BIT_LENGTH", "BY", "CASCADE", "CASCADED",
		"CASE", "CAST", "CATALOG", "CHAR", "CHARACTER", "CHARACTER_LENGTH",
		"CHAR_LENGTH", "CHECK", "CLOSE", "COALESCE", "COLLATE", "COLLATION",
		"COLUMN", "COMMIT", "CONNECT", "CONNECTION", "CONSTRAINT", "CONSTRAINTS",
		"CONTINUE", "CONVERT", "CORRESPONDING", "COUNT", "CREATE", "CROSS",
		"CURRENT", "CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", "CURRENT_USER",
		"CURSOR", "DATE", "DEALLOCATE", "DEC", "DECIMAL", "DECLARE", "DEFAULT",
		"DEFERRABLE", "DEFERRED", "DELETE", "DESC", "DESCRIBE", "DESCRIPTOR",
		"DIAGNOSTICS", "DISCONNECT", "DISTINCT", "DOMAIN", "DOUBLE", "DROP",
		"ELSE", "END", "END_EXEC", "ESCAPE", "EVERY", "EXCEPT", "EXCEPTION",
		"EXCLUDE", "EXCLUDED", "EXEC", "EXECUTE", "EXISTS", "EXPLAIN", "EXTERNAL",
		"EXTRACT", "DATE_ADD", "DATE_DIFF", "FALSE", "FETCH", "FIRST", "FLOAT",
		"FOR", "FOREIGN", "FOUND", "FROM", "FULL", "GET", "GLOBAL", "GO", "GOTO",
		"GRANT", "GROUP", "HAVING", "IDENTITY", "IMMEDIATE", "IN", "INDICATOR",
		"INITIALLY", "INNER", "INPUT", "INSENSITIVE", "INSERT", "INT", "INTEGER",
		"INTERSECT", "INTERVAL", "INTO", "IS", "ISOLATION", "JOIN", "KEY", "LANGUAGE",
		"LAST", "LATERAL", "LEFT", "LEVEL", "LIKE", "LOCAL", "LOWER", "MATCH",
		"MAX", "MIN", "MODULE", "NAMES", "NATIONAL", "NATURAL", "NCHAR", "NEXT",
		"NO", "NOT", "NULL", "NULLS", "NULLIF", "NUMERIC", "OCTET_LENGTH", "OF",
		"ON", "ONLY", "OPEN", "OPTION", "OR", "ORDER", "OUTER", "OUTPUT", "OVERLAPS",
		"OVERLAY", "PAD", "PARTIAL", "PLACING", "POSITION", "PRECISION", "PREPARE",
		"PRESERVE", "PRIMARY", "PRIOR", "PRIVILEGES", "PROCEDURE", "PUBLIC",
		"READ", "REAL", "REFERENCES", "RELATIVE", "REPLACE", "RESTRICT", "REVOKE",
		"RIGHT", "ROLLBACK", "ROWS", "SCHEMA", "SCROLL", "SECTION", "SELECT",
		"SESSION", "SESSION_USER", "SET", "SHORTEST", "SIZE", "SMALLINT", "SOME",
		"SPACE", "SQL", "SQLCODE", "SQLERROR", "SQLSTATE", "SUBSTRING", "SUM",
		"SYSTEM_USER", "TABLE", "TEMPORARY", "THEN", "TIME", "TIMESTAMP", "TO",
		"TRANSACTION", "TRANSLATE", "TRANSLATION", "TRIM", "TRUE", "UNION",
		"UNIQUE", "UNKNOWN", "UPDATE", "UPPER", "UPSERT", "USAGE", "USER", "USING",
		"VALUE", "VALUES", "VARCHAR", "VARYING", "VIEW", "WHEN", "WHENEVER",
		"WHERE", "WITH", "WORK", "WRITE", "ZONE", "LAG", "LEAD", "OVER", "PARTITION",
		"CAN_CAST", "CAN_LOSSLESS_CAST", "MISSING", "PIVOT", "UNPIVOT", "LIMIT",
		"OFFSET", "REMOVE", "INDEX", "LET", "CONFLICT", "DO", "RETURNING", "MODIFIED",
		"NEW", "OLD", "NOTHING", "TUPLE", "INTEGER2", "INT2", "INTEGER4", "INT4",
		"INTEGER8", "INT8", "BIGINT", "BOOL", "BOOLEAN", "STRING", "SYMBOL",
		"CLOB", "BLOB", "STRUCT", "LIST", "SEXP", "BAG", "CARET", "COMMA", "PLUS",
		"MINUS", "SLASH_FORWARD", "PERCENT", "AT_SIGN", "TILDE", "ASTERISK",
		"VERTBAR", "AMPERSAND", "BANG", "LT_EQ", "GT_EQ", "EQ", "NEQ", "CONCAT",
		"ANGLE_LEFT", "ANGLE_RIGHT", "ANGLE_DOUBLE_LEFT", "ANGLE_DOUBLE_RIGHT",
		"BRACKET_LEFT", "BRACKET_RIGHT", "BRACE_LEFT", "BRACE_RIGHT", "PAREN_LEFT",
		"PAREN_RIGHT", "COLON", "COLON_SEMI", "QUESTION_MARK", "PERIOD", "LITERAL_STRING",
		"LITERAL_INTEGER", "LITERAL_DECIMAL", "IDENTIFIER", "IDENTIFIER_QUOTED",
		"WS", "COMMENT_SINGLE", "COMMENT_BLOCK", "UNRECOGNIZED", "ION_CLOSURE",
		"BACKTICK",
	}
	staticData.RuleNames = []string{
		"root", "statement", "explainOption", "asIdent", "atIdent", "byIdent",
		"symbolPrimitive", "dql", "execCommand", "qualifiedName", "tableName",
		"tableConstraintName", "columnName", "columnConstraintName", "ddl",
		"createCommand", "dropCommand", "tableDef", "tableDefPart", "columnConstraint",
		"columnConstraintDef", "dml", "dmlBaseCommand", "pathSimple", "pathSimpleSteps",
		"replaceCommand", "upsertCommand", "removeCommand", "insertCommandReturning",
		"insertStatement", "onConflict", "insertStatementLegacy", "onConflictLegacy",
		"conflictTarget", "constraintName", "conflictAction", "doReplace", "doUpdate",
		"updateClause", "setCommand", "setAssignment", "deleteCommand", "returningClause",
		"returningColumn", "fromClauseSimple", "whereClause", "selectClause",
		"projectionItems", "projectionItem", "setQuantifierStrategy", "letClause",
		"letBinding", "orderByClause", "orderSortSpec", "groupClause", "groupAlias",
		"groupKey", "over", "windowPartitionList", "windowSortSpecList", "havingClause",
		"excludeClause", "excludeExpr", "excludeExprSteps", "fromClause", "whereClauseSelect",
		"offsetByClause", "limitClause", "gpmlPattern", "gpmlPatternList", "matchPattern",
		"graphPart", "matchSelector", "patternPathVariable", "patternRestrictor",
		"node", "edge", "pattern", "patternQuantifier", "edgeWSpec", "edgeSpec",
		"labelSpec", "labelTerm", "labelFactor", "labelPrimary", "edgeAbbrev",
		"tableReference", "tableNonJoin", "tableBaseReference", "tableUnpivot",
		"joinRhs", "joinSpec", "joinType", "expr", "exprBagOp", "exprSelect",
		"exprOr", "exprAnd", "exprNot", "exprPredicate", "mathOp00", "mathOp01",
		"mathOp02", "valueExpr", "exprPrimary", "exprTerm", "nullIf", "coalesce",
		"caseExpr", "values", "valueRow", "valueList", "sequenceConstructor",
		"substring", "position", "overlay", "aggregate", "windowFunction", "cast",
		"canLosslessCast", "canCast", "extract", "trimFunction", "dateFunction",
		"functionCall", "functionName", "pathStep", "exprGraphMatchMany", "exprGraphMatchOne",
		"parameter", "varRefExpr", "nonReservedKeywords", "collection", "array",
		"bag", "tuple", "pair", "literal", "type",
	}
	staticData.PredictionContextCache = antlr.NewPredictionContextCache()
	staticData.serializedATN = []int32{
		4, 1, 310, 1801, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2, 4,
		7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2, 10,
		7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15, 7,
		15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7, 20,
		2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25, 2,
		26, 7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2, 31,
		7, 31, 2, 32, 7, 32, 2, 33, 7, 33, 2, 34, 7, 34, 2, 35, 7, 35, 2, 36, 7,
		36, 2, 37, 7, 37, 2, 38, 7, 38, 2, 39, 7, 39, 2, 40, 7, 40, 2, 41, 7, 41,
		2, 42, 7, 42, 2, 43, 7, 43, 2, 44, 7, 44, 2, 45, 7, 45, 2, 46, 7, 46, 2,
		47, 7, 47, 2, 48, 7, 48, 2, 49, 7, 49, 2, 50, 7, 50, 2, 51, 7, 51, 2, 52,
		7, 52, 2, 53, 7, 53, 2, 54, 7, 54, 2, 55, 7, 55, 2, 56, 7, 56, 2, 57, 7,
		57, 2, 58, 7, 58, 2, 59, 7, 59, 2, 60, 7, 60, 2, 61, 7, 61, 2, 62, 7, 62,
		2, 63, 7, 63, 2, 64, 7, 64, 2, 65, 7, 65, 2, 66, 7, 66, 2, 67, 7, 67, 2,
		68, 7, 68, 2, 69, 7, 69, 2, 70, 7, 70, 2, 71, 7, 71, 2, 72, 7, 72, 2, 73,
		7, 73, 2, 74, 7, 74, 2, 75, 7, 75, 2, 76, 7, 76, 2, 77, 7, 77, 2, 78, 7,
		78, 2, 79, 7, 79, 2, 80, 7, 80, 2, 81, 7, 81, 2, 82, 7, 82, 2, 83, 7, 83,
		2, 84, 7, 84, 2, 85, 7, 85, 2, 86, 7, 86, 2, 87, 7, 87, 2, 88, 7, 88, 2,
		89, 7, 89, 2, 90, 7, 90, 2, 91, 7, 91, 2, 92, 7, 92, 2, 93, 7, 93, 2, 94,
		7, 94, 2, 95, 7, 95, 2, 96, 7, 96, 2, 97, 7, 97, 2, 98, 7, 98, 2, 99, 7,
		99, 2, 100, 7, 100, 2, 101, 7, 101, 2, 102, 7, 102, 2, 103, 7, 103, 2,
		104, 7, 104, 2, 105, 7, 105, 2, 106, 7, 106, 2, 107, 7, 107, 2, 108, 7,
		108, 2, 109, 7, 109, 2, 110, 7, 110, 2, 111, 7, 111, 2, 112, 7, 112, 2,
		113, 7, 113, 2, 114, 7, 114, 2, 115, 7, 115, 2, 116, 7, 116, 2, 117, 7,
		117, 2, 118, 7, 118, 2, 119, 7, 119, 2, 120, 7, 120, 2, 121, 7, 121, 2,
		122, 7, 122, 2, 123, 7, 123, 2, 124, 7, 124, 2, 125, 7, 125, 2, 126, 7,
		126, 2, 127, 7, 127, 2, 128, 7, 128, 2, 129, 7, 129, 2, 130, 7, 130, 2,
		131, 7, 131, 2, 132, 7, 132, 2, 133, 7, 133, 2, 134, 7, 134, 2, 135, 7,
		135, 2, 136, 7, 136, 2, 137, 7, 137, 2, 138, 7, 138, 1, 0, 1, 0, 1, 0,
		1, 0, 1, 0, 5, 0, 284, 8, 0, 10, 0, 12, 0, 287, 9, 0, 1, 0, 1, 0, 3, 0,
		291, 8, 0, 3, 0, 293, 8, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 3, 1, 300, 8,
		1, 1, 1, 1, 1, 3, 1, 304, 8, 1, 1, 1, 1, 1, 3, 1, 308, 8, 1, 1, 1, 1, 1,
		3, 1, 312, 8, 1, 3, 1, 314, 8, 1, 1, 2, 1, 2, 1, 2, 1, 3, 1, 3, 1, 3, 1,
		4, 1, 4, 1, 4, 1, 5, 1, 5, 1, 5, 1, 6, 1, 6, 1, 7, 1, 7, 1, 8, 1, 8, 1,
		8, 1, 8, 1, 8, 5, 8, 337, 8, 8, 10, 8, 12, 8, 340, 9, 8, 3, 8, 342, 8,
		8, 1, 9, 1, 9, 1, 9, 5, 9, 347, 8, 9, 10, 9, 12, 9, 350, 9, 9, 1, 9, 1,
		9, 1, 10, 1, 10, 1, 11, 1, 11, 1, 12, 1, 12, 1, 13, 1, 13, 1, 14, 1, 14,
		3, 14, 364, 8, 14, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 3,
		15, 373, 8, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15,
		5, 15, 383, 8, 15, 10, 15, 12, 15, 386, 9, 15, 1, 15, 1, 15, 3, 15, 390,
		8, 15, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 3,
		16, 401, 8, 16, 1, 17, 1, 17, 1, 17, 5, 17, 406, 8, 17, 10, 17, 12, 17,
		409, 9, 17, 1, 18, 1, 18, 1, 18, 5, 18, 414, 8, 18, 10, 18, 12, 18, 417,
		9, 18, 1, 19, 1, 19, 3, 19, 421, 8, 19, 1, 19, 1, 19, 1, 20, 1, 20, 1,
		20, 3, 20, 428, 8, 20, 1, 21, 1, 21, 4, 21, 432, 8, 21, 11, 21, 12, 21,
		433, 1, 21, 3, 21, 437, 8, 21, 1, 21, 3, 21, 440, 8, 21, 1, 21, 1, 21,
		3, 21, 444, 8, 21, 1, 21, 4, 21, 447, 8, 21, 11, 21, 12, 21, 448, 1, 21,
		3, 21, 452, 8, 21, 1, 21, 1, 21, 1, 21, 3, 21, 457, 8, 21, 1, 22, 1, 22,
		1, 22, 1, 22, 1, 22, 1, 22, 3, 22, 465, 8, 22, 1, 23, 1, 23, 5, 23, 469,
		8, 23, 10, 23, 12, 23, 472, 9, 23, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1,
		24, 1, 24, 1, 24, 1, 24, 1, 24, 3, 24, 484, 8, 24, 1, 25, 1, 25, 1, 25,
		1, 25, 3, 25, 490, 8, 25, 1, 25, 1, 25, 1, 26, 1, 26, 1, 26, 1, 26, 3,
		26, 498, 8, 26, 1, 26, 1, 26, 1, 27, 1, 27, 1, 27, 1, 28, 1, 28, 1, 28,
		1, 28, 1, 28, 1, 28, 1, 28, 3, 28, 512, 8, 28, 1, 28, 3, 28, 515, 8, 28,
		1, 28, 3, 28, 518, 8, 28, 1, 29, 1, 29, 1, 29, 1, 29, 3, 29, 524, 8, 29,
		1, 29, 1, 29, 3, 29, 528, 8, 29, 1, 30, 1, 30, 1, 30, 3, 30, 533, 8, 30,
		1, 30, 1, 30, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 3, 31, 544,
		8, 31, 1, 31, 3, 31, 547, 8, 31, 1, 32, 1, 32, 1, 32, 1, 32, 1, 32, 1,
		32, 1, 32, 1, 33, 1, 33, 1, 33, 1, 33, 5, 33, 560, 8, 33, 10, 33, 12, 33,
		563, 9, 33, 1, 33, 1, 33, 1, 33, 1, 33, 1, 33, 3, 33, 570, 8, 33, 1, 34,
		1, 34, 1, 35, 1, 35, 1, 35, 1, 35, 1, 35, 1, 35, 1, 35, 1, 35, 3, 35, 582,
		8, 35, 1, 36, 1, 36, 1, 36, 3, 36, 587, 8, 36, 1, 37, 1, 37, 1, 37, 3,
		37, 592, 8, 37, 1, 38, 1, 38, 1, 38, 1, 39, 1, 39, 1, 39, 1, 39, 5, 39,
		601, 8, 39, 10, 39, 12, 39, 604, 9, 39, 1, 40, 1, 40, 1, 40, 1, 40, 1,
		41, 1, 41, 1, 41, 3, 41, 613, 8, 41, 1, 41, 3, 41, 616, 8, 41, 1, 42, 1,
		42, 1, 42, 1, 42, 5, 42, 622, 8, 42, 10, 42, 12, 42, 625, 9, 42, 1, 43,
		1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 3, 43, 633, 8, 43, 1, 44, 1, 44, 1,
		44, 3, 44, 638, 8, 44, 1, 44, 3, 44, 641, 8, 44, 1, 44, 3, 44, 644, 8,
		44, 1, 44, 1, 44, 1, 44, 1, 44, 3, 44, 650, 8, 44, 1, 45, 1, 45, 1, 45,
		1, 46, 1, 46, 3, 46, 657, 8, 46, 1, 46, 1, 46, 1, 46, 3, 46, 662, 8, 46,
		1, 46, 1, 46, 1, 46, 3, 46, 667, 8, 46, 1, 46, 1, 46, 1, 46, 1, 46, 1,
		46, 1, 46, 1, 46, 3, 46, 676, 8, 46, 1, 47, 1, 47, 1, 47, 5, 47, 681, 8,
		47, 10, 47, 12, 47, 684, 9, 47, 1, 48, 1, 48, 3, 48, 688, 8, 48, 1, 48,
		3, 48, 691, 8, 48, 1, 49, 1, 49, 1, 50, 1, 50, 1, 50, 1, 50, 5, 50, 699,
		8, 50, 10, 50, 12, 50, 702, 9, 50, 1, 51, 1, 51, 1, 51, 1, 51, 1, 52, 1,
		52, 1, 52, 1, 52, 1, 52, 5, 52, 713, 8, 52, 10, 52, 12, 52, 716, 9, 52,
		1, 53, 1, 53, 3, 53, 720, 8, 53, 1, 53, 1, 53, 3, 53, 724, 8, 53, 1, 54,
		1, 54, 3, 54, 728, 8, 54, 1, 54, 1, 54, 1, 54, 1, 54, 5, 54, 734, 8, 54,
		10, 54, 12, 54, 737, 9, 54, 1, 54, 3, 54, 740, 8, 54, 1, 55, 1, 55, 1,
		55, 1, 55, 1, 56, 1, 56, 1, 56, 3, 56, 749, 8, 56, 1, 57, 1, 57, 1, 57,
		3, 57, 754, 8, 57, 1, 57, 3, 57, 757, 8, 57, 1, 57, 1, 57, 1, 58, 1, 58,
		1, 58, 1, 58, 1, 58, 5, 58, 766, 8, 58, 10, 58, 12, 58, 769, 9, 58, 1,
		59, 1, 59, 1, 59, 1, 59, 1, 59, 5, 59, 776, 8, 59, 10, 59, 12, 59, 779,
		9, 59, 1, 60, 1, 60, 1, 60, 1, 61, 1, 61, 1, 61, 1, 61, 5, 61, 788, 8,
		61, 10, 61, 12, 61, 791, 9, 61, 1, 62, 1, 62, 4, 62, 795, 8, 62, 11, 62,
		12, 62, 796, 1, 63, 1, 63, 1, 63, 1, 63, 1, 63, 1, 63, 1, 63, 1, 63, 1,
		63, 1, 63, 1, 63, 1, 63, 1, 63, 3, 63, 812, 8, 63, 1, 64, 1, 64, 1, 64,
		1, 65, 1, 65, 1, 65, 1, 66, 1, 66, 1, 66, 1, 67, 1, 67, 1, 67, 1, 68, 3,
		68, 827, 8, 68, 1, 68, 1, 68, 1, 69, 3, 69, 832, 8, 69, 1, 69, 1, 69, 1,
		69, 5, 69, 837, 8, 69, 10, 69, 12, 69, 840, 9, 69, 1, 70, 3, 70, 843, 8,
		70, 1, 70, 3, 70, 846, 8, 70, 1, 70, 5, 70, 849, 8, 70, 10, 70, 12, 70,
		852, 9, 70, 1, 71, 1, 71, 1, 71, 3, 71, 857, 8, 71, 1, 72, 1, 72, 1, 72,
		1, 72, 3, 72, 863, 8, 72, 1, 72, 1, 72, 1, 72, 3, 72, 868, 8, 72, 3, 72,
		870, 8, 72, 1, 73, 1, 73, 1, 73, 1, 74, 1, 74, 1, 75, 1, 75, 3, 75, 879,
		8, 75, 1, 75, 1, 75, 3, 75, 883, 8, 75, 1, 75, 3, 75, 886, 8, 75, 1, 75,
		1, 75, 1, 76, 1, 76, 3, 76, 892, 8, 76, 1, 76, 1, 76, 3, 76, 896, 8, 76,
		3, 76, 898, 8, 76, 1, 77, 1, 77, 3, 77, 902, 8, 77, 1, 77, 3, 77, 905,
		8, 77, 1, 77, 4, 77, 908, 8, 77, 11, 77, 12, 77, 909, 1, 77, 3, 77, 913,
		8, 77, 1, 77, 1, 77, 3, 77, 917, 8, 77, 1, 77, 1, 77, 3, 77, 921, 8, 77,
		1, 77, 3, 77, 924, 8, 77, 1, 77, 4, 77, 927, 8, 77, 11, 77, 12, 77, 928,
		1, 77, 3, 77, 932, 8, 77, 1, 77, 1, 77, 3, 77, 936, 8, 77, 3, 77, 938,
		8, 77, 1, 78, 1, 78, 1, 78, 1, 78, 1, 78, 3, 78, 945, 8, 78, 1, 78, 3,
		78, 948, 8, 78, 1, 79, 1, 79, 1, 79, 1, 79, 1, 79, 1, 79, 1, 79, 1, 79,
		1, 79, 1, 79, 1, 79, 1, 79, 1, 79, 1, 79, 1, 79, 1, 79, 1, 79, 1, 79, 1,
		79, 1, 79, 1, 79, 1, 79, 1, 79, 1, 79, 1, 79, 1, 79, 1, 79, 1, 79, 1, 79,
		1, 79, 1, 79, 1, 79, 1, 79, 1, 79, 3, 79, 984, 8, 79, 1, 80, 1, 80, 3,
		80, 988, 8, 80, 1, 80, 1, 80, 3, 80, 992, 8, 80, 1, 80, 3, 80, 995, 8,
		80, 1, 80, 1, 80, 1, 81, 1, 81, 1, 81, 1, 81, 1, 81, 1, 81, 5, 81, 1005,
		8, 81, 10, 81, 12, 81, 1008, 9, 81, 1, 82, 1, 82, 1, 82, 1, 82, 1, 82,
		1, 82, 5, 82, 1016, 8, 82, 10, 82, 12, 82, 1019, 9, 82, 1, 83, 1, 83, 1,
		83, 3, 83, 1024, 8, 83, 1, 84, 1, 84, 1, 84, 1, 84, 1, 84, 1, 84, 3, 84,
		1032, 8, 84, 1, 85, 1, 85, 1, 85, 1, 85, 1, 85, 1, 85, 3, 85, 1040, 8,
		85, 1, 85, 1, 85, 3, 85, 1044, 8, 85, 3, 85, 1046, 8, 85, 1, 86, 1, 86,
		1, 86, 1, 86, 1, 86, 1, 86, 3, 86, 1054, 8, 86, 1, 86, 1, 86, 3, 86, 1058,
		8, 86, 1, 86, 1, 86, 1, 86, 1, 86, 1, 86, 1, 86, 1, 86, 1, 86, 3, 86, 1068,
		8, 86, 1, 86, 1, 86, 1, 86, 1, 86, 5, 86, 1074, 8, 86, 10, 86, 12, 86,
		1077, 9, 86, 1, 87, 1, 87, 3, 87, 1081, 8, 87, 1, 88, 1, 88, 1, 88, 1,
		88, 1, 88, 3, 88, 1088, 8, 88, 1, 88, 3, 88, 1091, 8, 88, 1, 88, 3, 88,
		1094, 8, 88, 1, 88, 1, 88, 3, 88, 1098, 8, 88, 1, 88, 3, 88, 1101, 8, 88,
		1, 88, 3, 88, 1104, 8, 88, 3, 88, 1106, 8, 88, 1, 89, 1, 89, 1, 89, 3,
		89, 1111, 8, 89, 1, 89, 3, 89, 1114, 8, 89, 1, 89, 3, 89, 1117, 8, 89,
		1, 90, 1, 90, 1, 90, 1, 90, 1, 90, 3, 90, 1124, 8, 90, 1, 91, 1, 91, 1,
		91, 1, 92, 1, 92, 1, 92, 3, 92, 1132, 8, 92, 1, 92, 1, 92, 3, 92, 1136,
		8, 92, 1, 92, 1, 92, 3, 92, 1140, 8, 92, 1, 92, 3, 92, 1143, 8, 92, 1,
		93, 1, 93, 1, 94, 1, 94, 1, 94, 1, 94, 1, 94, 3, 94, 1152, 8, 94, 1, 94,
		1, 94, 3, 94, 1156, 8, 94, 1, 94, 1, 94, 1, 94, 3, 94, 1161, 8, 94, 1,
		94, 1, 94, 3, 94, 1165, 8, 94, 1, 94, 1, 94, 1, 94, 3, 94, 1170, 8, 94,
		1, 94, 1, 94, 3, 94, 1174, 8, 94, 1, 94, 5, 94, 1177, 8, 94, 10, 94, 12,
		94, 1180, 9, 94, 1, 95, 1, 95, 3, 95, 1184, 8, 95, 1, 95, 1, 95, 3, 95,
		1188, 8, 95, 1, 95, 3, 95, 1191, 8, 95, 1, 95, 3, 95, 1194, 8, 95, 1, 95,
		3, 95, 1197, 8, 95, 1, 95, 3, 95, 1200, 8, 95, 1, 95, 3, 95, 1203, 8, 95,
		1, 95, 3, 95, 1206, 8, 95, 1, 95, 3, 95, 1209, 8, 95, 1, 96, 1, 96, 1,
		96, 1, 96, 1, 96, 1, 96, 5, 96, 1217, 8, 96, 10, 96, 12, 96, 1220, 9, 96,
		1, 97, 1, 97, 1, 97, 1, 97, 1, 97, 1, 97, 5, 97, 1228, 8, 97, 10, 97, 12,
		97, 1231, 9, 97, 1, 98, 1, 98, 1, 98, 3, 98, 1236, 8, 98, 1, 99, 1, 99,
		1, 99, 1, 99, 1, 99, 1, 99, 1, 99, 1, 99, 1, 99, 3, 99, 1247, 8, 99, 1,
		99, 1, 99, 1, 99, 3, 99, 1252, 8, 99, 1, 99, 1, 99, 1, 99, 1, 99, 1, 99,
		1, 99, 1, 99, 3, 99, 1261, 8, 99, 1, 99, 1, 99, 1, 99, 1, 99, 3, 99, 1267,
		8, 99, 1, 99, 1, 99, 1, 99, 1, 99, 3, 99, 1273, 8, 99, 1, 99, 1, 99, 3,
		99, 1277, 8, 99, 1, 99, 1, 99, 1, 99, 1, 99, 1, 99, 5, 99, 1284, 8, 99,
		10, 99, 12, 99, 1287, 9, 99, 1, 100, 1, 100, 1, 100, 1, 100, 1, 100, 1,
		100, 5, 100, 1295, 8, 100, 10, 100, 12, 100, 1298, 9, 100, 1, 101, 1, 101,
		1, 101, 1, 101, 1, 101, 1, 101, 5, 101, 1306, 8, 101, 10, 101, 12, 101,
		1309, 9, 101, 1, 102, 1, 102, 1, 102, 1, 102, 1, 102, 1, 102, 5, 102, 1317,
		8, 102, 10, 102, 12, 102, 1320, 9, 102, 1, 103, 1, 103, 1, 103, 3, 103,
		1325, 8, 103, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1,
		104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1,
		104, 1, 104, 1, 104, 1, 104, 1, 104, 3, 104, 1348, 8, 104, 1, 104, 1, 104,
		4, 104, 1352, 8, 104, 11, 104, 12, 104, 1353, 5, 104, 1356, 8, 104, 10,
		104, 12, 104, 1359, 9, 104, 1, 105, 1, 105, 1, 105, 1, 105, 1, 105, 1,
		105, 1, 105, 1, 105, 1, 105, 1, 105, 1, 105, 3, 105, 1372, 8, 105, 1, 106,
		1, 106, 1, 106, 1, 106, 1, 106, 1, 106, 1, 106, 1, 107, 1, 107, 1, 107,
		1, 107, 1, 107, 5, 107, 1386, 8, 107, 10, 107, 12, 107, 1389, 9, 107, 1,
		107, 1, 107, 1, 108, 1, 108, 3, 108, 1395, 8, 108, 1, 108, 1, 108, 1, 108,
		1, 108, 1, 108, 4, 108, 1402, 8, 108, 11, 108, 12, 108, 1403, 1, 108, 1,
		108, 3, 108, 1408, 8, 108, 1, 108, 1, 108, 1, 109, 1, 109, 1, 109, 1, 109,
		5, 109, 1416, 8, 109, 10, 109, 12, 109, 1419, 9, 109, 1, 110, 1, 110, 1,
		110, 1, 110, 5, 110, 1425, 8, 110, 10, 110, 12, 110, 1428, 9, 110, 1, 110,
		1, 110, 1, 111, 1, 111, 1, 111, 1, 111, 4, 111, 1436, 8, 111, 11, 111,
		12, 111, 1437, 1, 111, 1, 111, 1, 112, 1, 112, 1, 112, 1, 112, 1, 112,
		5, 112, 1447, 8, 112, 10, 112, 12, 112, 1450, 9, 112, 3, 112, 1452, 8,
		112, 1, 112, 1, 112, 1, 113, 1, 113, 1, 113, 1, 113, 1, 113, 1, 113, 1,
		113, 3, 113, 1463, 8, 113, 3, 113, 1465, 8, 113, 1, 113, 1, 113, 1, 113,
		1, 113, 1, 113, 1, 113, 1, 113, 1, 113, 1, 113, 3, 113, 1476, 8, 113, 3,
		113, 1478, 8, 113, 1, 113, 1, 113, 3, 113, 1482, 8, 113, 1, 114, 1, 114,
		1, 114, 1, 114, 1, 114, 1, 114, 1, 114, 1, 114, 1, 114, 1, 114, 1, 114,
		1, 114, 1, 114, 1, 114, 3, 114, 1498, 8, 114, 1, 115, 1, 115, 1, 115, 1,
		115, 1, 115, 1, 115, 1, 115, 1, 115, 1, 115, 3, 115, 1509, 8, 115, 1, 115,
		1, 115, 1, 115, 1, 115, 1, 115, 1, 115, 1, 115, 1, 115, 1, 115, 1, 115,
		1, 115, 3, 115, 1522, 8, 115, 1, 115, 1, 115, 3, 115, 1526, 8, 115, 1,
		116, 1, 116, 1, 116, 1, 116, 1, 116, 1, 116, 1, 116, 3, 116, 1535, 8, 116,
		1, 116, 1, 116, 1, 116, 3, 116, 1540, 8, 116, 1, 117, 1, 117, 1, 117, 1,
		117, 1, 117, 1, 117, 1, 117, 3, 117, 1549, 8, 117, 3, 117, 1551, 8, 117,
		1, 117, 1, 117, 1, 117, 1, 118, 1, 118, 1, 118, 1, 118, 1, 118, 1, 118,
		1, 118, 1, 119, 1, 119, 1, 119, 1, 119, 1, 119, 1, 119, 1, 119, 1, 120,
		1, 120, 1, 120, 1, 120, 1, 120, 1, 120, 1, 120, 1, 121, 1, 121, 1, 121,
		1, 121, 1, 121, 1, 121, 1, 121, 1, 122, 1, 122, 1, 122, 3, 122, 1587, 8,
		122, 1, 122, 3, 122, 1590, 8, 122, 1, 122, 3, 122, 1593, 8, 122, 1, 122,
		1, 122, 1, 122, 1, 123, 1, 123, 1, 123, 1, 123, 1, 123, 1, 123, 1, 123,
		1, 123, 1, 123, 1, 124, 1, 124, 1, 124, 1, 124, 1, 124, 5, 124, 1612, 8,
		124, 10, 124, 12, 124, 1615, 9, 124, 3, 124, 1617, 8, 124, 1, 124, 1, 124,
		1, 125, 1, 125, 1, 125, 5, 125, 1624, 8, 125, 10, 125, 12, 125, 1627, 9,
		125, 1, 125, 1, 125, 1, 125, 1, 125, 5, 125, 1633, 8, 125, 10, 125, 12,
		125, 1636, 9, 125, 1, 125, 3, 125, 1639, 8, 125, 1, 126, 1, 126, 1, 126,
		1, 126, 1, 126, 1, 126, 1, 126, 1, 126, 1, 126, 1, 126, 1, 126, 3, 126,
		1652, 8, 126, 1, 127, 1, 127, 1, 127, 1, 127, 1, 127, 1, 127, 1, 128, 1,
		128, 1, 128, 1, 128, 1, 129, 1, 129, 1, 130, 3, 130, 1667, 8, 130, 1, 130,
		1, 130, 3, 130, 1671, 8, 130, 1, 130, 3, 130, 1674, 8, 130, 1, 131, 1,
		131, 1, 132, 1, 132, 3, 132, 1680, 8, 132, 1, 133, 1, 133, 1, 133, 1, 133,
		5, 133, 1686, 8, 133, 10, 133, 12, 133, 1689, 9, 133, 3, 133, 1691, 8,
		133, 1, 133, 1, 133, 1, 134, 1, 134, 1, 134, 1, 134, 5, 134, 1699, 8, 134,
		10, 134, 12, 134, 1702, 9, 134, 3, 134, 1704, 8, 134, 1, 134, 1, 134, 1,
		135, 1, 135, 1, 135, 1, 135, 5, 135, 1712, 8, 135, 10, 135, 12, 135, 1715,
		9, 135, 3, 135, 1717, 8, 135, 1, 135, 1, 135, 1, 136, 1, 136, 1, 136, 1,
		136, 1, 137, 1, 137, 1, 137, 1, 137, 1, 137, 1, 137, 1, 137, 1, 137, 1,
		137, 1, 137, 1, 137, 1, 137, 1, 137, 1, 137, 3, 137, 1739, 8, 137, 1, 137,
		1, 137, 1, 137, 3, 137, 1744, 8, 137, 1, 137, 1, 137, 1, 137, 1, 137, 1,
		137, 3, 137, 1751, 8, 137, 1, 137, 1, 137, 1, 137, 3, 137, 1756, 8, 137,
		1, 137, 3, 137, 1759, 8, 137, 1, 138, 1, 138, 1, 138, 1, 138, 1, 138, 1,
		138, 1, 138, 3, 138, 1768, 8, 138, 1, 138, 1, 138, 1, 138, 1, 138, 1, 138,
		3, 138, 1775, 8, 138, 1, 138, 1, 138, 1, 138, 1, 138, 1, 138, 3, 138, 1782,
		8, 138, 1, 138, 3, 138, 1785, 8, 138, 1, 138, 1, 138, 1, 138, 1, 138, 3,
		138, 1791, 8, 138, 1, 138, 1, 138, 1, 138, 3, 138, 1796, 8, 138, 1, 138,
		3, 138, 1799, 8, 138, 1, 138, 0, 11, 162, 164, 172, 188, 192, 194, 198,
		200, 202, 204, 208, 139, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24,
		26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60,
		62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96,
		98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126,
		128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156,
		158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186,
		188, 190, 192, 194, 196, 198, 200, 202, 204, 206, 208, 210, 212, 214, 216,
		218, 220, 222, 224, 226, 228, 230, 232, 234, 236, 238, 240, 242, 244, 246,
		248, 250, 252, 254, 256, 258, 260, 262, 264, 266, 268, 270, 272, 274, 276,
		0, 21, 1, 0, 303, 304, 2, 0, 4, 4, 247, 247, 1, 0, 248, 249, 2, 0, 4, 4,
		67, 67, 2, 0, 11, 11, 62, 62, 2, 0, 90, 90, 123, 123, 2, 0, 4, 4, 8, 8,
		2, 0, 271, 271, 277, 277, 2, 0, 281, 284, 286, 287, 2, 0, 279, 279, 285,
		285, 1, 0, 271, 272, 2, 0, 273, 274, 277, 277, 1, 0, 266, 267, 7, 0, 8,
		8, 15, 15, 44, 44, 75, 75, 131, 132, 189, 189, 196, 196, 1, 0, 230, 231,
		1, 0, 86, 87, 8, 0, 19, 19, 28, 29, 44, 44, 82, 82, 129, 129, 145, 145,
		187, 187, 213, 213, 9, 0, 8, 8, 26, 27, 53, 53, 113, 114, 141, 141, 170,
		170, 188, 188, 236, 236, 251, 268, 3, 0, 26, 27, 91, 91, 220, 220, 2, 0,
		55, 56, 144, 144, 1, 0, 201, 202, 1963, 0, 292, 1, 0, 0, 0, 2, 313, 1,
		0, 0, 0, 4, 315, 1, 0, 0, 0, 6, 318, 1, 0, 0, 0, 8, 321, 1, 0, 0, 0, 10,
		324, 1, 0, 0, 0, 12, 327, 1, 0, 0, 0, 14, 329, 1, 0, 0, 0, 16, 331, 1,
		0, 0, 0, 18, 348, 1, 0, 0, 0, 20, 353, 1, 0, 0, 0, 22, 355, 1, 0, 0, 0,
		24, 357, 1, 0, 0, 0, 26, 359, 1, 0, 0, 0, 28, 363, 1, 0, 0, 0, 30, 389,
		1, 0, 0, 0, 32, 400, 1, 0, 0, 0, 34, 402, 1, 0, 0, 0, 36, 410, 1, 0, 0,
		0, 38, 420, 1, 0, 0, 0, 40, 427, 1, 0, 0, 0, 42, 456, 1, 0, 0, 0, 44, 464,
		1, 0, 0, 0, 46, 466, 1, 0, 0, 0, 48, 483, 1, 0, 0, 0, 50, 485, 1, 0, 0,
		0, 52, 493, 1, 0, 0, 0, 54, 501, 1, 0, 0, 0, 56, 504, 1, 0, 0, 0, 58, 519,
		1, 0, 0, 0, 60, 529, 1, 0, 0, 0, 62, 536, 1, 0, 0, 0, 64, 548, 1, 0, 0,
		0, 66, 569, 1, 0, 0, 0, 68, 571, 1, 0, 0, 0, 70, 581, 1, 0, 0, 0, 72, 583,
		1, 0, 0, 0, 74, 588, 1, 0, 0, 0, 76, 593, 1, 0, 0, 0, 78, 596, 1, 0, 0,
		0, 80, 605, 1, 0, 0, 0, 82, 609, 1, 0, 0, 0, 84, 617, 1, 0, 0, 0, 86, 632,
		1, 0, 0, 0, 88, 649, 1, 0, 0, 0, 90, 651, 1, 0, 0, 0, 92, 675, 1, 0, 0,
		0, 94, 677, 1, 0, 0, 0, 96, 685, 1, 0, 0, 0, 98, 692, 1, 0, 0, 0, 100,
		694, 1, 0, 0, 0, 102, 703, 1, 0, 0, 0, 104, 707, 1, 0, 0, 0, 106, 717,
		1, 0, 0, 0, 108, 725, 1, 0, 0, 0, 110, 741, 1, 0, 0, 0, 112, 745, 1, 0,
		0, 0, 114, 750, 1, 0, 0, 0, 116, 760, 1, 0, 0, 0, 118, 770, 1, 0, 0, 0,
		120, 780, 1, 0, 0, 0, 122, 783, 1, 0, 0, 0, 124, 792, 1, 0, 0, 0, 126,
		811, 1, 0, 0, 0, 128, 813, 1, 0, 0, 0, 130, 816, 1, 0, 0, 0, 132, 819,
		1, 0, 0, 0, 134, 822, 1, 0, 0, 0, 136, 826, 1, 0, 0, 0, 138, 831, 1, 0,
		0, 0, 140, 842, 1, 0, 0, 0, 142, 856, 1, 0, 0, 0, 144, 869, 1, 0, 0, 0,
		146, 871, 1, 0, 0, 0, 148, 874, 1, 0, 0, 0, 150, 876, 1, 0, 0, 0, 152,
		897, 1, 0, 0, 0, 154, 937, 1, 0, 0, 0, 156, 947, 1, 0, 0, 0, 158, 983,
		1, 0, 0, 0, 160, 985, 1, 0, 0, 0, 162, 998, 1, 0, 0, 0, 164, 1009, 1, 0,
		0, 0, 166, 1023, 1, 0, 0, 0, 168, 1031, 1, 0, 0, 0, 170, 1045, 1, 0, 0,
		0, 172, 1053, 1, 0, 0, 0, 174, 1080, 1, 0, 0, 0, 176, 1105, 1, 0, 0, 0,
		178, 1107, 1, 0, 0, 0, 180, 1123, 1, 0, 0, 0, 182, 1125, 1, 0, 0, 0, 184,
		1142, 1, 0, 0, 0, 186, 1144, 1, 0, 0, 0, 188, 1146, 1, 0, 0, 0, 190, 1208,
		1, 0, 0, 0, 192, 1210, 1, 0, 0, 0, 194, 1221, 1, 0, 0, 0, 196, 1235, 1,
		0, 0, 0, 198, 1237, 1, 0, 0, 0, 200, 1288, 1, 0, 0, 0, 202, 1299, 1, 0,
		0, 0, 204, 1310, 1, 0, 0, 0, 206, 1324, 1, 0, 0, 0, 208, 1347, 1, 0, 0,
		0, 210, 1371, 1, 0, 0, 0, 212, 1373, 1, 0, 0, 0, 214, 1380, 1, 0, 0, 0,
		216, 1392, 1, 0, 0, 0, 218, 1411, 1, 0, 0, 0, 220, 1420, 1, 0, 0, 0, 222,
		1431, 1, 0, 0, 0, 224, 1441, 1, 0, 0, 0, 226, 1481, 1, 0, 0, 0, 228, 1497,
		1, 0, 0, 0, 230, 1525, 1, 0, 0, 0, 232, 1539, 1, 0, 0, 0, 234, 1541, 1,
		0, 0, 0, 236, 1555, 1, 0, 0, 0, 238, 1562, 1, 0, 0, 0, 240, 1569, 1, 0,
		0, 0, 242, 1576, 1, 0, 0, 0, 244, 1583, 1, 0, 0, 0, 246, 1597, 1, 0, 0,
		0, 248, 1606, 1, 0, 0, 0, 250, 1638, 1, 0, 0, 0, 252, 1651, 1, 0, 0, 0,
		254, 1653, 1, 0, 0, 0, 256, 1659, 1, 0, 0, 0, 258, 1663, 1, 0, 0, 0, 260,
		1673, 1, 0, 0, 0, 262, 1675, 1, 0, 0, 0, 264, 1679, 1, 0, 0, 0, 266, 1681,
		1, 0, 0, 0, 268, 1694, 1, 0, 0, 0, 270, 1707, 1, 0, 0, 0, 272, 1720, 1,
		0, 0, 0, 274, 1758, 1, 0, 0, 0, 276, 1798, 1, 0, 0, 0, 278, 290, 5, 83,
		0, 0, 279, 280, 5, 294, 0, 0, 280, 285, 3, 4, 2, 0, 281, 282, 5, 270, 0,
		0, 282, 284, 3, 4, 2, 0, 283, 281, 1, 0, 0, 0, 284, 287, 1, 0, 0, 0, 285,
		283, 1, 0, 0, 0, 285, 286, 1, 0, 0, 0, 286, 288, 1, 0, 0, 0, 287, 285,
		1, 0, 0, 0, 288, 289, 5, 295, 0, 0, 289, 291, 1, 0, 0, 0, 290, 279, 1,
		0, 0, 0, 290, 291, 1, 0, 0, 0, 291, 293, 1, 0, 0, 0, 292, 278, 1, 0, 0,
		0, 292, 293, 1, 0, 0, 0, 293, 294, 1, 0, 0, 0, 294, 295, 3, 2, 1, 0, 295,
		296, 5, 0, 0, 1, 296, 1, 1, 0, 0, 0, 297, 299, 3, 14, 7, 0, 298, 300, 5,
		297, 0, 0, 299, 298, 1, 0, 0, 0, 299, 300, 1, 0, 0, 0, 300, 314, 1, 0,
		0, 0, 301, 303, 3, 42, 21, 0, 302, 304, 5, 297, 0, 0, 303, 302, 1, 0, 0,
		0, 303, 304, 1, 0, 0, 0, 304, 314, 1, 0, 0, 0, 305, 307, 3, 28, 14, 0,
		306, 308, 5, 297, 0, 0, 307, 306, 1, 0, 0, 0, 307, 308, 1, 0, 0, 0, 308,
		314, 1, 0, 0, 0, 309, 311, 3, 16, 8, 0, 310, 312, 5, 297, 0, 0, 311, 310,
		1, 0, 0, 0, 311, 312, 1, 0, 0, 0, 312, 314, 1, 0, 0, 0, 313, 297, 1, 0,
		0, 0, 313, 301, 1, 0, 0, 0, 313, 305, 1, 0, 0, 0, 313, 309, 1, 0, 0, 0,
		314, 3, 1, 0, 0, 0, 315, 316, 5, 303, 0, 0, 316, 317, 5, 303, 0, 0, 317,
		5, 1, 0, 0, 0, 318, 319, 5, 10, 0, 0, 319, 320, 3, 12, 6, 0, 320, 7, 1,
		0, 0, 0, 321, 322, 5, 13, 0, 0, 322, 323, 3, 12, 6, 0, 323, 9, 1, 0, 0,
		0, 324, 325, 5, 20, 0, 0, 325, 326, 3, 12, 6, 0, 326, 11, 1, 0, 0, 0, 327,
		328, 7, 0, 0, 0, 328, 13, 1, 0, 0, 0, 329, 330, 3, 186, 93, 0, 330, 15,
		1, 0, 0, 0, 331, 332, 5, 80, 0, 0, 332, 341, 3, 186, 93, 0, 333, 338, 3,
		186, 93, 0, 334, 335, 5, 270, 0, 0, 335, 337, 3, 186, 93, 0, 336, 334,
		1, 0, 0, 0, 337, 340, 1, 0, 0, 0, 338, 336, 1, 0, 0, 0, 338, 339, 1, 0,
		0, 0, 339, 342, 1, 0, 0, 0, 340, 338, 1, 0, 0, 0, 341, 333, 1, 0, 0, 0,
		341, 342, 1, 0, 0, 0, 342, 17, 1, 0, 0, 0, 343, 344, 3, 12, 6, 0, 344,
		345, 5, 299, 0, 0, 345, 347, 1, 0, 0, 0, 346, 343, 1, 0, 0, 0, 347, 350,
		1, 0, 0, 0, 348, 346, 1, 0, 0, 0, 348, 349, 1, 0, 0, 0, 349, 351, 1, 0,
		0, 0, 350, 348, 1, 0, 0, 0, 351, 352, 3, 12, 6, 0, 352, 19, 1, 0, 0, 0,
		353, 354, 3, 12, 6, 0, 354, 21, 1, 0, 0, 0, 355, 356, 3, 12, 6, 0, 356,
		23, 1, 0, 0, 0, 357, 358, 3, 12, 6, 0, 358, 25, 1, 0, 0, 0, 359, 360, 3,
		12, 6, 0, 360, 27, 1, 0, 0, 0, 361, 364, 3, 30, 15, 0, 362, 364, 3, 32,
		16, 0, 363, 361, 1, 0, 0, 0, 363, 362, 1, 0, 0, 0, 364, 29, 1, 0, 0, 0,
		365, 366, 5, 45, 0, 0, 366, 367, 5, 198, 0, 0, 367, 372, 3, 18, 9, 0, 368,
		369, 5, 294, 0, 0, 369, 370, 3, 34, 17, 0, 370, 371, 5, 295, 0, 0, 371,
		373, 1, 0, 0, 0, 372, 368, 1, 0, 0, 0, 372, 373, 1, 0, 0, 0, 373, 390,
		1, 0, 0, 0, 374, 375, 5, 45, 0, 0, 375, 376, 5, 242, 0, 0, 376, 377, 5,
		147, 0, 0, 377, 378, 3, 12, 6, 0, 378, 379, 5, 294, 0, 0, 379, 384, 3,
		46, 23, 0, 380, 381, 5, 270, 0, 0, 381, 383, 3, 46, 23, 0, 382, 380, 1,
		0, 0, 0, 383, 386, 1, 0, 0, 0, 384, 382, 1, 0, 0, 0, 384, 385, 1, 0, 0,
		0, 385, 387, 1, 0, 0, 0, 386, 384, 1, 0, 0, 0, 387, 388, 5, 295, 0, 0,
		388, 390, 1, 0, 0, 0, 389, 365, 1, 0, 0, 0, 389, 374, 1, 0, 0, 0, 390,
		31, 1, 0, 0, 0, 391, 392, 5, 70, 0, 0, 392, 393, 5, 198, 0, 0, 393, 401,
		3, 18, 9, 0, 394, 395, 5, 70, 0, 0, 395, 396, 5, 242, 0, 0, 396, 397, 3,
		12, 6, 0, 397, 398, 5, 147, 0, 0, 398, 399, 3, 12, 6, 0, 399, 401, 1, 0,
		0, 0, 400, 391, 1, 0, 0, 0, 400, 394, 1, 0, 0, 0, 401, 33, 1, 0, 0, 0,
		402, 407, 3, 36, 18, 0, 403, 404, 5, 270, 0, 0, 404, 406, 3, 36, 18, 0,
		405, 403, 1, 0, 0, 0, 406, 409, 1, 0, 0, 0, 407, 405, 1, 0, 0, 0, 407,
		408, 1, 0, 0, 0, 408, 35, 1, 0, 0, 0, 409, 407, 1, 0, 0, 0, 410, 411, 3,
		24, 12, 0, 411, 415, 3, 276, 138, 0, 412, 414, 3, 38, 19, 0, 413, 412,
		1, 0, 0, 0, 414, 417, 1, 0, 0, 0, 415, 413, 1, 0, 0, 0, 415, 416, 1, 0,
		0, 0, 416, 37, 1, 0, 0, 0, 417, 415, 1, 0, 0, 0, 418, 419, 5, 39, 0, 0,
		419, 421, 3, 26, 13, 0, 420, 418, 1, 0, 0, 0, 420, 421, 1, 0, 0, 0, 421,
		422, 1, 0, 0, 0, 422, 423, 3, 40, 20, 0, 423, 39, 1, 0, 0, 0, 424, 425,
		5, 140, 0, 0, 425, 428, 5, 141, 0, 0, 426, 428, 5, 141, 0, 0, 427, 424,
		1, 0, 0, 0, 427, 426, 1, 0, 0, 0, 428, 41, 1, 0, 0, 0, 429, 431, 3, 76,
		38, 0, 430, 432, 3, 44, 22, 0, 431, 430, 1, 0, 0, 0, 432, 433, 1, 0, 0,
		0, 433, 431, 1, 0, 0, 0, 433, 434, 1, 0, 0, 0, 434, 436, 1, 0, 0, 0, 435,
		437, 3, 90, 45, 0, 436, 435, 1, 0, 0, 0, 436, 437, 1, 0, 0, 0, 437, 439,
		1, 0, 0, 0, 438, 440, 3, 84, 42, 0, 439, 438, 1, 0, 0, 0, 439, 440, 1,
		0, 0, 0, 440, 457, 1, 0, 0, 0, 441, 443, 3, 128, 64, 0, 442, 444, 3, 90,
		45, 0, 443, 442, 1, 0, 0, 0, 443, 444, 1, 0, 0, 0, 444, 446, 1, 0, 0, 0,
		445, 447, 3, 44, 22, 0, 446, 445, 1, 0, 0, 0, 447, 448, 1, 0, 0, 0, 448,
		446, 1, 0, 0, 0, 448, 449, 1, 0, 0, 0, 449, 451, 1, 0, 0, 0, 450, 452,
		3, 84, 42, 0, 451, 450, 1, 0, 0, 0, 451, 452, 1, 0, 0, 0, 452, 457, 1,
		0, 0, 0, 453, 457, 3, 82, 41, 0, 454, 457, 3, 56, 28, 0, 455, 457, 3, 44,
		22, 0, 456, 429, 1, 0, 0, 0, 456, 441, 1, 0, 0, 0, 456, 453, 1, 0, 0, 0,
		456, 454, 1, 0, 0, 0, 456, 455, 1, 0, 0, 0, 457, 43, 1, 0, 0, 0, 458, 465,
		3, 58, 29, 0, 459, 465, 3, 62, 31, 0, 460, 465, 3, 78, 39, 0, 461, 465,
		3, 50, 25, 0, 462, 465, 3, 54, 27, 0, 463, 465, 3, 52, 26, 0, 464, 458,
		1, 0, 0, 0, 464, 459, 1, 0, 0, 0, 464, 460, 1, 0, 0, 0, 464, 461, 1, 0,
		0, 0, 464, 462, 1, 0, 0, 0, 464, 463, 1, 0, 0, 0, 465, 45, 1, 0, 0, 0,
		466, 470, 3, 12, 6, 0, 467, 469, 3, 48, 24, 0, 468, 467, 1, 0, 0, 0, 469,
		472, 1, 0, 0, 0, 470, 468, 1, 0, 0, 0, 470, 471, 1, 0, 0, 0, 471, 47, 1,
		0, 0, 0, 472, 470, 1, 0, 0, 0, 473, 474, 5, 290, 0, 0, 474, 475, 3, 274,
		137, 0, 475, 476, 5, 291, 0, 0, 476, 484, 1, 0, 0, 0, 477, 478, 5, 290,
		0, 0, 478, 479, 3, 12, 6, 0, 479, 480, 5, 291, 0, 0, 480, 484, 1, 0, 0,
		0, 481, 482, 5, 299, 0, 0, 482, 484, 3, 12, 6, 0, 483, 473, 1, 0, 0, 0,
		483, 477, 1, 0, 0, 0, 483, 481, 1, 0, 0, 0, 484, 49, 1, 0, 0, 0, 485, 486,
		5, 173, 0, 0, 486, 487, 5, 117, 0, 0, 487, 489, 3, 12, 6, 0, 488, 490,
		3, 6, 3, 0, 489, 488, 1, 0, 0, 0, 489, 490, 1, 0, 0, 0, 490, 491, 1, 0,
		0, 0, 491, 492, 3, 186, 93, 0, 492, 51, 1, 0, 0, 0, 493, 494, 5, 214, 0,
		0, 494, 495, 5, 117, 0, 0, 495, 497, 3, 12, 6, 0, 496, 498, 3, 6, 3, 0,
		497, 496, 1, 0, 0, 0, 497, 498, 1, 0, 0, 0, 498, 499, 1, 0, 0, 0, 499,
		500, 3, 186, 93, 0, 500, 53, 1, 0, 0, 0, 501, 502, 5, 241, 0, 0, 502, 503,
		3, 46, 23, 0, 503, 55, 1, 0, 0, 0, 504, 505, 5, 112, 0, 0, 505, 506, 5,
		117, 0, 0, 506, 507, 3, 46, 23, 0, 507, 508, 5, 218, 0, 0, 508, 511, 3,
		186, 93, 0, 509, 510, 5, 13, 0, 0, 510, 512, 3, 186, 93, 0, 511, 509, 1,
		0, 0, 0, 511, 512, 1, 0, 0, 0, 512, 514, 1, 0, 0, 0, 513, 515, 3, 64, 32,
		0, 514, 513, 1, 0, 0, 0, 514, 515, 1, 0, 0, 0, 515, 517, 1, 0, 0, 0, 516,
		518, 3, 84, 42, 0, 517, 516, 1, 0, 0, 0, 517, 518, 1, 0, 0, 0, 518, 57,
		1, 0, 0, 0, 519, 520, 5, 112, 0, 0, 520, 521, 5, 117, 0, 0, 521, 523, 3,
		12, 6, 0, 522, 524, 3, 6, 3, 0, 523, 522, 1, 0, 0, 0, 523, 524, 1, 0, 0,
		0, 524, 525, 1, 0, 0, 0, 525, 527, 3, 186, 93, 0, 526, 528, 3, 60, 30,
		0, 527, 526, 1, 0, 0, 0, 527, 528, 1, 0, 0, 0, 528, 59, 1, 0, 0, 0, 529,
		530, 5, 147, 0, 0, 530, 532, 5, 244, 0, 0, 531, 533, 3, 66, 33, 0, 532,
		531, 1, 0, 0, 0, 532, 533, 1, 0, 0, 0, 533, 534, 1, 0, 0, 0, 534, 535,
		3, 70, 35, 0, 535, 61, 1, 0, 0, 0, 536, 537, 5, 112, 0, 0, 537, 538, 5,
		117, 0, 0, 538, 539, 3, 46, 23, 0, 539, 540, 5, 218, 0, 0, 540, 543, 3,
		186, 93, 0, 541, 542, 5, 13, 0, 0, 542, 544, 3, 186, 93, 0, 543, 541, 1,
		0, 0, 0, 543, 544, 1, 0, 0, 0, 544, 546, 1, 0, 0, 0, 545, 547, 3, 64, 32,
		0, 546, 545, 1, 0, 0, 0, 546, 547, 1, 0, 0, 0, 547, 63, 1, 0, 0, 0, 548,
		549, 5, 147, 0, 0, 549, 550, 5, 244, 0, 0, 550, 551, 5, 225, 0, 0, 551,
		552, 3, 186, 93, 0, 552, 553, 5, 245, 0, 0, 553, 554, 5, 250, 0, 0, 554,
		65, 1, 0, 0, 0, 555, 556, 5, 294, 0, 0, 556, 561, 3, 12, 6, 0, 557, 558,
		5, 270, 0, 0, 558, 560, 3, 12, 6, 0, 559, 557, 1, 0, 0, 0, 560, 563, 1,
		0, 0, 0, 561, 559, 1, 0, 0, 0, 561, 562, 1, 0, 0, 0, 562, 564, 1, 0, 0,
		0, 563, 561, 1, 0, 0, 0, 564, 565, 5, 295, 0, 0, 565, 570, 1, 0, 0, 0,
		566, 567, 5, 147, 0, 0, 567, 568, 5, 39, 0, 0, 568, 570, 3, 68, 34, 0,
		569, 555, 1, 0, 0, 0, 569, 566, 1, 0, 0, 0, 570, 67, 1, 0, 0, 0, 571, 572,
		3, 12, 6, 0, 572, 69, 1, 0, 0, 0, 573, 574, 5, 245, 0, 0, 574, 582, 5,
		250, 0, 0, 575, 576, 5, 245, 0, 0, 576, 577, 5, 173, 0, 0, 577, 582, 3,
		72, 36, 0, 578, 579, 5, 245, 0, 0, 579, 580, 5, 212, 0, 0, 580, 582, 3,
		74, 37, 0, 581, 573, 1, 0, 0, 0, 581, 575, 1, 0, 0, 0, 581, 578, 1, 0,
		0, 0, 582, 71, 1, 0, 0, 0, 583, 586, 5, 79, 0, 0, 584, 585, 5, 225, 0,
		0, 585, 587, 3, 186, 93, 0, 586, 584, 1, 0, 0, 0, 586, 587, 1, 0, 0, 0,
		587, 73, 1, 0, 0, 0, 588, 591, 5, 79, 0, 0, 589, 590, 5, 225, 0, 0, 590,
		592, 3, 186, 93, 0, 591, 589, 1, 0, 0, 0, 591, 592, 1, 0, 0, 0, 592, 75,
		1, 0, 0, 0, 593, 594, 5, 212, 0, 0, 594, 595, 3, 176, 88, 0, 595, 77, 1,
		0, 0, 0, 596, 597, 5, 185, 0, 0, 597, 602, 3, 80, 40, 0, 598, 599, 5, 270,
		0, 0, 599, 601, 3, 80, 40, 0, 600, 598, 1, 0, 0, 0, 601, 604, 1, 0, 0,
		0, 602, 600, 1, 0, 0, 0, 602, 603, 1, 0, 0, 0, 603, 79, 1, 0, 0, 0, 604,
		602, 1, 0, 0, 0, 605, 606, 3, 46, 23, 0, 606, 607, 5, 283, 0, 0, 607, 608,
		3, 186, 93, 0, 608, 81, 1, 0, 0, 0, 609, 610, 5, 61, 0, 0, 610, 612, 3,
		88, 44, 0, 611, 613, 3, 90, 45, 0, 612, 611, 1, 0, 0, 0, 612, 613, 1, 0,
		0, 0, 613, 615, 1, 0, 0, 0, 614, 616, 3, 84, 42, 0, 615, 614, 1, 0, 0,
		0, 615, 616, 1, 0, 0, 0, 616, 83, 1, 0, 0, 0, 617, 618, 5, 246, 0, 0, 618,
		623, 3, 86, 43, 0, 619, 620, 5, 270, 0, 0, 620, 622, 3, 86, 43, 0, 621,
		619, 1, 0, 0, 0, 622, 625, 1, 0, 0, 0, 623, 621, 1, 0, 0, 0, 623, 624,
		1, 0, 0, 0, 624, 85, 1, 0, 0, 0, 625, 623, 1, 0, 0, 0, 626, 627, 7, 1,
		0, 0, 627, 628, 7, 2, 0, 0, 628, 633, 5, 277, 0, 0, 629, 630, 7, 1, 0,
		0, 630, 631, 7, 2, 0, 0, 631, 633, 3, 186, 93, 0, 632, 626, 1, 0, 0, 0,
		632, 629, 1, 0, 0, 0, 633, 87, 1, 0, 0, 0, 634, 635, 5, 95, 0, 0, 635,
		637, 3, 46, 23, 0, 636, 638, 3, 6, 3, 0, 637, 636, 1, 0, 0, 0, 637, 638,
		1, 0, 0, 0, 638, 640, 1, 0, 0, 0, 639, 641, 3, 8, 4, 0, 640, 639, 1, 0,
		0, 0, 640, 641, 1, 0, 0, 0, 641, 643, 1, 0, 0, 0, 642, 644, 3, 10, 5, 0,
		643, 642, 1, 0, 0, 0, 643, 644, 1, 0, 0, 0, 644, 650, 1, 0, 0, 0, 645,
		646, 5, 95, 0, 0, 646, 647, 3, 46, 23, 0, 647, 648, 3, 12, 6, 0, 648, 650,
		1, 0, 0, 0, 649, 634, 1, 0, 0, 0, 649, 645, 1, 0, 0, 0, 650, 89, 1, 0,
		0, 0, 651, 652, 5, 225, 0, 0, 652, 653, 3, 186, 93, 0, 653, 91, 1, 0, 0,
		0, 654, 656, 5, 182, 0, 0, 655, 657, 3, 98, 49, 0, 656, 655, 1, 0, 0, 0,
		656, 657, 1, 0, 0, 0, 657, 658, 1, 0, 0, 0, 658, 676, 5, 277, 0, 0, 659,
		661, 5, 182, 0, 0, 660, 662, 3, 98, 49, 0, 661, 660, 1, 0, 0, 0, 661, 662,
		1, 0, 0, 0, 662, 663, 1, 0, 0, 0, 663, 676, 3, 94, 47, 0, 664, 666, 5,
		182, 0, 0, 665, 667, 3, 98, 49, 0, 666, 665, 1, 0, 0, 0, 666, 667, 1, 0,
		0, 0, 667, 668, 1, 0, 0, 0, 668, 669, 5, 218, 0, 0, 669, 676, 3, 186, 93,
		0, 670, 671, 5, 237, 0, 0, 671, 672, 3, 186, 93, 0, 672, 673, 5, 13, 0,
		0, 673, 674, 3, 186, 93, 0, 674, 676, 1, 0, 0, 0, 675, 654, 1, 0, 0, 0,
		675, 659, 1, 0, 0, 0, 675, 664, 1, 0, 0, 0, 675, 670, 1, 0, 0, 0, 676,
		93, 1, 0, 0, 0, 677, 682, 3, 96, 48, 0, 678, 679, 5, 270, 0, 0, 679, 681,
		3, 96, 48, 0, 680, 678, 1, 0, 0, 0, 681, 684, 1, 0, 0, 0, 682, 680, 1,
		0, 0, 0, 682, 683, 1, 0, 0, 0, 683, 95, 1, 0, 0, 0, 684, 682, 1, 0, 0,
		0, 685, 690, 3, 186, 93, 0, 686, 688, 5, 10, 0, 0, 687, 686, 1, 0, 0, 0,
		687, 688, 1, 0, 0, 0, 688, 689, 1, 0, 0, 0, 689, 691, 3, 12, 6, 0, 690,
		687, 1, 0, 0, 0, 690, 691, 1, 0, 0, 0, 691, 97, 1, 0, 0, 0, 692, 693, 7,
		3, 0, 0, 693, 99, 1, 0, 0, 0, 694, 695, 5, 243, 0, 0, 695, 700, 3, 102,
		51, 0, 696, 697, 5, 270, 0, 0, 697, 699, 3, 102, 51, 0, 698, 696, 1, 0,
		0, 0, 699, 702, 1, 0, 0, 0, 700, 698, 1, 0, 0, 0, 700, 701, 1, 0, 0, 0,
		701, 101, 1, 0, 0, 0, 702, 700, 1, 0, 0, 0, 703, 704, 3, 186, 93, 0, 704,
		705, 5, 10, 0, 0, 705, 706, 3, 12, 6, 0, 706, 103, 1, 0, 0, 0, 707, 708,
		5, 152, 0, 0, 708, 709, 5, 20, 0, 0, 709, 714, 3, 106, 53, 0, 710, 711,
		5, 270, 0, 0, 711, 713, 3, 106, 53, 0, 712, 710, 1, 0, 0, 0, 713, 716,
		1, 0, 0, 0, 714, 712, 1, 0, 0, 0, 714, 715, 1, 0, 0, 0, 715, 105, 1, 0,
		0, 0, 716, 714, 1, 0, 0, 0, 717, 719, 3, 186, 93, 0, 718, 720, 7, 4, 0,
		0, 719, 718, 1, 0, 0, 0, 719, 720, 1, 0, 0, 0, 720, 723, 1, 0, 0, 0, 721,
		722, 5, 142, 0, 0, 722, 724, 7, 5, 0, 0, 723, 721, 1, 0, 0, 0, 723, 724,
		1, 0, 0, 0, 724, 107, 1, 0, 0, 0, 725, 727, 5, 102, 0, 0, 726, 728, 5,
		158, 0, 0, 727, 726, 1, 0, 0, 0, 727, 728, 1, 0, 0, 0, 728, 729, 1, 0,
		0, 0, 729, 730, 5, 20, 0, 0, 730, 735, 3, 112, 56, 0, 731, 732, 5, 270,
		0, 0, 732, 734, 3, 112, 56, 0, 733, 731, 1, 0, 0, 0, 734, 737, 1, 0, 0,
		0, 735, 733, 1, 0, 0, 0, 735, 736, 1, 0, 0, 0, 736, 739, 1, 0, 0, 0, 737,
		735, 1, 0, 0, 0, 738, 740, 3, 110, 55, 0, 739, 738, 1, 0, 0, 0, 739, 740,
		1, 0, 0, 0, 740, 109, 1, 0, 0, 0, 741, 742, 5, 102, 0, 0, 742, 743, 5,
		10, 0, 0, 743, 744, 3, 12, 6, 0, 744, 111, 1, 0, 0, 0, 745, 748, 3, 190,
		95, 0, 746, 747, 5, 10, 0, 0, 747, 749, 3, 12, 6, 0, 748, 746, 1, 0, 0,
		0, 748, 749, 1, 0, 0, 0, 749, 113, 1, 0, 0, 0, 750, 751, 5, 232, 0, 0,
		751, 753, 5, 294, 0, 0, 752, 754, 3, 116, 58, 0, 753, 752, 1, 0, 0, 0,
		753, 754, 1, 0, 0, 0, 754, 756, 1, 0, 0, 0, 755, 757, 3, 118, 59, 0, 756,
		755, 1, 0, 0, 0, 756, 757, 1, 0, 0, 0, 757, 758, 1, 0, 0, 0, 758, 759,
		5, 295, 0, 0, 759, 115, 1, 0, 0, 0, 760, 761, 5, 233, 0, 0, 761, 762, 5,
		20, 0, 0, 762, 767, 3, 186, 93, 0, 763, 764, 5, 270, 0, 0, 764, 766, 3,
		186, 93, 0, 765, 763, 1, 0, 0, 0, 766, 769, 1, 0, 0, 0, 767, 765, 1, 0,
		0, 0, 767, 768, 1, 0, 0, 0, 768, 117, 1, 0, 0, 0, 769, 767, 1, 0, 0, 0,
		770, 771, 5, 152, 0, 0, 771, 772, 5, 20, 0, 0, 772, 777, 3, 106, 53, 0,
		773, 774, 5, 270, 0, 0, 774, 776, 3, 106, 53, 0, 775, 773, 1, 0, 0, 0,
		776, 779, 1, 0, 0, 0, 777, 775, 1, 0, 0, 0, 777, 778, 1, 0, 0, 0, 778,
		119, 1, 0, 0, 0, 779, 777, 1, 0, 0, 0, 780, 781, 5, 103, 0, 0, 781, 782,
		3, 190, 95, 0, 782, 121, 1, 0, 0, 0, 783, 784, 5, 78, 0, 0, 784, 789, 3,
		124, 62, 0, 785, 786, 5, 270, 0, 0, 786, 788, 3, 124, 62, 0, 787, 785,
		1, 0, 0, 0, 788, 791, 1, 0, 0, 0, 789, 787, 1, 0, 0, 0, 789, 790, 1, 0,
		0, 0, 790, 123, 1, 0, 0, 0, 791, 789, 1, 0, 0, 0, 792, 794, 3, 12, 6, 0,
		793, 795, 3, 126, 63, 0, 794, 793, 1, 0, 0, 0, 795, 796, 1, 0, 0, 0, 796,
		794, 1, 0, 0, 0, 796, 797, 1, 0, 0, 0, 797, 125, 1, 0, 0, 0, 798, 799,
		5, 299, 0, 0, 799, 812, 3, 12, 6, 0, 800, 801, 5, 290, 0, 0, 801, 802,
		5, 300, 0, 0, 802, 812, 5, 291, 0, 0, 803, 804, 5, 290, 0, 0, 804, 805,
		5, 301, 0, 0, 805, 812, 5, 291, 0, 0, 806, 807, 5, 290, 0, 0, 807, 808,
		5, 277, 0, 0, 808, 812, 5, 291, 0, 0, 809, 810, 5, 299, 0, 0, 810, 812,
		5, 277, 0, 0, 811, 798, 1, 0, 0, 0, 811, 800, 1, 0, 0, 0, 811, 803, 1,
		0, 0, 0, 811, 806, 1, 0, 0, 0, 811, 809, 1, 0, 0, 0, 812, 127, 1, 0, 0,
		0, 813, 814, 5, 95, 0, 0, 814, 815, 3, 172, 86, 0, 815, 129, 1, 0, 0, 0,
		816, 817, 5, 225, 0, 0, 817, 818, 3, 190, 95, 0, 818, 131, 1, 0, 0, 0,
		819, 820, 5, 240, 0, 0, 820, 821, 3, 190, 95, 0, 821, 133, 1, 0, 0, 0,
		822, 823, 5, 239, 0, 0, 823, 824, 3, 190, 95, 0, 824, 135, 1, 0, 0, 0,
		825, 827, 3, 144, 72, 0, 826, 825, 1, 0, 0, 0, 826, 827, 1, 0, 0, 0, 827,
		828, 1, 0, 0, 0, 828, 829, 3, 140, 70, 0, 829, 137, 1, 0, 0, 0, 830, 832,
		3, 144, 72, 0, 831, 830, 1, 0, 0, 0, 831, 832, 1, 0, 0, 0, 832, 833, 1,
		0, 0, 0, 833, 838, 3, 140, 70, 0, 834, 835, 5, 270, 0, 0, 835, 837, 3,
		140, 70, 0, 836, 834, 1, 0, 0, 0, 837, 840, 1, 0, 0, 0, 838, 836, 1, 0,
		0, 0, 838, 839, 1, 0, 0, 0, 839, 139, 1, 0, 0, 0, 840, 838, 1, 0, 0, 0,
		841, 843, 3, 148, 74, 0, 842, 841, 1, 0, 0, 0, 842, 843, 1, 0, 0, 0, 843,
		845, 1, 0, 0, 0, 844, 846, 3, 146, 73, 0, 845, 844, 1, 0, 0, 0, 845, 846,
		1, 0, 0, 0, 846, 850, 1, 0, 0, 0, 847, 849, 3, 142, 71, 0, 848, 847, 1,
		0, 0, 0, 849, 852, 1, 0, 0, 0, 850, 848, 1, 0, 0, 0, 850, 851, 1, 0, 0,
		0, 851, 141, 1, 0, 0, 0, 852, 850, 1, 0, 0, 0, 853, 857, 3, 150, 75, 0,
		854, 857, 3, 152, 76, 0, 855, 857, 3, 154, 77, 0, 856, 853, 1, 0, 0, 0,
		856, 854, 1, 0, 0, 0, 856, 855, 1, 0, 0, 0, 857, 143, 1, 0, 0, 0, 858,
		859, 7, 6, 0, 0, 859, 870, 5, 186, 0, 0, 860, 862, 5, 8, 0, 0, 861, 863,
		5, 301, 0, 0, 862, 861, 1, 0, 0, 0, 862, 863, 1, 0, 0, 0, 863, 870, 1,
		0, 0, 0, 864, 865, 5, 186, 0, 0, 865, 867, 5, 301, 0, 0, 866, 868, 5, 102,
		0, 0, 867, 866, 1, 0, 0, 0, 867, 868, 1, 0, 0, 0, 868, 870, 1, 0, 0, 0,
		869, 858, 1, 0, 0, 0, 869, 860, 1, 0, 0, 0, 869, 864, 1, 0, 0, 0, 870,
		145, 1, 0, 0, 0, 871, 872, 3, 12, 6, 0, 872, 873, 5, 283, 0, 0, 873, 147,
		1, 0, 0, 0, 874, 875, 5, 303, 0, 0, 875, 149, 1, 0, 0, 0, 876, 878, 5,
		294, 0, 0, 877, 879, 3, 12, 6, 0, 878, 877, 1, 0, 0, 0, 878, 879, 1, 0,
		0, 0, 879, 882, 1, 0, 0, 0, 880, 881, 5, 296, 0, 0, 881, 883, 3, 162, 81,
		0, 882, 880, 1, 0, 0, 0, 882, 883, 1, 0, 0, 0, 883, 885, 1, 0, 0, 0, 884,
		886, 3, 90, 45, 0, 885, 884, 1, 0, 0, 0, 885, 886, 1, 0, 0, 0, 886, 887,
		1, 0, 0, 0, 887, 888, 5, 295, 0, 0, 888, 151, 1, 0, 0, 0, 889, 891, 3,
		158, 79, 0, 890, 892, 3, 156, 78, 0, 891, 890, 1, 0, 0, 0, 891, 892, 1,
		0, 0, 0, 892, 898, 1, 0, 0, 0, 893, 895, 3, 170, 85, 0, 894, 896, 3, 156,
		78, 0, 895, 894, 1, 0, 0, 0, 895, 896, 1, 0, 0, 0, 896, 898, 1, 0, 0, 0,
		897, 889, 1, 0, 0, 0, 897, 893, 1, 0, 0, 0, 898, 153, 1, 0, 0, 0, 899,
		901, 5, 294, 0, 0, 900, 902, 3, 148, 74, 0, 901, 900, 1, 0, 0, 0, 901,
		902, 1, 0, 0, 0, 902, 904, 1, 0, 0, 0, 903, 905, 3, 146, 73, 0, 904, 903,
		1, 0, 0, 0, 904, 905, 1, 0, 0, 0, 905, 907, 1, 0, 0, 0, 906, 908, 3, 142,
		71, 0, 907, 906, 1, 0, 0, 0, 908, 909, 1, 0, 0, 0, 909, 907, 1, 0, 0, 0,
		909, 910, 1, 0, 0, 0, 910, 912, 1, 0, 0, 0, 911, 913, 3, 90, 45, 0, 912,
		911, 1, 0, 0, 0, 912, 913, 1, 0, 0, 0, 913, 914, 1, 0, 0, 0, 914, 916,
		5, 295, 0, 0, 915, 917, 3, 156, 78, 0, 916, 915, 1, 0, 0, 0, 916, 917,
		1, 0, 0, 0, 917, 938, 1, 0, 0, 0, 918, 920, 5, 290, 0, 0, 919, 921, 3,
		148, 74, 0, 920, 919, 1, 0, 0, 0, 920, 921, 1, 0, 0, 0, 921, 923, 1, 0,
		0, 0, 922, 924, 3, 146, 73, 0, 923, 922, 1, 0, 0, 0, 923, 924, 1, 0, 0,
		0, 924, 926, 1, 0, 0, 0, 925, 927, 3, 142, 71, 0, 926, 925, 1, 0, 0, 0,
		927, 928, 1, 0, 0, 0, 928, 926, 1, 0, 0, 0, 928, 929, 1, 0, 0, 0, 929,
		931, 1, 0, 0, 0, 930, 932, 3, 90, 45, 0, 931, 930, 1, 0, 0, 0, 931, 932,
		1, 0, 0, 0, 932, 933, 1, 0, 0, 0, 933, 935, 5, 291, 0, 0, 934, 936, 3,
		156, 78, 0, 935, 934, 1, 0, 0, 0, 935, 936, 1, 0, 0, 0, 936, 938, 1, 0,
		0, 0, 937, 899, 1, 0, 0, 0, 937, 918, 1, 0, 0, 0, 938, 155, 1, 0, 0, 0,
		939, 948, 7, 7, 0, 0, 940, 941, 5, 292, 0, 0, 941, 942, 5, 301, 0, 0, 942,
		944, 5, 270, 0, 0, 943, 945, 5, 301, 0, 0, 944, 943, 1, 0, 0, 0, 944, 945,
		1, 0, 0, 0, 945, 946, 1, 0, 0, 0, 946, 948, 5, 293, 0, 0, 947, 939, 1,
		0, 0, 0, 947, 940, 1, 0, 0, 0, 948, 157, 1, 0, 0, 0, 949, 950, 5, 272,
		0, 0, 950, 951, 3, 160, 80, 0, 951, 952, 5, 272, 0, 0, 952, 953, 5, 287,
		0, 0, 953, 984, 1, 0, 0, 0, 954, 955, 5, 276, 0, 0, 955, 956, 3, 160, 80,
		0, 956, 957, 5, 276, 0, 0, 957, 984, 1, 0, 0, 0, 958, 959, 5, 286, 0, 0,
		959, 960, 5, 272, 0, 0, 960, 961, 3, 160, 80, 0, 961, 962, 5, 272, 0, 0,
		962, 984, 1, 0, 0, 0, 963, 964, 5, 276, 0, 0, 964, 965, 3, 160, 80, 0,
		965, 966, 5, 276, 0, 0, 966, 967, 5, 287, 0, 0, 967, 984, 1, 0, 0, 0, 968,
		969, 5, 286, 0, 0, 969, 970, 5, 276, 0, 0, 970, 971, 3, 160, 80, 0, 971,
		972, 5, 276, 0, 0, 972, 984, 1, 0, 0, 0, 973, 974, 5, 286, 0, 0, 974, 975,
		5, 272, 0, 0, 975, 976, 3, 160, 80, 0, 976, 977, 5, 272, 0, 0, 977, 978,
		5, 287, 0, 0, 978, 984, 1, 0, 0, 0, 979, 980, 5, 272, 0, 0, 980, 981, 3,
		160, 80, 0, 981, 982, 5, 272, 0, 0, 982, 984, 1, 0, 0, 0, 983, 949, 1,
		0, 0, 0, 983, 954, 1, 0, 0, 0, 983, 958, 1, 0, 0, 0, 983, 963, 1, 0, 0,
		0, 983, 968, 1, 0, 0, 0, 983, 973, 1, 0, 0, 0, 983, 979, 1, 0, 0, 0, 984,
		159, 1, 0, 0, 0, 985, 987, 5, 290, 0, 0, 986, 988, 3, 12, 6, 0, 987, 986,
		1, 0, 0, 0, 987, 988, 1, 0, 0, 0, 988, 991, 1, 0, 0, 0, 989, 990, 5, 296,
		0, 0, 990, 992, 3, 162, 81, 0, 991, 989, 1, 0, 0, 0, 991, 992, 1, 0, 0,
		0, 992, 994, 1, 0, 0, 0, 993, 995, 3, 90, 45, 0, 994, 993, 1, 0, 0, 0,
		994, 995, 1, 0, 0, 0, 995, 996, 1, 0, 0, 0, 996, 997, 5, 291, 0, 0, 997,
		161, 1, 0, 0, 0, 998, 999, 6, 81, -1, 0, 999, 1000, 3, 164, 82, 0, 1000,
		1006, 1, 0, 0, 0, 1001, 1002, 10, 2, 0, 0, 1002, 1003, 5, 278, 0, 0, 1003,
		1005, 3, 164, 82, 0, 1004, 1001, 1, 0, 0, 0, 1005, 1008, 1, 0, 0, 0, 1006,
		1004, 1, 0, 0, 0, 1006, 1007, 1, 0, 0, 0, 1007, 163, 1, 0, 0, 0, 1008,
		1006, 1, 0, 0, 0, 1009, 1010, 6, 82, -1, 0, 1010, 1011, 3, 166, 83, 0,
		1011, 1017, 1, 0, 0, 0, 1012, 1013, 10, 2, 0, 0, 1013, 1014, 5, 279, 0,
		0, 1014, 1016, 3, 166, 83, 0, 1015, 1012, 1, 0, 0, 0, 1016, 1019, 1, 0,
		0, 0, 1017, 1015, 1, 0, 0, 0, 1017, 1018, 1, 0, 0, 0, 1018, 165, 1, 0,
		0, 0, 1019, 1017, 1, 0, 0, 0, 1020, 1021, 5, 280, 0, 0, 1021, 1024, 3,
		168, 84, 0, 1022, 1024, 3, 168, 84, 0, 1023, 1020, 1, 0, 0, 0, 1023, 1022,
		1, 0, 0, 0, 1024, 167, 1, 0, 0, 0, 1025, 1032, 3, 12, 6, 0, 1026, 1032,
		5, 274, 0, 0, 1027, 1028, 5, 294, 0, 0, 1028, 1029, 3, 162, 81, 0, 1029,
		1030, 5, 295, 0, 0, 1030, 1032, 1, 0, 0, 0, 1031, 1025, 1, 0, 0, 0, 1031,
		1026, 1, 0, 0, 0, 1031, 1027, 1, 0, 0, 0, 1032, 169, 1, 0, 0, 0, 1033,
		1046, 5, 276, 0, 0, 1034, 1035, 5, 276, 0, 0, 1035, 1046, 5, 287, 0, 0,
		1036, 1037, 5, 286, 0, 0, 1037, 1046, 5, 276, 0, 0, 1038, 1040, 5, 286,
		0, 0, 1039, 1038, 1, 0, 0, 0, 1039, 1040, 1, 0, 0, 0, 1040, 1041, 1, 0,
		0, 0, 1041, 1043, 5, 272, 0, 0, 1042, 1044, 5, 287, 0, 0, 1043, 1042, 1,
		0, 0, 0, 1043, 1044, 1, 0, 0, 0, 1044, 1046, 1, 0, 0, 0, 1045, 1033, 1,
		0, 0, 0, 1045, 1034, 1, 0, 0, 0, 1045, 1036, 1, 0, 0, 0, 1045, 1039, 1,
		0, 0, 0, 1046, 171, 1, 0, 0, 0, 1047, 1048, 6, 86, -1, 0, 1048, 1054, 3,
		174, 87, 0, 1049, 1050, 5, 294, 0, 0, 1050, 1051, 3, 172, 86, 0, 1051,
		1052, 5, 295, 0, 0, 1052, 1054, 1, 0, 0, 0, 1053, 1047, 1, 0, 0, 0, 1053,
		1049, 1, 0, 0, 0, 1054, 1075, 1, 0, 0, 0, 1055, 1057, 10, 5, 0, 0, 1056,
		1058, 3, 184, 92, 0, 1057, 1056, 1, 0, 0, 0, 1057, 1058, 1, 0, 0, 0, 1058,
		1059, 1, 0, 0, 0, 1059, 1060, 5, 46, 0, 0, 1060, 1061, 5, 120, 0, 0, 1061,
		1074, 3, 180, 90, 0, 1062, 1063, 10, 4, 0, 0, 1063, 1064, 5, 270, 0, 0,
		1064, 1074, 3, 180, 90, 0, 1065, 1067, 10, 3, 0, 0, 1066, 1068, 3, 184,
		92, 0, 1067, 1066, 1, 0, 0, 0, 1067, 1068, 1, 0, 0, 0, 1068, 1069, 1, 0,
		0, 0, 1069, 1070, 5, 120, 0, 0, 1070, 1071, 3, 180, 90, 0, 1071, 1072,
		3, 182, 91, 0, 1072, 1074, 1, 0, 0, 0, 1073, 1055, 1, 0, 0, 0, 1073, 1062,
		1, 0, 0, 0, 1073, 1065, 1, 0, 0, 0, 1074, 1077, 1, 0, 0, 0, 1075, 1073,
		1, 0, 0, 0, 1075, 1076, 1, 0, 0, 0, 1076, 173, 1, 0, 0, 0, 1077, 1075,
		1, 0, 0, 0, 1078, 1081, 3, 176, 88, 0, 1079, 1081, 3, 178, 89, 0, 1080,
		1078, 1, 0, 0, 0, 1080, 1079, 1, 0, 0, 0, 1081, 175, 1, 0, 0, 0, 1082,
		1083, 3, 190, 95, 0, 1083, 1084, 3, 12, 6, 0, 1084, 1106, 1, 0, 0, 0, 1085,
		1087, 3, 190, 95, 0, 1086, 1088, 3, 6, 3, 0, 1087, 1086, 1, 0, 0, 0, 1087,
		1088, 1, 0, 0, 0, 1088, 1090, 1, 0, 0, 0, 1089, 1091, 3, 8, 4, 0, 1090,
		1089, 1, 0, 0, 0, 1090, 1091, 1, 0, 0, 0, 1091, 1093, 1, 0, 0, 0, 1092,
		1094, 3, 10, 5, 0, 1093, 1092, 1, 0, 0, 0, 1093, 1094, 1, 0, 0, 0, 1094,
		1106, 1, 0, 0, 0, 1095, 1097, 3, 256, 128, 0, 1096, 1098, 3, 6, 3, 0, 1097,
		1096, 1, 0, 0, 0, 1097, 1098, 1, 0, 0, 0, 1098, 1100, 1, 0, 0, 0, 1099,
		1101, 3, 8, 4, 0, 1100, 1099, 1, 0, 0, 0, 1100, 1101, 1, 0, 0, 0, 1101,
		1103, 1, 0, 0, 0, 1102, 1104, 3, 10, 5, 0, 1103, 1102, 1, 0, 0, 0, 1103,
		1104, 1, 0, 0, 0, 1104, 1106, 1, 0, 0, 0, 1105, 1082, 1, 0, 0, 0, 1105,
		1085, 1, 0, 0, 0, 1105, 1095, 1, 0, 0, 0, 1106, 177, 1, 0, 0, 0, 1107,
		1108, 5, 238, 0, 0, 1108, 1110, 3, 186, 93, 0, 1109, 1111, 3, 6, 3, 0,
		1110, 1109, 1, 0, 0, 0, 1110, 1111, 1, 0, 0, 0, 1111, 1113, 1, 0, 0, 0,
		1112, 1114, 3, 8, 4, 0, 1113, 1112, 1, 0, 0, 0, 1113, 1114, 1, 0, 0, 0,
		1114, 1116, 1, 0, 0, 0, 1115, 1117, 3, 10, 5, 0, 1116, 1115, 1, 0, 0, 0,
		1116, 1117, 1, 0, 0, 0, 1117, 179, 1, 0, 0, 0, 1118, 1124, 3, 174, 87,
		0, 1119, 1120, 5, 294, 0, 0, 1120, 1121, 3, 172, 86, 0, 1121, 1122, 5,
		295, 0, 0, 1122, 1124, 1, 0, 0, 0, 1123, 1118, 1, 0, 0, 0, 1123, 1119,
		1, 0, 0, 0, 1124, 181, 1, 0, 0, 0, 1125, 1126, 5, 147, 0, 0, 1126, 1127,
		3, 186, 93, 0, 1127, 183, 1, 0, 0, 0, 1128, 1143, 5, 109, 0, 0, 1129, 1131,
		5, 125, 0, 0, 1130, 1132, 5, 153, 0, 0, 1131, 1130, 1, 0, 0, 0, 1131, 1132,
		1, 0, 0, 0, 1132, 1143, 1, 0, 0, 0, 1133, 1135, 5, 176, 0, 0, 1134, 1136,
		5, 153, 0, 0, 1135, 1134, 1, 0, 0, 0, 1135, 1136, 1, 0, 0, 0, 1136, 1143,
		1, 0, 0, 0, 1137, 1139, 5, 96, 0, 0, 1138, 1140, 5, 153, 0, 0, 1139, 1138,
		1, 0, 0, 0, 1139, 1140, 1, 0, 0, 0, 1140, 1143, 1, 0, 0, 0, 1141, 1143,
		5, 153, 0, 0, 1142, 1128, 1, 0, 0, 0, 1142, 1129, 1, 0, 0, 0, 1142, 1133,
		1, 0, 0, 0, 1142, 1137, 1, 0, 0, 0, 1142, 1141, 1, 0, 0, 0, 1143, 185,
		1, 0, 0, 0, 1144, 1145, 3, 188, 94, 0, 1145, 187, 1, 0, 0, 0, 1146, 1147,
		6, 94, -1, 0, 1147, 1148, 3, 190, 95, 0, 1148, 1178, 1, 0, 0, 0, 1149,
		1151, 10, 4, 0, 0, 1150, 1152, 5, 153, 0, 0, 1151, 1150, 1, 0, 0, 0, 1151,
		1152, 1, 0, 0, 0, 1152, 1153, 1, 0, 0, 0, 1153, 1155, 5, 76, 0, 0, 1154,
		1156, 7, 3, 0, 0, 1155, 1154, 1, 0, 0, 0, 1155, 1156, 1, 0, 0, 0, 1156,
		1157, 1, 0, 0, 0, 1157, 1177, 3, 190, 95, 0, 1158, 1160, 10, 3, 0, 0, 1159,
		1161, 5, 153, 0, 0, 1160, 1159, 1, 0, 0, 0, 1160, 1161, 1, 0, 0, 0, 1161,
		1162, 1, 0, 0, 0, 1162, 1164, 5, 209, 0, 0, 1163, 1165, 7, 3, 0, 0, 1164,
		1163, 1, 0, 0, 0, 1164, 1165, 1, 0, 0, 0, 1165, 1166, 1, 0, 0, 0, 1166,
		1177, 3, 190, 95, 0, 1167, 1169, 10, 2, 0, 0, 1168, 1170, 5, 153, 0, 0,
		1169, 1168, 1, 0, 0, 0, 1169, 1170, 1, 0, 0, 0, 1170, 1171, 1, 0, 0, 0,
		1171, 1173, 5, 115, 0, 0, 1172, 1174, 7, 3, 0, 0, 1173, 1172, 1, 0, 0,
		0, 1173, 1174, 1, 0, 0, 0, 1174, 1175, 1, 0, 0, 0, 1175, 1177, 3, 190,
		95, 0, 1176, 1149, 1, 0, 0, 0, 1176, 1158, 1, 0, 0, 0, 1176, 1167, 1, 0,
		0, 0, 1177, 1180, 1, 0, 0, 0, 1178, 1176, 1, 0, 0, 0, 1178, 1179, 1, 0,
		0, 0, 1179, 189, 1, 0, 0, 0, 1180, 1178, 1, 0, 0, 0, 1181, 1183, 3, 92,
		46, 0, 1182, 1184, 3, 122, 61, 0, 1183, 1182, 1, 0, 0, 0, 1183, 1184, 1,
		0, 0, 0, 1184, 1185, 1, 0, 0, 0, 1185, 1187, 3, 128, 64, 0, 1186, 1188,
		3, 100, 50, 0, 1187, 1186, 1, 0, 0, 0, 1187, 1188, 1, 0, 0, 0, 1188, 1190,
		1, 0, 0, 0, 1189, 1191, 3, 130, 65, 0, 1190, 1189, 1, 0, 0, 0, 1190, 1191,
		1, 0, 0, 0, 1191, 1193, 1, 0, 0, 0, 1192, 1194, 3, 108, 54, 0, 1193, 1192,
		1, 0, 0, 0, 1193, 1194, 1, 0, 0, 0, 1194, 1196, 1, 0, 0, 0, 1195, 1197,
		3, 120, 60, 0, 1196, 1195, 1, 0, 0, 0, 1196, 1197, 1, 0, 0, 0, 1197, 1199,
		1, 0, 0, 0, 1198, 1200, 3, 104, 52, 0, 1199, 1198, 1, 0, 0, 0, 1199, 1200,
		1, 0, 0, 0, 1200, 1202, 1, 0, 0, 0, 1201, 1203, 3, 134, 67, 0, 1202, 1201,
		1, 0, 0, 0, 1202, 1203, 1, 0, 0, 0, 1203, 1205, 1, 0, 0, 0, 1204, 1206,
		3, 132, 66, 0, 1205, 1204, 1, 0, 0, 0, 1205, 1206, 1, 0, 0, 0, 1206, 1209,
		1, 0, 0, 0, 1207, 1209, 3, 192, 96, 0, 1208, 1181, 1, 0, 0, 0, 1208, 1207,
		1, 0, 0, 0, 1209, 191, 1, 0, 0, 0, 1210, 1211, 6, 96, -1, 0, 1211, 1212,
		3, 194, 97, 0, 1212, 1218, 1, 0, 0, 0, 1213, 1214, 10, 2, 0, 0, 1214, 1215,
		5, 151, 0, 0, 1215, 1217, 3, 194, 97, 0, 1216, 1213, 1, 0, 0, 0, 1217,
		1220, 1, 0, 0, 0, 1218, 1216, 1, 0, 0, 0, 1218, 1219, 1, 0, 0, 0, 1219,
		193, 1, 0, 0, 0, 1220, 1218, 1, 0, 0, 0, 1221, 1222, 6, 97, -1, 0, 1222,
		1223, 3, 196, 98, 0, 1223, 1229, 1, 0, 0, 0, 1224, 1225, 10, 2, 0, 0, 1225,
		1226, 5, 7, 0, 0, 1226, 1228, 3, 196, 98, 0, 1227, 1224, 1, 0, 0, 0, 1228,
		1231, 1, 0, 0, 0, 1229, 1227, 1, 0, 0, 0, 1229, 1230, 1, 0, 0, 0, 1230,
		195, 1, 0, 0, 0, 1231, 1229, 1, 0, 0, 0, 1232, 1233, 5, 140, 0, 0, 1233,
		1236, 3, 196, 98, 0, 1234, 1236, 3, 198, 99, 0, 1235, 1232, 1, 0, 0, 0,
		1235, 1234, 1, 0, 0, 0, 1236, 197, 1, 0, 0, 0, 1237, 1238, 6, 99, -1, 0,
		1238, 1239, 3, 200, 100, 0, 1239, 1285, 1, 0, 0, 0, 1240, 1241, 10, 7,
		0, 0, 1241, 1242, 7, 8, 0, 0, 1242, 1284, 3, 200, 100, 0, 1243, 1244, 10,
		6, 0, 0, 1244, 1246, 5, 118, 0, 0, 1245, 1247, 5, 140, 0, 0, 1246, 1245,
		1, 0, 0, 0, 1246, 1247, 1, 0, 0, 0, 1247, 1248, 1, 0, 0, 0, 1248, 1284,
		3, 276, 138, 0, 1249, 1251, 10, 5, 0, 0, 1250, 1252, 5, 140, 0, 0, 1251,
		1250, 1, 0, 0, 0, 1251, 1252, 1, 0, 0, 0, 1252, 1253, 1, 0, 0, 0, 1253,
		1254, 5, 106, 0, 0, 1254, 1255, 5, 294, 0, 0, 1255, 1256, 3, 186, 93, 0,
		1256, 1257, 5, 295, 0, 0, 1257, 1284, 1, 0, 0, 0, 1258, 1260, 10, 4, 0,
		0, 1259, 1261, 5, 140, 0, 0, 1260, 1259, 1, 0, 0, 0, 1260, 1261, 1, 0,
		0, 0, 1261, 1262, 1, 0, 0, 0, 1262, 1263, 5, 106, 0, 0, 1263, 1284, 3,
		200, 100, 0, 1264, 1266, 10, 3, 0, 0, 1265, 1267, 5, 140, 0, 0, 1266, 1265,
		1, 0, 0, 0, 1266, 1267, 1, 0, 0, 0, 1267, 1268, 1, 0, 0, 0, 1268, 1269,
		5, 127, 0, 0, 1269, 1272, 3, 200, 100, 0, 1270, 1271, 5, 74, 0, 0, 1271,
		1273, 3, 186, 93, 0, 1272, 1270, 1, 0, 0, 0, 1272, 1273, 1, 0, 0, 0, 1273,
		1284, 1, 0, 0, 0, 1274, 1276, 10, 2, 0, 0, 1275, 1277, 5, 140, 0, 0, 1276,
		1275, 1, 0, 0, 0, 1276, 1277, 1, 0, 0, 0, 1277, 1278, 1, 0, 0, 0, 1278,
		1279, 5, 17, 0, 0, 1279, 1280, 3, 200, 100, 0, 1280, 1281, 5, 7, 0, 0,
		1281, 1282, 3, 200, 100, 0, 1282, 1284, 1, 0, 0, 0, 1283, 1240, 1, 0, 0,
		0, 1283, 1243, 1, 0, 0, 0, 1283, 1249, 1, 0, 0, 0, 1283, 1258, 1, 0, 0,
		0, 1283, 1264, 1, 0, 0, 0, 1283, 1274, 1, 0, 0, 0, 1284, 1287, 1, 0, 0,
		0, 1285, 1283, 1, 0, 0, 0, 1285, 1286, 1, 0, 0, 0, 1286, 199, 1, 0, 0,
		0, 1287, 1285, 1, 0, 0, 0, 1288, 1289, 6, 100, -1, 0, 1289, 1290, 3, 202,
		101, 0, 1290, 1296, 1, 0, 0, 0, 1291, 1292, 10, 2, 0, 0, 1292, 1293, 7,
		9, 0, 0, 1293, 1295, 3, 202, 101, 0, 1294, 1291, 1, 0, 0, 0, 1295, 1298,
		1, 0, 0, 0, 1296, 1294, 1, 0, 0, 0, 1296, 1297, 1, 0, 0, 0, 1297, 201,
		1, 0, 0, 0, 1298, 1296, 1, 0, 0, 0, 1299, 1300, 6, 101, -1, 0, 1300, 1301,
		3, 204, 102, 0, 1301, 1307, 1, 0, 0, 0, 1302, 1303, 10, 2, 0, 0, 1303,
		1304, 7, 10, 0, 0, 1304, 1306, 3, 204, 102, 0, 1305, 1302, 1, 0, 0, 0,
		1306, 1309, 1, 0, 0, 0, 1307, 1305, 1, 0, 0, 0, 1307, 1308, 1, 0, 0, 0,
		1308, 203, 1, 0, 0, 0, 1309, 1307, 1, 0, 0, 0, 1310, 1311, 6, 102, -1,
		0, 1311, 1312, 3, 206, 103, 0, 1312, 1318, 1, 0, 0, 0, 1313, 1314, 10,
		2, 0, 0, 1314, 1315, 7, 11, 0, 0, 1315, 1317, 3, 206, 103, 0, 1316, 1313,
		1, 0, 0, 0, 1317, 1320, 1, 0, 0, 0, 1318, 1316, 1, 0, 0, 0, 1318, 1319,
		1, 0, 0, 0, 1319, 205, 1, 0, 0, 0, 1320, 1318, 1, 0, 0, 0, 1321, 1322,
		7, 10, 0, 0, 1322, 1325, 3, 206, 103, 0, 1323, 1325, 3, 208, 104, 0, 1324,
		1321, 1, 0, 0, 0, 1324, 1323, 1, 0, 0, 0, 1325, 207, 1, 0, 0, 0, 1326,
		1327, 6, 104, -1, 0, 1327, 1348, 3, 210, 105, 0, 1328, 1348, 3, 236, 118,
		0, 1329, 1348, 3, 224, 112, 0, 1330, 1348, 3, 226, 113, 0, 1331, 1348,
		3, 228, 114, 0, 1332, 1348, 3, 230, 115, 0, 1333, 1348, 3, 240, 120, 0,
		1334, 1348, 3, 238, 119, 0, 1335, 1348, 3, 242, 121, 0, 1336, 1348, 3,
		214, 107, 0, 1337, 1348, 3, 246, 123, 0, 1338, 1348, 3, 232, 116, 0, 1339,
		1348, 3, 244, 122, 0, 1340, 1348, 3, 248, 124, 0, 1341, 1348, 3, 212, 106,
		0, 1342, 1348, 3, 254, 127, 0, 1343, 1348, 3, 216, 108, 0, 1344, 1348,
		3, 222, 111, 0, 1345, 1348, 3, 218, 109, 0, 1346, 1348, 3, 234, 117, 0,
		1347, 1326, 1, 0, 0, 0, 1347, 1328, 1, 0, 0, 0, 1347, 1329, 1, 0, 0, 0,
		1347, 1330, 1, 0, 0, 0, 1347, 1331, 1, 0, 0, 0, 1347, 1332, 1, 0, 0, 0,
		1347, 1333, 1, 0, 0, 0, 1347, 1334, 1, 0, 0, 0, 1347, 1335, 1, 0, 0, 0,
		1347, 1336, 1, 0, 0, 0, 1347, 1337, 1, 0, 0, 0, 1347, 1338, 1, 0, 0, 0,
		1347, 1339, 1, 0, 0, 0, 1347, 1340, 1, 0, 0, 0, 1347, 1341, 1, 0, 0, 0,
		1347, 1342, 1, 0, 0, 0, 1347, 1343, 1, 0, 0, 0, 1347, 1344, 1, 0, 0, 0,
		1347, 1345, 1, 0, 0, 0, 1347, 1346, 1, 0, 0, 0, 1348, 1357, 1, 0, 0, 0,
		1349, 1351, 10, 6, 0, 0, 1350, 1352, 3, 252, 126, 0, 1351, 1350, 1, 0,
		0, 0, 1352, 1353, 1, 0, 0, 0, 1353, 1351, 1, 0, 0, 0, 1353, 1354, 1, 0,
		0, 0, 1354, 1356, 1, 0, 0, 0, 1355, 1349, 1, 0, 0, 0, 1356, 1359, 1, 0,
		0, 0, 1357, 1355, 1, 0, 0, 0, 1357, 1358, 1, 0, 0, 0, 1358, 209, 1, 0,
		0, 0, 1359, 1357, 1, 0, 0, 0, 1360, 1361, 5, 294, 0, 0, 1361, 1362, 3,
		186, 93, 0, 1362, 1363, 5, 295, 0, 0, 1363, 1372, 1, 0, 0, 0, 1364, 1372,
		5, 51, 0, 0, 1365, 1372, 5, 48, 0, 0, 1366, 1372, 3, 258, 129, 0, 1367,
		1372, 3, 260, 130, 0, 1368, 1372, 3, 274, 137, 0, 1369, 1372, 3, 264, 132,
		0, 1370, 1372, 3, 270, 135, 0, 1371, 1360, 1, 0, 0, 0, 1371, 1364, 1, 0,
		0, 0, 1371, 1365, 1, 0, 0, 0, 1371, 1366, 1, 0, 0, 0, 1371, 1367, 1, 0,
		0, 0, 1371, 1368, 1, 0, 0, 0, 1371, 1369, 1, 0, 0, 0, 1371, 1370, 1, 0,
		0, 0, 1372, 211, 1, 0, 0, 0, 1373, 1374, 5, 143, 0, 0, 1374, 1375, 5, 294,
		0, 0, 1375, 1376, 3, 186, 93, 0, 1376, 1377, 5, 270, 0, 0, 1377, 1378,
		3, 186, 93, 0, 1378, 1379, 5, 295, 0, 0, 1379, 213, 1, 0, 0, 0, 1380, 1381,
		5, 32, 0, 0, 1381, 1382, 5, 294, 0, 0, 1382, 1387, 3, 186, 93, 0, 1383,
		1384, 5, 270, 0, 0, 1384, 1386, 3, 186, 93, 0, 1385, 1383, 1, 0, 0, 0,
		1386, 1389, 1, 0, 0, 0, 1387, 1385, 1, 0, 0, 0, 1387, 1388, 1, 0, 0, 0,
		1388, 1390, 1, 0, 0, 0, 1389, 1387, 1, 0, 0, 0, 1390, 1391, 5, 295, 0,
		0, 1391, 215, 1, 0, 0, 0, 1392, 1394, 5, 23, 0, 0, 1393, 1395, 3, 186,
		93, 0, 1394, 1393, 1, 0, 0, 0, 1394, 1395, 1, 0, 0, 0, 1395, 1401, 1, 0,
		0, 0, 1396, 1397, 5, 223, 0, 0, 1397, 1398, 3, 186, 93, 0, 1398, 1399,
		5, 200, 0, 0, 1399, 1400, 3, 186, 93, 0, 1400, 1402, 1, 0, 0, 0, 1401,
		1396, 1, 0, 0, 0, 1402, 1403, 1, 0, 0, 0, 1403, 1401, 1, 0, 0, 0, 1403,
		1404, 1, 0, 0, 0, 1404, 1407, 1, 0, 0, 0, 1405, 1406, 5, 71, 0, 0, 1406,
		1408, 3, 186, 93, 0, 1407, 1405, 1, 0, 0, 0, 1407, 1408, 1, 0, 0, 0, 1408,
		1409, 1, 0, 0, 0, 1409, 1410, 5, 72, 0, 0, 1410, 217, 1, 0, 0, 0, 1411,
		1412, 5, 219, 0, 0, 1412, 1417, 3, 220, 110, 0, 1413, 1414, 5, 270, 0,
		0, 1414, 1416, 3, 220, 110, 0, 1415, 1413, 1, 0, 0, 0, 1416, 1419, 1, 0,
		0, 0, 1417, 1415, 1, 0, 0, 0, 1417, 1418, 1, 0, 0, 0, 1418, 219, 1, 0,
		0, 0, 1419, 1417, 1, 0, 0, 0, 1420, 1421, 5, 294, 0, 0, 1421, 1426, 3,
		186, 93, 0, 1422, 1423, 5, 270, 0, 0, 1423, 1425, 3, 186, 93, 0, 1424,
		1422, 1, 0, 0, 0, 1425, 1428, 1, 0, 0, 0, 1426, 1424, 1, 0, 0, 0, 1426,
		1427, 1, 0, 0, 0, 1427, 1429, 1, 0, 0, 0, 1428, 1426, 1, 0, 0, 0, 1429,
		1430, 5, 295, 0, 0, 1430, 221, 1, 0, 0, 0, 1431, 1432, 5, 294, 0, 0, 1432,
		1435, 3, 186, 93, 0, 1433, 1434, 5, 270, 0, 0, 1434, 1436, 3, 186, 93,
		0, 1435, 1433, 1, 0, 0, 0, 1436, 1437, 1, 0, 0, 0, 1437, 1435, 1, 0, 0,
		0, 1437, 1438, 1, 0, 0, 0, 1438, 1439, 1, 0, 0, 0, 1439, 1440, 5, 295,
		0, 0, 1440, 223, 1, 0, 0, 0, 1441, 1442, 7, 12, 0, 0, 1442, 1451, 5, 294,
		0, 0, 1443, 1448, 3, 186, 93, 0, 1444, 1445, 5, 270, 0, 0, 1445, 1447,
		3, 186, 93, 0, 1446, 1444, 1, 0, 0, 0, 1447, 1450, 1, 0, 0, 0, 1448, 1446,
		1, 0, 0, 0, 1448, 1449, 1, 0, 0, 0, 1449, 1452, 1, 0, 0, 0, 1450, 1448,
		1, 0, 0, 0, 1451, 1443, 1, 0, 0, 0, 1451, 1452, 1, 0, 0, 0, 1452, 1453,
		1, 0, 0, 0, 1453, 1454, 5, 295, 0, 0, 1454, 225, 1, 0, 0, 0, 1455, 1456,
		5, 195, 0, 0, 1456, 1457, 5, 294, 0, 0, 1457, 1464, 3, 186, 93, 0, 1458,
		1459, 5, 270, 0, 0, 1459, 1462, 3, 186, 93, 0, 1460, 1461, 5, 270, 0, 0,
		1461, 1463, 3, 186, 93, 0, 1462, 1460, 1, 0, 0, 0, 1462, 1463, 1, 0, 0,
		0, 1463, 1465, 1, 0, 0, 0, 1464, 1458, 1, 0, 0, 0, 1464, 1465, 1, 0, 0,
		0, 1465, 1466, 1, 0, 0, 0, 1466, 1467, 5, 295, 0, 0, 1467, 1482, 1, 0,
		0, 0, 1468, 1469, 5, 195, 0, 0, 1469, 1470, 5, 294, 0, 0, 1470, 1477, 3,
		186, 93, 0, 1471, 1472, 5, 95, 0, 0, 1472, 1475, 3, 186, 93, 0, 1473, 1474,
		5, 92, 0, 0, 1474, 1476, 3, 186, 93, 0, 1475, 1473, 1, 0, 0, 0, 1475, 1476,
		1, 0, 0, 0, 1476, 1478, 1, 0, 0, 0, 1477, 1471, 1, 0, 0, 0, 1477, 1478,
		1, 0, 0, 0, 1478, 1479, 1, 0, 0, 0, 1479, 1480, 5, 295, 0, 0, 1480, 1482,
		1, 0, 0, 0, 1481, 1455, 1, 0, 0, 0, 1481, 1468, 1, 0, 0, 0, 1482, 227,
		1, 0, 0, 0, 1483, 1484, 5, 160, 0, 0, 1484, 1485, 5, 294, 0, 0, 1485, 1486,
		3, 186, 93, 0, 1486, 1487, 5, 270, 0, 0, 1487, 1488, 3, 186, 93, 0, 1488,
		1489, 5, 295, 0, 0, 1489, 1498, 1, 0, 0, 0, 1490, 1491, 5, 160, 0, 0, 1491,
		1492, 5, 294, 0, 0, 1492, 1493, 3, 186, 93, 0, 1493, 1494, 5, 106, 0, 0,
		1494, 1495, 3, 186, 93, 0, 1495, 1496, 5, 295, 0, 0, 1496, 1498, 1, 0,
		0, 0, 1497, 1483, 1, 0, 0, 0, 1497, 1490, 1, 0, 0, 0, 1498, 229, 1, 0,
		0, 0, 1499, 1500, 5, 156, 0, 0, 1500, 1501, 5, 294, 0, 0, 1501, 1502, 3,
		186, 93, 0, 1502, 1503, 5, 270, 0, 0, 1503, 1504, 3, 186, 93, 0, 1504,
		1505, 5, 270, 0, 0, 1505, 1508, 3, 186, 93, 0, 1506, 1507, 5, 270, 0, 0,
		1507, 1509, 3, 186, 93, 0, 1508, 1506, 1, 0, 0, 0, 1508, 1509, 1, 0, 0,
		0, 1509, 1510, 1, 0, 0, 0, 1510, 1511, 5, 295, 0, 0, 1511, 1526, 1, 0,
		0, 0, 1512, 1513, 5, 156, 0, 0, 1513, 1514, 5, 294, 0, 0, 1514, 1515, 3,
		186, 93, 0, 1515, 1516, 5, 159, 0, 0, 1516, 1517, 3, 186, 93, 0, 1517,
		1518, 5, 95, 0, 0, 1518, 1521, 3, 186, 93, 0, 1519, 1520, 5, 92, 0, 0,
		1520, 1522, 3, 186, 93, 0, 1521, 1519, 1, 0, 0, 0, 1521, 1522, 1, 0, 0,
		0, 1522, 1523, 1, 0, 0, 0, 1523, 1524, 5, 295, 0, 0, 1524, 1526, 1, 0,
		0, 0, 1525, 1499, 1, 0, 0, 0, 1525, 1512, 1, 0, 0, 0, 1526, 231, 1, 0,
		0, 0, 1527, 1528, 5, 44, 0, 0, 1528, 1529, 5, 294, 0, 0, 1529, 1530, 5,
		277, 0, 0, 1530, 1540, 5, 295, 0, 0, 1531, 1532, 7, 13, 0, 0, 1532, 1534,
		5, 294, 0, 0, 1533, 1535, 3, 98, 49, 0, 1534, 1533, 1, 0, 0, 0, 1534, 1535,
		1, 0, 0, 0, 1535, 1536, 1, 0, 0, 0, 1536, 1537, 3, 186, 93, 0, 1537, 1538,
		5, 295, 0, 0, 1538, 1540, 1, 0, 0, 0, 1539, 1527, 1, 0, 0, 0, 1539, 1531,
		1, 0, 0, 0, 1540, 233, 1, 0, 0, 0, 1541, 1542, 7, 14, 0, 0, 1542, 1543,
		5, 294, 0, 0, 1543, 1550, 3, 186, 93, 0, 1544, 1545, 5, 270, 0, 0, 1545,
		1548, 3, 186, 93, 0, 1546, 1547, 5, 270, 0, 0, 1547, 1549, 3, 186, 93,
		0, 1548, 1546, 1, 0, 0, 0, 1548, 1549, 1, 0, 0, 0, 1549, 1551, 1, 0, 0,
		0, 1550, 1544, 1, 0, 0, 0, 1550, 1551, 1, 0, 0, 0, 1551, 1552, 1, 0, 0,
		0, 1552, 1553, 5, 295, 0, 0, 1553, 1554, 3, 114, 57, 0, 1554, 235, 1, 0,
		0, 0, 1555, 1556, 5, 24, 0, 0, 1556, 1557, 5, 294, 0, 0, 1557, 1558, 3,
		186, 93, 0, 1558, 1559, 5, 10, 0, 0, 1559, 1560, 3, 276, 138, 0, 1560,
		1561, 5, 295, 0, 0, 1561, 237, 1, 0, 0, 0, 1562, 1563, 5, 235, 0, 0, 1563,
		1564, 5, 294, 0, 0, 1564, 1565, 3, 186, 93, 0, 1565, 1566, 5, 10, 0, 0,
		1566, 1567, 3, 276, 138, 0, 1567, 1568, 5, 295, 0, 0, 1568, 239, 1, 0,
		0, 0, 1569, 1570, 5, 234, 0, 0, 1570, 1571, 5, 294, 0, 0, 1571, 1572, 3,
		186, 93, 0, 1572, 1573, 5, 10, 0, 0, 1573, 1574, 3, 276, 138, 0, 1574,
		1575, 5, 295, 0, 0, 1575, 241, 1, 0, 0, 0, 1576, 1577, 5, 85, 0, 0, 1577,
		1578, 5, 294, 0, 0, 1578, 1579, 5, 303, 0, 0, 1579, 1580, 5, 95, 0, 0,
		1580, 1581, 3, 186, 93, 0, 1581, 1582, 5, 295, 0, 0, 1582, 243, 1, 0, 0,
		0, 1583, 1584, 5, 207, 0, 0, 1584, 1592, 5, 294, 0, 0, 1585, 1587, 5, 303,
		0, 0, 1586, 1585, 1, 0, 0, 0, 1586, 1587, 1, 0, 0, 0, 1587, 1589, 1, 0,
		0, 0, 1588, 1590, 3, 186, 93, 0, 1589, 1588, 1, 0, 0, 0, 1589, 1590, 1,
		0, 0, 0, 1590, 1591, 1, 0, 0, 0, 1591, 1593, 5, 95, 0, 0, 1592, 1586, 1,
		0, 0, 0, 1592, 1593, 1, 0, 0, 0, 1593, 1594, 1, 0, 0, 0, 1594, 1595, 3,
		186, 93, 0, 1595, 1596, 5, 295, 0, 0, 1596, 245, 1, 0, 0, 0, 1597, 1598,
		7, 15, 0, 0, 1598, 1599, 5, 294, 0, 0, 1599, 1600, 5, 303, 0, 0, 1600,
		1601, 5, 270, 0, 0, 1601, 1602, 3, 186, 93, 0, 1602, 1603, 5, 270, 0, 0,
		1603, 1604, 3, 186, 93, 0, 1604, 1605, 5, 295, 0, 0, 1605, 247, 1, 0, 0,
		0, 1606, 1607, 3, 250, 125, 0, 1607, 1616, 5, 294, 0, 0, 1608, 1613, 3,
		186, 93, 0, 1609, 1610, 5, 270, 0, 0, 1610, 1612, 3, 186, 93, 0, 1611,
		1609, 1, 0, 0, 0, 1612, 1615, 1, 0, 0, 0, 1613, 1611, 1, 0, 0, 0, 1613,
		1614, 1, 0, 0, 0, 1614, 1617, 1, 0, 0, 0, 1615, 1613, 1, 0, 0, 0, 1616,
		1608, 1, 0, 0, 0, 1616, 1617, 1, 0, 0, 0, 1617, 1618, 1, 0, 0, 0, 1618,
		1619, 5, 295, 0, 0, 1619, 249, 1, 0, 0, 0, 1620, 1621, 3, 12, 6, 0, 1621,
		1622, 5, 299, 0, 0, 1622, 1624, 1, 0, 0, 0, 1623, 1620, 1, 0, 0, 0, 1624,
		1627, 1, 0, 0, 0, 1625, 1623, 1, 0, 0, 0, 1625, 1626, 1, 0, 0, 0, 1626,
		1628, 1, 0, 0, 0, 1627, 1625, 1, 0, 0, 0, 1628, 1639, 7, 16, 0, 0, 1629,
		1630, 3, 12, 6, 0, 1630, 1631, 5, 299, 0, 0, 1631, 1633, 1, 0, 0, 0, 1632,
		1629, 1, 0, 0, 0, 1633, 1636, 1, 0, 0, 0, 1634, 1632, 1, 0, 0, 0, 1634,
		1635, 1, 0, 0, 0, 1635, 1637, 1, 0, 0, 0, 1636, 1634, 1, 0, 0, 0, 1637,
		1639, 3, 12, 6, 0, 1638, 1625, 1, 0, 0, 0, 1638, 1634, 1, 0, 0, 0, 1639,
		251, 1, 0, 0, 0, 1640, 1641, 5, 290, 0, 0, 1641, 1642, 3, 186, 93, 0, 1642,
		1643, 5, 291, 0, 0, 1643, 1652, 1, 0, 0, 0, 1644, 1645, 5, 290, 0, 0, 1645,
		1646, 5, 277, 0, 0, 1646, 1652, 5, 291, 0, 0, 1647, 1648, 5, 299, 0, 0,
		1648, 1652, 3, 12, 6, 0, 1649, 1650, 5, 299, 0, 0, 1650, 1652, 5, 277,
		0, 0, 1651, 1640, 1, 0, 0, 0, 1651, 1644, 1, 0, 0, 0, 1651, 1647, 1, 0,
		0, 0, 1651, 1649, 1, 0, 0, 0, 1652, 253, 1, 0, 0, 0, 1653, 1654, 5, 294,
		0, 0, 1654, 1655, 3, 208, 104, 0, 1655, 1656, 5, 130, 0, 0, 1656, 1657,
		3, 138, 69, 0, 1657, 1658, 5, 295, 0, 0, 1658, 255, 1, 0, 0, 0, 1659, 1660,
		3, 208, 104, 0, 1660, 1661, 5, 130, 0, 0, 1661, 1662, 3, 136, 68, 0, 1662,
		257, 1, 0, 0, 0, 1663, 1664, 5, 298, 0, 0, 1664, 259, 1, 0, 0, 0, 1665,
		1667, 5, 275, 0, 0, 1666, 1665, 1, 0, 0, 0, 1666, 1667, 1, 0, 0, 0, 1667,
		1668, 1, 0, 0, 0, 1668, 1674, 7, 0, 0, 0, 1669, 1671, 5, 275, 0, 0, 1670,
		1669, 1, 0, 0, 0, 1670, 1671, 1, 0, 0, 0, 1671, 1672, 1, 0, 0, 0, 1672,
		1674, 3, 262, 131, 0, 1673, 1666, 1, 0, 0, 0, 1673, 1670, 1, 0, 0, 0, 1674,
		261, 1, 0, 0, 0, 1675, 1676, 5, 79, 0, 0, 1676, 263, 1, 0, 0, 0, 1677,
		1680, 3, 266, 133, 0, 1678, 1680, 3, 268, 134, 0, 1679, 1677, 1, 0, 0,
		0, 1679, 1678, 1, 0, 0, 0, 1680, 265, 1, 0, 0, 0, 1681, 1690, 5, 290, 0,
		0, 1682, 1687, 3, 186, 93, 0, 1683, 1684, 5, 270, 0, 0, 1684, 1686, 3,
		186, 93, 0, 1685, 1683, 1, 0, 0, 0, 1686, 1689, 1, 0, 0, 0, 1687, 1685,
		1, 0, 0, 0, 1687, 1688, 1, 0, 0, 0, 1688, 1691, 1, 0, 0, 0, 1689, 1687,
		1, 0, 0, 0, 1690, 1682, 1, 0, 0, 0, 1690, 1691, 1, 0, 0, 0, 1691, 1692,
		1, 0, 0, 0, 1692, 1693, 5, 291, 0, 0, 1693, 267, 1, 0, 0, 0, 1694, 1703,
		5, 288, 0, 0, 1695, 1700, 3, 186, 93, 0, 1696, 1697, 5, 270, 0, 0, 1697,
		1699, 3, 186, 93, 0, 1698, 1696, 1, 0, 0, 0, 1699, 1702, 1, 0, 0, 0, 1700,
		1698, 1, 0, 0, 0, 1700, 1701, 1, 0, 0, 0, 1701, 1704, 1, 0, 0, 0, 1702,
		1700, 1, 0, 0, 0, 1703, 1695, 1, 0, 0, 0, 1703, 1704, 1, 0, 0, 0, 1704,
		1705, 1, 0, 0, 0, 1705, 1706, 5, 289, 0, 0, 1706, 269, 1, 0, 0, 0, 1707,
		1716, 5, 292, 0, 0, 1708, 1713, 3, 272, 136, 0, 1709, 1710, 5, 270, 0,
		0, 1710, 1712, 3, 272, 136, 0, 1711, 1709, 1, 0, 0, 0, 1712, 1715, 1, 0,
		0, 0, 1713, 1711, 1, 0, 0, 0, 1713, 1714, 1, 0, 0, 0, 1714, 1717, 1, 0,
		0, 0, 1715, 1713, 1, 0, 0, 0, 1716, 1708, 1, 0, 0, 0, 1716, 1717, 1, 0,
		0, 0, 1717, 1718, 1, 0, 0, 0, 1718, 1719, 5, 293, 0, 0, 1719, 271, 1, 0,
		0, 0, 1720, 1721, 3, 186, 93, 0, 1721, 1722, 5, 296, 0, 0, 1722, 1723,
		3, 186, 93, 0, 1723, 273, 1, 0, 0, 0, 1724, 1759, 5, 141, 0, 0, 1725, 1759,
		5, 236, 0, 0, 1726, 1759, 5, 208, 0, 0, 1727, 1759, 5, 88, 0, 0, 1728,
		1759, 5, 300, 0, 0, 1729, 1759, 5, 301, 0, 0, 1730, 1759, 5, 302, 0, 0,
		1731, 1759, 5, 309, 0, 0, 1732, 1733, 5, 53, 0, 0, 1733, 1759, 5, 300,
		0, 0, 1734, 1738, 5, 201, 0, 0, 1735, 1736, 5, 294, 0, 0, 1736, 1737, 5,
		301, 0, 0, 1737, 1739, 5, 295, 0, 0, 1738, 1735, 1, 0, 0, 0, 1738, 1739,
		1, 0, 0, 0, 1739, 1743, 1, 0, 0, 0, 1740, 1741, 5, 226, 0, 0, 1741, 1742,
		5, 201, 0, 0, 1742, 1744, 5, 229, 0, 0, 1743, 1740, 1, 0, 0, 0, 1743, 1744,
		1, 0, 0, 0, 1744, 1745, 1, 0, 0, 0, 1745, 1759, 5, 300, 0, 0, 1746, 1750,
		5, 202, 0, 0, 1747, 1748, 5, 294, 0, 0, 1748, 1749, 5, 301, 0, 0, 1749,
		1751, 5, 295, 0, 0, 1750, 1747, 1, 0, 0, 0, 1750, 1751, 1, 0, 0, 0, 1751,
		1755, 1, 0, 0, 0, 1752, 1753, 5, 226, 0, 0, 1753, 1754, 5, 201, 0, 0, 1754,
		1756, 5, 229, 0, 0, 1755, 1752, 1, 0, 0, 0, 1755, 1756, 1, 0, 0, 0, 1756,
		1757, 1, 0, 0, 0, 1757, 1759, 5, 300, 0, 0, 1758, 1724, 1, 0, 0, 0, 1758,
		1725, 1, 0, 0, 0, 1758, 1726, 1, 0, 0, 0, 1758, 1727, 1, 0, 0, 0, 1758,
		1728, 1, 0, 0, 0, 1758, 1729, 1, 0, 0, 0, 1758, 1730, 1, 0, 0, 0, 1758,
		1731, 1, 0, 0, 0, 1758, 1732, 1, 0, 0, 0, 1758, 1734, 1, 0, 0, 0, 1758,
		1746, 1, 0, 0, 0, 1759, 275, 1, 0, 0, 0, 1760, 1799, 7, 17, 0, 0, 1761,
		1762, 5, 69, 0, 0, 1762, 1799, 5, 161, 0, 0, 1763, 1767, 7, 18, 0, 0, 1764,
		1765, 5, 294, 0, 0, 1765, 1766, 5, 301, 0, 0, 1766, 1768, 5, 295, 0, 0,
		1767, 1764, 1, 0, 0, 0, 1767, 1768, 1, 0, 0, 0, 1768, 1799, 1, 0, 0, 0,
		1769, 1770, 5, 27, 0, 0, 1770, 1774, 5, 221, 0, 0, 1771, 1772, 5, 294,
		0, 0, 1772, 1773, 5, 301, 0, 0, 1773, 1775, 5, 295, 0, 0, 1774, 1771, 1,
		0, 0, 0, 1774, 1775, 1, 0, 0, 0, 1775, 1799, 1, 0, 0, 0, 1776, 1784, 7,
		19, 0, 0, 1777, 1778, 5, 294, 0, 0, 1778, 1781, 5, 301, 0, 0, 1779, 1780,
		5, 270, 0, 0, 1780, 1782, 5, 301, 0, 0, 1781, 1779, 1, 0, 0, 0, 1781, 1782,
		1, 0, 0, 0, 1782, 1783, 1, 0, 0, 0, 1783, 1785, 5, 295, 0, 0, 1784, 1777,
		1, 0, 0, 0, 1784, 1785, 1, 0, 0, 0, 1785, 1799, 1, 0, 0, 0, 1786, 1790,
		7, 20, 0, 0, 1787, 1788, 5, 294, 0, 0, 1788, 1789, 5, 301, 0, 0, 1789,
		1791, 5, 295, 0, 0, 1790, 1787, 1, 0, 0, 0, 1790, 1791, 1, 0, 0, 0, 1791,
		1795, 1, 0, 0, 0, 1792, 1793, 5, 226, 0, 0, 1793, 1794, 5, 201, 0, 0, 1794,
		1796, 5, 229, 0, 0, 1795, 1792, 1, 0, 0, 0, 1795, 1796, 1, 0, 0, 0, 1796,
		1799, 1, 0, 0, 0, 1797, 1799, 3, 12, 6, 0, 1798, 1760, 1, 0, 0, 0, 1798,
		1761, 1, 0, 0, 0, 1798, 1763, 1, 0, 0, 0, 1798, 1769, 1, 0, 0, 0, 1798,
		1776, 1, 0, 0, 0, 1798, 1786, 1, 0, 0, 0, 1798, 1797, 1, 0, 0, 0, 1799,
		277, 1, 0, 0, 0, 226, 285, 290, 292, 299, 303, 307, 311, 313, 338, 341,
		348, 363, 372, 384, 389, 400, 407, 415, 420, 427, 433, 436, 439, 443, 448,
		451, 456, 464, 470, 483, 489, 497, 511, 514, 517, 523, 527, 532, 543, 546,
		561, 569, 581, 586, 591, 602, 612, 615, 623, 632, 637, 640, 643, 649, 656,
		661, 666, 675, 682, 687, 690, 700, 714, 719, 723, 727, 735, 739, 748, 753,
		756, 767, 777, 789, 796, 811, 826, 831, 838, 842, 845, 850, 856, 862, 867,
		869, 878, 882, 885, 891, 895, 897, 901, 904, 909, 912, 916, 920, 923, 928,
		931, 935, 937, 944, 947, 983, 987, 991, 994, 1006, 1017, 1023, 1031, 1039,
		1043, 1045, 1053, 1057, 1067, 1073, 1075, 1080, 1087, 1090, 1093, 1097,
		1100, 1103, 1105, 1110, 1113, 1116, 1123, 1131, 1135, 1139, 1142, 1151,
		1155, 1160, 1164, 1169, 1173, 1176, 1178, 1183, 1187, 1190, 1193, 1196,
		1199, 1202, 1205, 1208, 1218, 1229, 1235, 1246, 1251, 1260, 1266, 1272,
		1276, 1283, 1285, 1296, 1307, 1318, 1324, 1347, 1353, 1357, 1371, 1387,
		1394, 1403, 1407, 1417, 1426, 1437, 1448, 1451, 1462, 1464, 1475, 1477,
		1481, 1497, 1508, 1521, 1525, 1534, 1539, 1548, 1550, 1586, 1589, 1592,
		1613, 1616, 1625, 1634, 1638, 1651, 1666, 1670, 1673, 1679, 1687, 1690,
		1700, 1703, 1713, 1716, 1738, 1743, 1750, 1755, 1758, 1767, 1774, 1781,
		1784, 1790, 1795, 1798,
	}
	deserializer := antlr.NewATNDeserializer(nil)
	staticData.atn = deserializer.Deserialize(staticData.serializedATN)
	atn := staticData.atn
	staticData.decisionToDFA = make([]*antlr.DFA, len(atn.DecisionToState))
	decisionToDFA := staticData.decisionToDFA
	for index, state := range atn.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(state, index)
	}
}

// PartiQLParserInit initializes any static state used to implement PartiQLParser. By default the
// static state used to implement the parser is lazily initialized during the first call to
// NewPartiQLParser(). You can call this function if you wish to initialize the static state ahead
// of time.
func PartiQLParserInit() {
	staticData := &PartiQLParserParserStaticData
	staticData.once.Do(partiqlparserParserInit)
}

// NewPartiQLParser produces a new parser instance for the optional input antlr.TokenStream.
func NewPartiQLParser(input antlr.TokenStream) *PartiQLParser {
	PartiQLParserInit()
	this := new(PartiQLParser)
	this.BaseParser = antlr.NewBaseParser(input)
	staticData := &PartiQLParserParserStaticData
	this.Interpreter = antlr.NewParserATNSimulator(this, staticData.atn, staticData.decisionToDFA, staticData.PredictionContextCache)
	this.RuleNames = staticData.RuleNames
	this.LiteralNames = staticData.LiteralNames
	this.SymbolicNames = staticData.SymbolicNames
	this.GrammarFileName = "PartiQLParser.g4"

	return this
}

// PartiQLParser tokens.
const (
	PartiQLParserEOF                = antlr.TokenEOF
	PartiQLParserABSOLUTE           = 1
	PartiQLParserACTION             = 2
	PartiQLParserADD                = 3
	PartiQLParserALL                = 4
	PartiQLParserALLOCATE           = 5
	PartiQLParserALTER              = 6
	PartiQLParserAND                = 7
	PartiQLParserANY                = 8
	PartiQLParserARE                = 9
	PartiQLParserAS                 = 10
	PartiQLParserASC                = 11
	PartiQLParserASSERTION          = 12
	PartiQLParserAT                 = 13
	PartiQLParserAUTHORIZATION      = 14
	PartiQLParserAVG                = 15
	PartiQLParserBEGIN              = 16
	PartiQLParserBETWEEN            = 17
	PartiQLParserBIT                = 18
	PartiQLParserBIT_LENGTH         = 19
	PartiQLParserBY                 = 20
	PartiQLParserCASCADE            = 21
	PartiQLParserCASCADED           = 22
	PartiQLParserCASE               = 23
	PartiQLParserCAST               = 24
	PartiQLParserCATALOG            = 25
	PartiQLParserCHAR               = 26
	PartiQLParserCHARACTER          = 27
	PartiQLParserCHARACTER_LENGTH   = 28
	PartiQLParserCHAR_LENGTH        = 29
	PartiQLParserCHECK              = 30
	PartiQLParserCLOSE              = 31
	PartiQLParserCOALESCE           = 32
	PartiQLParserCOLLATE            = 33
	PartiQLParserCOLLATION          = 34
	PartiQLParserCOLUMN             = 35
	PartiQLParserCOMMIT             = 36
	PartiQLParserCONNECT            = 37
	PartiQLParserCONNECTION         = 38
	PartiQLParserCONSTRAINT         = 39
	PartiQLParserCONSTRAINTS        = 40
	PartiQLParserCONTINUE           = 41
	PartiQLParserCONVERT            = 42
	PartiQLParserCORRESPONDING      = 43
	PartiQLParserCOUNT              = 44
	PartiQLParserCREATE             = 45
	PartiQLParserCROSS              = 46
	PartiQLParserCURRENT            = 47
	PartiQLParserCURRENT_DATE       = 48
	PartiQLParserCURRENT_TIME       = 49
	PartiQLParserCURRENT_TIMESTAMP  = 50
	PartiQLParserCURRENT_USER       = 51
	PartiQLParserCURSOR             = 52
	PartiQLParserDATE               = 53
	PartiQLParserDEALLOCATE         = 54
	PartiQLParserDEC                = 55
	PartiQLParserDECIMAL            = 56
	PartiQLParserDECLARE            = 57
	PartiQLParserDEFAULT            = 58
	PartiQLParserDEFERRABLE         = 59
	PartiQLParserDEFERRED           = 60
	PartiQLParserDELETE             = 61
	PartiQLParserDESC               = 62
	PartiQLParserDESCRIBE           = 63
	PartiQLParserDESCRIPTOR         = 64
	PartiQLParserDIAGNOSTICS        = 65
	PartiQLParserDISCONNECT         = 66
	PartiQLParserDISTINCT           = 67
	PartiQLParserDOMAIN             = 68
	PartiQLParserDOUBLE             = 69
	PartiQLParserDROP               = 70
	PartiQLParserELSE               = 71
	PartiQLParserEND                = 72
	PartiQLParserEND_EXEC           = 73
	PartiQLParserESCAPE             = 74
	PartiQLParserEVERY              = 75
	PartiQLParserEXCEPT             = 76
	PartiQLParserEXCEPTION          = 77
	PartiQLParserEXCLUDE            = 78
	PartiQLParserEXCLUDED           = 79
	PartiQLParserEXEC               = 80
	PartiQLParserEXECUTE            = 81
	PartiQLParserEXISTS             = 82
	PartiQLParserEXPLAIN            = 83
	PartiQLParserEXTERNAL           = 84
	PartiQLParserEXTRACT            = 85
	PartiQLParserDATE_ADD           = 86
	PartiQLParserDATE_DIFF          = 87
	PartiQLParserFALSE              = 88
	PartiQLParserFETCH              = 89
	PartiQLParserFIRST              = 90
	PartiQLParserFLOAT              = 91
	PartiQLParserFOR                = 92
	PartiQLParserFOREIGN            = 93
	PartiQLParserFOUND              = 94
	PartiQLParserFROM               = 95
	PartiQLParserFULL               = 96
	PartiQLParserGET                = 97
	PartiQLParserGLOBAL             = 98
	PartiQLParserGO                 = 99
	PartiQLParserGOTO               = 100
	PartiQLParserGRANT              = 101
	PartiQLParserGROUP              = 102
	PartiQLParserHAVING             = 103
	PartiQLParserIDENTITY           = 104
	PartiQLParserIMMEDIATE          = 105
	PartiQLParserIN                 = 106
	PartiQLParserINDICATOR          = 107
	PartiQLParserINITIALLY          = 108
	PartiQLParserINNER              = 109
	PartiQLParserINPUT              = 110
	PartiQLParserINSENSITIVE        = 111
	PartiQLParserINSERT             = 112
	PartiQLParserINT                = 113
	PartiQLParserINTEGER            = 114
	PartiQLParserINTERSECT          = 115
	PartiQLParserINTERVAL           = 116
	PartiQLParserINTO               = 117
	PartiQLParserIS                 = 118
	PartiQLParserISOLATION          = 119
	PartiQLParserJOIN               = 120
	PartiQLParserKEY                = 121
	PartiQLParserLANGUAGE           = 122
	PartiQLParserLAST               = 123
	PartiQLParserLATERAL            = 124
	PartiQLParserLEFT               = 125
	PartiQLParserLEVEL              = 126
	PartiQLParserLIKE               = 127
	PartiQLParserLOCAL              = 128
	PartiQLParserLOWER              = 129
	PartiQLParserMATCH              = 130
	PartiQLParserMAX                = 131
	PartiQLParserMIN                = 132
	PartiQLParserMODULE             = 133
	PartiQLParserNAMES              = 134
	PartiQLParserNATIONAL           = 135
	PartiQLParserNATURAL            = 136
	PartiQLParserNCHAR              = 137
	PartiQLParserNEXT               = 138
	PartiQLParserNO                 = 139
	PartiQLParserNOT                = 140
	PartiQLParserNULL               = 141
	PartiQLParserNULLS              = 142
	PartiQLParserNULLIF             = 143
	PartiQLParserNUMERIC            = 144
	PartiQLParserOCTET_LENGTH       = 145
	PartiQLParserOF                 = 146
	PartiQLParserON                 = 147
	PartiQLParserONLY               = 148
	PartiQLParserOPEN               = 149
	PartiQLParserOPTION             = 150
	PartiQLParserOR                 = 151
	PartiQLParserORDER              = 152
	PartiQLParserOUTER              = 153
	PartiQLParserOUTPUT             = 154
	PartiQLParserOVERLAPS           = 155
	PartiQLParserOVERLAY            = 156
	PartiQLParserPAD                = 157
	PartiQLParserPARTIAL            = 158
	PartiQLParserPLACING            = 159
	PartiQLParserPOSITION           = 160
	PartiQLParserPRECISION          = 161
	PartiQLParserPREPARE            = 162
	PartiQLParserPRESERVE           = 163
	PartiQLParserPRIMARY            = 164
	PartiQLParserPRIOR              = 165
	PartiQLParserPRIVILEGES         = 166
	PartiQLParserPROCEDURE          = 167
	PartiQLParserPUBLIC             = 168
	PartiQLParserREAD               = 169
	PartiQLParserREAL               = 170
	PartiQLParserREFERENCES         = 171
	PartiQLParserRELATIVE           = 172
	PartiQLParserREPLACE            = 173
	PartiQLParserRESTRICT           = 174
	PartiQLParserREVOKE             = 175
	PartiQLParserRIGHT              = 176
	PartiQLParserROLLBACK           = 177
	PartiQLParserROWS               = 178
	PartiQLParserSCHEMA             = 179
	PartiQLParserSCROLL             = 180
	PartiQLParserSECTION            = 181
	PartiQLParserSELECT             = 182
	PartiQLParserSESSION            = 183
	PartiQLParserSESSION_USER       = 184
	PartiQLParserSET                = 185
	PartiQLParserSHORTEST           = 186
	PartiQLParserSIZE               = 187
	PartiQLParserSMALLINT           = 188
	PartiQLParserSOME               = 189
	PartiQLParserSPACE              = 190
	PartiQLParserSQL                = 191
	PartiQLParserSQLCODE            = 192
	PartiQLParserSQLERROR           = 193
	PartiQLParserSQLSTATE           = 194
	PartiQLParserSUBSTRING          = 195
	PartiQLParserSUM                = 196
	PartiQLParserSYSTEM_USER        = 197
	PartiQLParserTABLE              = 198
	PartiQLParserTEMPORARY          = 199
	PartiQLParserTHEN               = 200
	PartiQLParserTIME               = 201
	PartiQLParserTIMESTAMP          = 202
	PartiQLParserTO                 = 203
	PartiQLParserTRANSACTION        = 204
	PartiQLParserTRANSLATE          = 205
	PartiQLParserTRANSLATION        = 206
	PartiQLParserTRIM               = 207
	PartiQLParserTRUE               = 208
	PartiQLParserUNION              = 209
	PartiQLParserUNIQUE             = 210
	PartiQLParserUNKNOWN            = 211
	PartiQLParserUPDATE             = 212
	PartiQLParserUPPER              = 213
	PartiQLParserUPSERT             = 214
	PartiQLParserUSAGE              = 215
	PartiQLParserUSER               = 216
	PartiQLParserUSING              = 217
	PartiQLParserVALUE              = 218
	PartiQLParserVALUES             = 219
	PartiQLParserVARCHAR            = 220
	PartiQLParserVARYING            = 221
	PartiQLParserVIEW               = 222
	PartiQLParserWHEN               = 223
	PartiQLParserWHENEVER           = 224
	PartiQLParserWHERE              = 225
	PartiQLParserWITH               = 226
	PartiQLParserWORK               = 227
	PartiQLParserWRITE              = 228
	PartiQLParserZONE               = 229
	PartiQLParserLAG                = 230
	PartiQLParserLEAD               = 231
	PartiQLParserOVER               = 232
	PartiQLParserPARTITION          = 233
	PartiQLParserCAN_CAST           = 234
	PartiQLParserCAN_LOSSLESS_CAST  = 235
	PartiQLParserMISSING            = 236
	PartiQLParserPIVOT              = 237
	PartiQLParserUNPIVOT            = 238
	PartiQLParserLIMIT              = 239
	PartiQLParserOFFSET             = 240
	PartiQLParserREMOVE             = 241
	PartiQLParserINDEX              = 242
	PartiQLParserLET                = 243
	PartiQLParserCONFLICT           = 244
	PartiQLParserDO                 = 245
	PartiQLParserRETURNING          = 246
	PartiQLParserMODIFIED           = 247
	PartiQLParserNEW                = 248
	PartiQLParserOLD                = 249
	PartiQLParserNOTHING            = 250
	PartiQLParserTUPLE              = 251
	PartiQLParserINTEGER2           = 252
	PartiQLParserINT2               = 253
	PartiQLParserINTEGER4           = 254
	PartiQLParserINT4               = 255
	PartiQLParserINTEGER8           = 256
	PartiQLParserINT8               = 257
	PartiQLParserBIGINT             = 258
	PartiQLParserBOOL               = 259
	PartiQLParserBOOLEAN            = 260
	PartiQLParserSTRING             = 261
	PartiQLParserSYMBOL             = 262
	PartiQLParserCLOB               = 263
	PartiQLParserBLOB               = 264
	PartiQLParserSTRUCT             = 265
	PartiQLParserLIST               = 266
	PartiQLParserSEXP               = 267
	PartiQLParserBAG                = 268
	PartiQLParserCARET              = 269
	PartiQLParserCOMMA              = 270
	PartiQLParserPLUS               = 271
	PartiQLParserMINUS              = 272
	PartiQLParserSLASH_FORWARD      = 273
	PartiQLParserPERCENT            = 274
	PartiQLParserAT_SIGN            = 275
	PartiQLParserTILDE              = 276
	PartiQLParserASTERISK           = 277
	PartiQLParserVERTBAR            = 278
	PartiQLParserAMPERSAND          = 279
	PartiQLParserBANG               = 280
	PartiQLParserLT_EQ              = 281
	PartiQLParserGT_EQ              = 282
	PartiQLParserEQ                 = 283
	PartiQLParserNEQ                = 284
	PartiQLParserCONCAT             = 285
	PartiQLParserANGLE_LEFT         = 286
	PartiQLParserANGLE_RIGHT        = 287
	PartiQLParserANGLE_DOUBLE_LEFT  = 288
	PartiQLParserANGLE_DOUBLE_RIGHT = 289
	PartiQLParserBRACKET_LEFT       = 290
	PartiQLParserBRACKET_RIGHT      = 291
	PartiQLParserBRACE_LEFT         = 292
	PartiQLParserBRACE_RIGHT        = 293
	PartiQLParserPAREN_LEFT         = 294
	PartiQLParserPAREN_RIGHT        = 295
	PartiQLParserCOLON              = 296
	PartiQLParserCOLON_SEMI         = 297
	PartiQLParserQUESTION_MARK      = 298
	PartiQLParserPERIOD             = 299
	PartiQLParserLITERAL_STRING     = 300
	PartiQLParserLITERAL_INTEGER    = 301
	PartiQLParserLITERAL_DECIMAL    = 302
	PartiQLParserIDENTIFIER         = 303
	PartiQLParserIDENTIFIER_QUOTED  = 304
	PartiQLParserWS                 = 305
	PartiQLParserCOMMENT_SINGLE     = 306
	PartiQLParserCOMMENT_BLOCK      = 307
	PartiQLParserUNRECOGNIZED       = 308
	PartiQLParserION_CLOSURE        = 309
	PartiQLParserBACKTICK           = 310
)

// PartiQLParser rules.
const (
	PartiQLParserRULE_root                   = 0
	PartiQLParserRULE_statement              = 1
	PartiQLParserRULE_explainOption          = 2
	PartiQLParserRULE_asIdent                = 3
	PartiQLParserRULE_atIdent                = 4
	PartiQLParserRULE_byIdent                = 5
	PartiQLParserRULE_symbolPrimitive        = 6
	PartiQLParserRULE_dql                    = 7
	PartiQLParserRULE_execCommand            = 8
	PartiQLParserRULE_qualifiedName          = 9
	PartiQLParserRULE_tableName              = 10
	PartiQLParserRULE_tableConstraintName    = 11
	PartiQLParserRULE_columnName             = 12
	PartiQLParserRULE_columnConstraintName   = 13
	PartiQLParserRULE_ddl                    = 14
	PartiQLParserRULE_createCommand          = 15
	PartiQLParserRULE_dropCommand            = 16
	PartiQLParserRULE_tableDef               = 17
	PartiQLParserRULE_tableDefPart           = 18
	PartiQLParserRULE_columnConstraint       = 19
	PartiQLParserRULE_columnConstraintDef    = 20
	PartiQLParserRULE_dml                    = 21
	PartiQLParserRULE_dmlBaseCommand         = 22
	PartiQLParserRULE_pathSimple             = 23
	PartiQLParserRULE_pathSimpleSteps        = 24
	PartiQLParserRULE_replaceCommand         = 25
	PartiQLParserRULE_upsertCommand          = 26
	PartiQLParserRULE_removeCommand          = 27
	PartiQLParserRULE_insertCommandReturning = 28
	PartiQLParserRULE_insertStatement        = 29
	PartiQLParserRULE_onConflict             = 30
	PartiQLParserRULE_insertStatementLegacy  = 31
	PartiQLParserRULE_onConflictLegacy       = 32
	PartiQLParserRULE_conflictTarget         = 33
	PartiQLParserRULE_constraintName         = 34
	PartiQLParserRULE_conflictAction         = 35
	PartiQLParserRULE_doReplace              = 36
	PartiQLParserRULE_doUpdate               = 37
	PartiQLParserRULE_updateClause           = 38
	PartiQLParserRULE_setCommand             = 39
	PartiQLParserRULE_setAssignment          = 40
	PartiQLParserRULE_deleteCommand          = 41
	PartiQLParserRULE_returningClause        = 42
	PartiQLParserRULE_returningColumn        = 43
	PartiQLParserRULE_fromClauseSimple       = 44
	PartiQLParserRULE_whereClause            = 45
	PartiQLParserRULE_selectClause           = 46
	PartiQLParserRULE_projectionItems        = 47
	PartiQLParserRULE_projectionItem         = 48
	PartiQLParserRULE_setQuantifierStrategy  = 49
	PartiQLParserRULE_letClause              = 50
	PartiQLParserRULE_letBinding             = 51
	PartiQLParserRULE_orderByClause          = 52
	PartiQLParserRULE_orderSortSpec          = 53
	PartiQLParserRULE_groupClause            = 54
	PartiQLParserRULE_groupAlias             = 55
	PartiQLParserRULE_groupKey               = 56
	PartiQLParserRULE_over                   = 57
	PartiQLParserRULE_windowPartitionList    = 58
	PartiQLParserRULE_windowSortSpecList     = 59
	PartiQLParserRULE_havingClause           = 60
	PartiQLParserRULE_excludeClause          = 61
	PartiQLParserRULE_excludeExpr            = 62
	PartiQLParserRULE_excludeExprSteps       = 63
	PartiQLParserRULE_fromClause             = 64
	PartiQLParserRULE_whereClauseSelect      = 65
	PartiQLParserRULE_offsetByClause         = 66
	PartiQLParserRULE_limitClause            = 67
	PartiQLParserRULE_gpmlPattern            = 68
	PartiQLParserRULE_gpmlPatternList        = 69
	PartiQLParserRULE_matchPattern           = 70
	PartiQLParserRULE_graphPart              = 71
	PartiQLParserRULE_matchSelector          = 72
	PartiQLParserRULE_patternPathVariable    = 73
	PartiQLParserRULE_patternRestrictor      = 74
	PartiQLParserRULE_node                   = 75
	PartiQLParserRULE_edge                   = 76
	PartiQLParserRULE_pattern                = 77
	PartiQLParserRULE_patternQuantifier      = 78
	PartiQLParserRULE_edgeWSpec              = 79
	PartiQLParserRULE_edgeSpec               = 80
	PartiQLParserRULE_labelSpec              = 81
	PartiQLParserRULE_labelTerm              = 82
	PartiQLParserRULE_labelFactor            = 83
	PartiQLParserRULE_labelPrimary           = 84
	PartiQLParserRULE_edgeAbbrev             = 85
	PartiQLParserRULE_tableReference         = 86
	PartiQLParserRULE_tableNonJoin           = 87
	PartiQLParserRULE_tableBaseReference     = 88
	PartiQLParserRULE_tableUnpivot           = 89
	PartiQLParserRULE_joinRhs                = 90
	PartiQLParserRULE_joinSpec               = 91
	PartiQLParserRULE_joinType               = 92
	PartiQLParserRULE_expr                   = 93
	PartiQLParserRULE_exprBagOp              = 94
	PartiQLParserRULE_exprSelect             = 95
	PartiQLParserRULE_exprOr                 = 96
	PartiQLParserRULE_exprAnd                = 97
	PartiQLParserRULE_exprNot                = 98
	PartiQLParserRULE_exprPredicate          = 99
	PartiQLParserRULE_mathOp00               = 100
	PartiQLParserRULE_mathOp01               = 101
	PartiQLParserRULE_mathOp02               = 102
	PartiQLParserRULE_valueExpr              = 103
	PartiQLParserRULE_exprPrimary            = 104
	PartiQLParserRULE_exprTerm               = 105
	PartiQLParserRULE_nullIf                 = 106
	PartiQLParserRULE_coalesce               = 107
	PartiQLParserRULE_caseExpr               = 108
	PartiQLParserRULE_values                 = 109
	PartiQLParserRULE_valueRow               = 110
	PartiQLParserRULE_valueList              = 111
	PartiQLParserRULE_sequenceConstructor    = 112
	PartiQLParserRULE_substring              = 113
	PartiQLParserRULE_position               = 114
	PartiQLParserRULE_overlay                = 115
	PartiQLParserRULE_aggregate              = 116
	PartiQLParserRULE_windowFunction         = 117
	PartiQLParserRULE_cast                   = 118
	PartiQLParserRULE_canLosslessCast        = 119
	PartiQLParserRULE_canCast                = 120
	PartiQLParserRULE_extract                = 121
	PartiQLParserRULE_trimFunction           = 122
	PartiQLParserRULE_dateFunction           = 123
	PartiQLParserRULE_functionCall           = 124
	PartiQLParserRULE_functionName           = 125
	PartiQLParserRULE_pathStep               = 126
	PartiQLParserRULE_exprGraphMatchMany     = 127
	PartiQLParserRULE_exprGraphMatchOne      = 128
	PartiQLParserRULE_parameter              = 129
	PartiQLParserRULE_varRefExpr             = 130
	PartiQLParserRULE_nonReservedKeywords    = 131
	PartiQLParserRULE_collection             = 132
	PartiQLParserRULE_array                  = 133
	PartiQLParserRULE_bag                    = 134
	PartiQLParserRULE_tuple                  = 135
	PartiQLParserRULE_pair                   = 136
	PartiQLParserRULE_literal                = 137
	PartiQLParserRULE_type                   = 138
)

// IRootContext is an interface to support dynamic dispatch.
type IRootContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Statement() IStatementContext
	EOF() antlr.TerminalNode
	EXPLAIN() antlr.TerminalNode
	PAREN_LEFT() antlr.TerminalNode
	AllExplainOption() []IExplainOptionContext
	ExplainOption(i int) IExplainOptionContext
	PAREN_RIGHT() antlr.TerminalNode
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsRootContext differentiates from other interfaces.
	IsRootContext()
}

type RootContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRootContext() *RootContext {
	var p = new(RootContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_root
	return p
}

func InitEmptyRootContext(p *RootContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_root
}

func (*RootContext) IsRootContext() {}

func NewRootContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RootContext {
	var p = new(RootContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_root

	return p
}

func (s *RootContext) GetParser() antlr.Parser { return s.parser }

func (s *RootContext) Statement() IStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *RootContext) EOF() antlr.TerminalNode {
	return s.GetToken(PartiQLParserEOF, 0)
}

func (s *RootContext) EXPLAIN() antlr.TerminalNode {
	return s.GetToken(PartiQLParserEXPLAIN, 0)
}

func (s *RootContext) PAREN_LEFT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserPAREN_LEFT, 0)
}

func (s *RootContext) AllExplainOption() []IExplainOptionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExplainOptionContext); ok {
			len++
		}
	}

	tst := make([]IExplainOptionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExplainOptionContext); ok {
			tst[i] = t.(IExplainOptionContext)
			i++
		}
	}

	return tst
}

func (s *RootContext) ExplainOption(i int) IExplainOptionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExplainOptionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExplainOptionContext)
}

func (s *RootContext) PAREN_RIGHT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserPAREN_RIGHT, 0)
}

func (s *RootContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PartiQLParserCOMMA)
}

func (s *RootContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PartiQLParserCOMMA, i)
}

func (s *RootContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RootContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RootContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterRoot(s)
	}
}

func (s *RootContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitRoot(s)
	}
}

func (p *PartiQLParser) Root() (localctx IRootContext) {
	localctx = NewRootContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 0, PartiQLParserRULE_root)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(292)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == PartiQLParserEXPLAIN {
		{
			p.SetState(278)
			p.Match(PartiQLParserEXPLAIN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(290)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 1, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(279)
				p.Match(PartiQLParserPAREN_LEFT)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(280)
				p.ExplainOption()
			}
			p.SetState(285)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			for _la == PartiQLParserCOMMA {
				{
					p.SetState(281)
					p.Match(PartiQLParserCOMMA)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(282)
					p.ExplainOption()
				}

				p.SetState(287)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(288)
				p.Match(PartiQLParserPAREN_RIGHT)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	}
	{
		p.SetState(294)
		p.Statement()
	}
	{
		p.SetState(295)
		p.Match(PartiQLParserEOF)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IStatementContext is an interface to support dynamic dispatch.
type IStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsStatementContext differentiates from other interfaces.
	IsStatementContext()
}

type StatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStatementContext() *StatementContext {
	var p = new(StatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_statement
	return p
}

func InitEmptyStatementContext(p *StatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_statement
}

func (*StatementContext) IsStatementContext() {}

func NewStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StatementContext {
	var p = new(StatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_statement

	return p
}

func (s *StatementContext) GetParser() antlr.Parser { return s.parser }

func (s *StatementContext) CopyAll(ctx *StatementContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *StatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type QueryExecContext struct {
	StatementContext
}

func NewQueryExecContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *QueryExecContext {
	var p = new(QueryExecContext)

	InitEmptyStatementContext(&p.StatementContext)
	p.parser = parser
	p.CopyAll(ctx.(*StatementContext))

	return p
}

func (s *QueryExecContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *QueryExecContext) ExecCommand() IExecCommandContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExecCommandContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExecCommandContext)
}

func (s *QueryExecContext) COLON_SEMI() antlr.TerminalNode {
	return s.GetToken(PartiQLParserCOLON_SEMI, 0)
}

func (s *QueryExecContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterQueryExec(s)
	}
}

func (s *QueryExecContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitQueryExec(s)
	}
}

type QueryDdlContext struct {
	StatementContext
}

func NewQueryDdlContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *QueryDdlContext {
	var p = new(QueryDdlContext)

	InitEmptyStatementContext(&p.StatementContext)
	p.parser = parser
	p.CopyAll(ctx.(*StatementContext))

	return p
}

func (s *QueryDdlContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *QueryDdlContext) Ddl() IDdlContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDdlContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDdlContext)
}

func (s *QueryDdlContext) COLON_SEMI() antlr.TerminalNode {
	return s.GetToken(PartiQLParserCOLON_SEMI, 0)
}

func (s *QueryDdlContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterQueryDdl(s)
	}
}

func (s *QueryDdlContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitQueryDdl(s)
	}
}

type QueryDqlContext struct {
	StatementContext
}

func NewQueryDqlContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *QueryDqlContext {
	var p = new(QueryDqlContext)

	InitEmptyStatementContext(&p.StatementContext)
	p.parser = parser
	p.CopyAll(ctx.(*StatementContext))

	return p
}

func (s *QueryDqlContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *QueryDqlContext) Dql() IDqlContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDqlContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDqlContext)
}

func (s *QueryDqlContext) COLON_SEMI() antlr.TerminalNode {
	return s.GetToken(PartiQLParserCOLON_SEMI, 0)
}

func (s *QueryDqlContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterQueryDql(s)
	}
}

func (s *QueryDqlContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitQueryDql(s)
	}
}

type QueryDmlContext struct {
	StatementContext
}

func NewQueryDmlContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *QueryDmlContext {
	var p = new(QueryDmlContext)

	InitEmptyStatementContext(&p.StatementContext)
	p.parser = parser
	p.CopyAll(ctx.(*StatementContext))

	return p
}

func (s *QueryDmlContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *QueryDmlContext) Dml() IDmlContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDmlContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDmlContext)
}

func (s *QueryDmlContext) COLON_SEMI() antlr.TerminalNode {
	return s.GetToken(PartiQLParserCOLON_SEMI, 0)
}

func (s *QueryDmlContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterQueryDml(s)
	}
}

func (s *QueryDmlContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitQueryDml(s)
	}
}

func (p *PartiQLParser) Statement() (localctx IStatementContext) {
	localctx = NewStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 2, PartiQLParserRULE_statement)
	var _la int

	p.SetState(313)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case PartiQLParserANY, PartiQLParserAVG, PartiQLParserBIT_LENGTH, PartiQLParserCASE, PartiQLParserCAST, PartiQLParserCHARACTER_LENGTH, PartiQLParserCHAR_LENGTH, PartiQLParserCOALESCE, PartiQLParserCOUNT, PartiQLParserCURRENT_DATE, PartiQLParserCURRENT_USER, PartiQLParserDATE, PartiQLParserEVERY, PartiQLParserEXCLUDED, PartiQLParserEXISTS, PartiQLParserEXTRACT, PartiQLParserDATE_ADD, PartiQLParserDATE_DIFF, PartiQLParserFALSE, PartiQLParserLOWER, PartiQLParserMAX, PartiQLParserMIN, PartiQLParserNOT, PartiQLParserNULL, PartiQLParserNULLIF, PartiQLParserOCTET_LENGTH, PartiQLParserOVERLAY, PartiQLParserPOSITION, PartiQLParserSELECT, PartiQLParserSIZE, PartiQLParserSOME, PartiQLParserSUBSTRING, PartiQLParserSUM, PartiQLParserTIME, PartiQLParserTIMESTAMP, PartiQLParserTRIM, PartiQLParserTRUE, PartiQLParserUPPER, PartiQLParserVALUES, PartiQLParserLAG, PartiQLParserLEAD, PartiQLParserCAN_CAST, PartiQLParserCAN_LOSSLESS_CAST, PartiQLParserMISSING, PartiQLParserPIVOT, PartiQLParserLIST, PartiQLParserSEXP, PartiQLParserPLUS, PartiQLParserMINUS, PartiQLParserAT_SIGN, PartiQLParserANGLE_DOUBLE_LEFT, PartiQLParserBRACKET_LEFT, PartiQLParserBRACE_LEFT, PartiQLParserPAREN_LEFT, PartiQLParserQUESTION_MARK, PartiQLParserLITERAL_STRING, PartiQLParserLITERAL_INTEGER, PartiQLParserLITERAL_DECIMAL, PartiQLParserIDENTIFIER, PartiQLParserIDENTIFIER_QUOTED, PartiQLParserION_CLOSURE:
		localctx = NewQueryDqlContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(297)
			p.Dql()
		}
		p.SetState(299)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == PartiQLParserCOLON_SEMI {
			{
				p.SetState(298)
				p.Match(PartiQLParserCOLON_SEMI)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}

	case PartiQLParserDELETE, PartiQLParserFROM, PartiQLParserINSERT, PartiQLParserREPLACE, PartiQLParserSET, PartiQLParserUPDATE, PartiQLParserUPSERT, PartiQLParserREMOVE:
		localctx = NewQueryDmlContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(301)
			p.Dml()
		}
		p.SetState(303)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == PartiQLParserCOLON_SEMI {
			{
				p.SetState(302)
				p.Match(PartiQLParserCOLON_SEMI)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}

	case PartiQLParserCREATE, PartiQLParserDROP:
		localctx = NewQueryDdlContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(305)
			p.Ddl()
		}
		p.SetState(307)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == PartiQLParserCOLON_SEMI {
			{
				p.SetState(306)
				p.Match(PartiQLParserCOLON_SEMI)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}

	case PartiQLParserEXEC:
		localctx = NewQueryExecContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(309)
			p.ExecCommand()
		}
		p.SetState(311)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == PartiQLParserCOLON_SEMI {
			{
				p.SetState(310)
				p.Match(PartiQLParserCOLON_SEMI)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExplainOptionContext is an interface to support dynamic dispatch.
type IExplainOptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetParam returns the param token.
	GetParam() antlr.Token

	// GetValue returns the value token.
	GetValue() antlr.Token

	// SetParam sets the param token.
	SetParam(antlr.Token)

	// SetValue sets the value token.
	SetValue(antlr.Token)

	// Getter signatures
	AllIDENTIFIER() []antlr.TerminalNode
	IDENTIFIER(i int) antlr.TerminalNode

	// IsExplainOptionContext differentiates from other interfaces.
	IsExplainOptionContext()
}

type ExplainOptionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	param  antlr.Token
	value  antlr.Token
}

func NewEmptyExplainOptionContext() *ExplainOptionContext {
	var p = new(ExplainOptionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_explainOption
	return p
}

func InitEmptyExplainOptionContext(p *ExplainOptionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_explainOption
}

func (*ExplainOptionContext) IsExplainOptionContext() {}

func NewExplainOptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExplainOptionContext {
	var p = new(ExplainOptionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_explainOption

	return p
}

func (s *ExplainOptionContext) GetParser() antlr.Parser { return s.parser }

func (s *ExplainOptionContext) GetParam() antlr.Token { return s.param }

func (s *ExplainOptionContext) GetValue() antlr.Token { return s.value }

func (s *ExplainOptionContext) SetParam(v antlr.Token) { s.param = v }

func (s *ExplainOptionContext) SetValue(v antlr.Token) { s.value = v }

func (s *ExplainOptionContext) AllIDENTIFIER() []antlr.TerminalNode {
	return s.GetTokens(PartiQLParserIDENTIFIER)
}

func (s *ExplainOptionContext) IDENTIFIER(i int) antlr.TerminalNode {
	return s.GetToken(PartiQLParserIDENTIFIER, i)
}

func (s *ExplainOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExplainOptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExplainOptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterExplainOption(s)
	}
}

func (s *ExplainOptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitExplainOption(s)
	}
}

func (p *PartiQLParser) ExplainOption() (localctx IExplainOptionContext) {
	localctx = NewExplainOptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 4, PartiQLParserRULE_explainOption)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(315)

		var _m = p.Match(PartiQLParserIDENTIFIER)

		localctx.(*ExplainOptionContext).param = _m
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(316)

		var _m = p.Match(PartiQLParserIDENTIFIER)

		localctx.(*ExplainOptionContext).value = _m
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAsIdentContext is an interface to support dynamic dispatch.
type IAsIdentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AS() antlr.TerminalNode
	SymbolPrimitive() ISymbolPrimitiveContext

	// IsAsIdentContext differentiates from other interfaces.
	IsAsIdentContext()
}

type AsIdentContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAsIdentContext() *AsIdentContext {
	var p = new(AsIdentContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_asIdent
	return p
}

func InitEmptyAsIdentContext(p *AsIdentContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_asIdent
}

func (*AsIdentContext) IsAsIdentContext() {}

func NewAsIdentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AsIdentContext {
	var p = new(AsIdentContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_asIdent

	return p
}

func (s *AsIdentContext) GetParser() antlr.Parser { return s.parser }

func (s *AsIdentContext) AS() antlr.TerminalNode {
	return s.GetToken(PartiQLParserAS, 0)
}

func (s *AsIdentContext) SymbolPrimitive() ISymbolPrimitiveContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISymbolPrimitiveContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISymbolPrimitiveContext)
}

func (s *AsIdentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AsIdentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AsIdentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterAsIdent(s)
	}
}

func (s *AsIdentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitAsIdent(s)
	}
}

func (p *PartiQLParser) AsIdent() (localctx IAsIdentContext) {
	localctx = NewAsIdentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 6, PartiQLParserRULE_asIdent)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(318)
		p.Match(PartiQLParserAS)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(319)
		p.SymbolPrimitive()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAtIdentContext is an interface to support dynamic dispatch.
type IAtIdentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AT() antlr.TerminalNode
	SymbolPrimitive() ISymbolPrimitiveContext

	// IsAtIdentContext differentiates from other interfaces.
	IsAtIdentContext()
}

type AtIdentContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAtIdentContext() *AtIdentContext {
	var p = new(AtIdentContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_atIdent
	return p
}

func InitEmptyAtIdentContext(p *AtIdentContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_atIdent
}

func (*AtIdentContext) IsAtIdentContext() {}

func NewAtIdentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AtIdentContext {
	var p = new(AtIdentContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_atIdent

	return p
}

func (s *AtIdentContext) GetParser() antlr.Parser { return s.parser }

func (s *AtIdentContext) AT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserAT, 0)
}

func (s *AtIdentContext) SymbolPrimitive() ISymbolPrimitiveContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISymbolPrimitiveContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISymbolPrimitiveContext)
}

func (s *AtIdentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AtIdentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AtIdentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterAtIdent(s)
	}
}

func (s *AtIdentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitAtIdent(s)
	}
}

func (p *PartiQLParser) AtIdent() (localctx IAtIdentContext) {
	localctx = NewAtIdentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 8, PartiQLParserRULE_atIdent)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(321)
		p.Match(PartiQLParserAT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(322)
		p.SymbolPrimitive()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IByIdentContext is an interface to support dynamic dispatch.
type IByIdentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	BY() antlr.TerminalNode
	SymbolPrimitive() ISymbolPrimitiveContext

	// IsByIdentContext differentiates from other interfaces.
	IsByIdentContext()
}

type ByIdentContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyByIdentContext() *ByIdentContext {
	var p = new(ByIdentContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_byIdent
	return p
}

func InitEmptyByIdentContext(p *ByIdentContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_byIdent
}

func (*ByIdentContext) IsByIdentContext() {}

func NewByIdentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ByIdentContext {
	var p = new(ByIdentContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_byIdent

	return p
}

func (s *ByIdentContext) GetParser() antlr.Parser { return s.parser }

func (s *ByIdentContext) BY() antlr.TerminalNode {
	return s.GetToken(PartiQLParserBY, 0)
}

func (s *ByIdentContext) SymbolPrimitive() ISymbolPrimitiveContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISymbolPrimitiveContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISymbolPrimitiveContext)
}

func (s *ByIdentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ByIdentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ByIdentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterByIdent(s)
	}
}

func (s *ByIdentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitByIdent(s)
	}
}

func (p *PartiQLParser) ByIdent() (localctx IByIdentContext) {
	localctx = NewByIdentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 10, PartiQLParserRULE_byIdent)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(324)
		p.Match(PartiQLParserBY)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(325)
		p.SymbolPrimitive()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISymbolPrimitiveContext is an interface to support dynamic dispatch.
type ISymbolPrimitiveContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetIdent returns the ident token.
	GetIdent() antlr.Token

	// SetIdent sets the ident token.
	SetIdent(antlr.Token)

	// Getter signatures
	IDENTIFIER() antlr.TerminalNode
	IDENTIFIER_QUOTED() antlr.TerminalNode

	// IsSymbolPrimitiveContext differentiates from other interfaces.
	IsSymbolPrimitiveContext()
}

type SymbolPrimitiveContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	ident  antlr.Token
}

func NewEmptySymbolPrimitiveContext() *SymbolPrimitiveContext {
	var p = new(SymbolPrimitiveContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_symbolPrimitive
	return p
}

func InitEmptySymbolPrimitiveContext(p *SymbolPrimitiveContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_symbolPrimitive
}

func (*SymbolPrimitiveContext) IsSymbolPrimitiveContext() {}

func NewSymbolPrimitiveContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SymbolPrimitiveContext {
	var p = new(SymbolPrimitiveContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_symbolPrimitive

	return p
}

func (s *SymbolPrimitiveContext) GetParser() antlr.Parser { return s.parser }

func (s *SymbolPrimitiveContext) GetIdent() antlr.Token { return s.ident }

func (s *SymbolPrimitiveContext) SetIdent(v antlr.Token) { s.ident = v }

func (s *SymbolPrimitiveContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(PartiQLParserIDENTIFIER, 0)
}

func (s *SymbolPrimitiveContext) IDENTIFIER_QUOTED() antlr.TerminalNode {
	return s.GetToken(PartiQLParserIDENTIFIER_QUOTED, 0)
}

func (s *SymbolPrimitiveContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SymbolPrimitiveContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SymbolPrimitiveContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterSymbolPrimitive(s)
	}
}

func (s *SymbolPrimitiveContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitSymbolPrimitive(s)
	}
}

func (p *PartiQLParser) SymbolPrimitive() (localctx ISymbolPrimitiveContext) {
	localctx = NewSymbolPrimitiveContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 12, PartiQLParserRULE_symbolPrimitive)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(327)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*SymbolPrimitiveContext).ident = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == PartiQLParserIDENTIFIER || _la == PartiQLParserIDENTIFIER_QUOTED) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*SymbolPrimitiveContext).ident = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDqlContext is an interface to support dynamic dispatch.
type IDqlContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Expr() IExprContext

	// IsDqlContext differentiates from other interfaces.
	IsDqlContext()
}

type DqlContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDqlContext() *DqlContext {
	var p = new(DqlContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_dql
	return p
}

func InitEmptyDqlContext(p *DqlContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_dql
}

func (*DqlContext) IsDqlContext() {}

func NewDqlContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DqlContext {
	var p = new(DqlContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_dql

	return p
}

func (s *DqlContext) GetParser() antlr.Parser { return s.parser }

func (s *DqlContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *DqlContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DqlContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DqlContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterDql(s)
	}
}

func (s *DqlContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitDql(s)
	}
}

func (p *PartiQLParser) Dql() (localctx IDqlContext) {
	localctx = NewDqlContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 14, PartiQLParserRULE_dql)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(329)
		p.Expr()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExecCommandContext is an interface to support dynamic dispatch.
type IExecCommandContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IExprContext

	// Get_expr returns the _expr rule contexts.
	Get_expr() IExprContext

	// SetName sets the name rule contexts.
	SetName(IExprContext)

	// Set_expr sets the _expr rule contexts.
	Set_expr(IExprContext)

	// GetArgs returns the args rule context list.
	GetArgs() []IExprContext

	// SetArgs sets the args rule context list.
	SetArgs([]IExprContext)

	// Getter signatures
	EXEC() antlr.TerminalNode
	AllExpr() []IExprContext
	Expr(i int) IExprContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsExecCommandContext differentiates from other interfaces.
	IsExecCommandContext()
}

type ExecCommandContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	name   IExprContext
	_expr  IExprContext
	args   []IExprContext
}

func NewEmptyExecCommandContext() *ExecCommandContext {
	var p = new(ExecCommandContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_execCommand
	return p
}

func InitEmptyExecCommandContext(p *ExecCommandContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_execCommand
}

func (*ExecCommandContext) IsExecCommandContext() {}

func NewExecCommandContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExecCommandContext {
	var p = new(ExecCommandContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_execCommand

	return p
}

func (s *ExecCommandContext) GetParser() antlr.Parser { return s.parser }

func (s *ExecCommandContext) GetName() IExprContext { return s.name }

func (s *ExecCommandContext) Get_expr() IExprContext { return s._expr }

func (s *ExecCommandContext) SetName(v IExprContext) { s.name = v }

func (s *ExecCommandContext) Set_expr(v IExprContext) { s._expr = v }

func (s *ExecCommandContext) GetArgs() []IExprContext { return s.args }

func (s *ExecCommandContext) SetArgs(v []IExprContext) { s.args = v }

func (s *ExecCommandContext) EXEC() antlr.TerminalNode {
	return s.GetToken(PartiQLParserEXEC, 0)
}

func (s *ExecCommandContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *ExecCommandContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *ExecCommandContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PartiQLParserCOMMA)
}

func (s *ExecCommandContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PartiQLParserCOMMA, i)
}

func (s *ExecCommandContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExecCommandContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExecCommandContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterExecCommand(s)
	}
}

func (s *ExecCommandContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitExecCommand(s)
	}
}

func (p *PartiQLParser) ExecCommand() (localctx IExecCommandContext) {
	localctx = NewExecCommandContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 16, PartiQLParserRULE_execCommand)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(331)
		p.Match(PartiQLParserEXEC)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(332)

		var _x = p.Expr()

		localctx.(*ExecCommandContext).name = _x
	}
	p.SetState(341)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&11558071357178112) != 0) || ((int64((_la-75)) & ^0x3f) == 0 && ((int64(1)<<(_la-75))&234187180623281297) != 0) || ((int64((_la-140)) & ^0x3f) == 0 && ((int64(1)<<(_la-140))&7026323504187375659) != 0) || ((int64((_la-207)) & ^0x3f) == 0 && ((int64(1)<<(_la-207))&1729382258948706371) != 0) || ((int64((_la-271)) & ^0x3f) == 0 && ((int64(1)<<(_la-271))&291666264083) != 0) {
		{
			p.SetState(333)

			var _x = p.Expr()

			localctx.(*ExecCommandContext)._expr = _x
		}
		localctx.(*ExecCommandContext).args = append(localctx.(*ExecCommandContext).args, localctx.(*ExecCommandContext)._expr)
		p.SetState(338)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == PartiQLParserCOMMA {
			{
				p.SetState(334)
				p.Match(PartiQLParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(335)

				var _x = p.Expr()

				localctx.(*ExecCommandContext)._expr = _x
			}
			localctx.(*ExecCommandContext).args = append(localctx.(*ExecCommandContext).args, localctx.(*ExecCommandContext)._expr)

			p.SetState(340)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IQualifiedNameContext is an interface to support dynamic dispatch.
type IQualifiedNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_symbolPrimitive returns the _symbolPrimitive rule contexts.
	Get_symbolPrimitive() ISymbolPrimitiveContext

	// GetName returns the name rule contexts.
	GetName() ISymbolPrimitiveContext

	// Set_symbolPrimitive sets the _symbolPrimitive rule contexts.
	Set_symbolPrimitive(ISymbolPrimitiveContext)

	// SetName sets the name rule contexts.
	SetName(ISymbolPrimitiveContext)

	// GetQualifier returns the qualifier rule context list.
	GetQualifier() []ISymbolPrimitiveContext

	// SetQualifier sets the qualifier rule context list.
	SetQualifier([]ISymbolPrimitiveContext)

	// Getter signatures
	AllSymbolPrimitive() []ISymbolPrimitiveContext
	SymbolPrimitive(i int) ISymbolPrimitiveContext
	AllPERIOD() []antlr.TerminalNode
	PERIOD(i int) antlr.TerminalNode

	// IsQualifiedNameContext differentiates from other interfaces.
	IsQualifiedNameContext()
}

type QualifiedNameContext struct {
	antlr.BaseParserRuleContext
	parser           antlr.Parser
	_symbolPrimitive ISymbolPrimitiveContext
	qualifier        []ISymbolPrimitiveContext
	name             ISymbolPrimitiveContext
}

func NewEmptyQualifiedNameContext() *QualifiedNameContext {
	var p = new(QualifiedNameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_qualifiedName
	return p
}

func InitEmptyQualifiedNameContext(p *QualifiedNameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_qualifiedName
}

func (*QualifiedNameContext) IsQualifiedNameContext() {}

func NewQualifiedNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *QualifiedNameContext {
	var p = new(QualifiedNameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_qualifiedName

	return p
}

func (s *QualifiedNameContext) GetParser() antlr.Parser { return s.parser }

func (s *QualifiedNameContext) Get_symbolPrimitive() ISymbolPrimitiveContext {
	return s._symbolPrimitive
}

func (s *QualifiedNameContext) GetName() ISymbolPrimitiveContext { return s.name }

func (s *QualifiedNameContext) Set_symbolPrimitive(v ISymbolPrimitiveContext) { s._symbolPrimitive = v }

func (s *QualifiedNameContext) SetName(v ISymbolPrimitiveContext) { s.name = v }

func (s *QualifiedNameContext) GetQualifier() []ISymbolPrimitiveContext { return s.qualifier }

func (s *QualifiedNameContext) SetQualifier(v []ISymbolPrimitiveContext) { s.qualifier = v }

func (s *QualifiedNameContext) AllSymbolPrimitive() []ISymbolPrimitiveContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISymbolPrimitiveContext); ok {
			len++
		}
	}

	tst := make([]ISymbolPrimitiveContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISymbolPrimitiveContext); ok {
			tst[i] = t.(ISymbolPrimitiveContext)
			i++
		}
	}

	return tst
}

func (s *QualifiedNameContext) SymbolPrimitive(i int) ISymbolPrimitiveContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISymbolPrimitiveContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISymbolPrimitiveContext)
}

func (s *QualifiedNameContext) AllPERIOD() []antlr.TerminalNode {
	return s.GetTokens(PartiQLParserPERIOD)
}

func (s *QualifiedNameContext) PERIOD(i int) antlr.TerminalNode {
	return s.GetToken(PartiQLParserPERIOD, i)
}

func (s *QualifiedNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *QualifiedNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *QualifiedNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterQualifiedName(s)
	}
}

func (s *QualifiedNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitQualifiedName(s)
	}
}

func (p *PartiQLParser) QualifiedName() (localctx IQualifiedNameContext) {
	localctx = NewQualifiedNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 18, PartiQLParserRULE_qualifiedName)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(348)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 10, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(343)

				var _x = p.SymbolPrimitive()

				localctx.(*QualifiedNameContext)._symbolPrimitive = _x
			}
			localctx.(*QualifiedNameContext).qualifier = append(localctx.(*QualifiedNameContext).qualifier, localctx.(*QualifiedNameContext)._symbolPrimitive)
			{
				p.SetState(344)
				p.Match(PartiQLParserPERIOD)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(350)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 10, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	{
		p.SetState(351)

		var _x = p.SymbolPrimitive()

		localctx.(*QualifiedNameContext).name = _x
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITableNameContext is an interface to support dynamic dispatch.
type ITableNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SymbolPrimitive() ISymbolPrimitiveContext

	// IsTableNameContext differentiates from other interfaces.
	IsTableNameContext()
}

type TableNameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTableNameContext() *TableNameContext {
	var p = new(TableNameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_tableName
	return p
}

func InitEmptyTableNameContext(p *TableNameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_tableName
}

func (*TableNameContext) IsTableNameContext() {}

func NewTableNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TableNameContext {
	var p = new(TableNameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_tableName

	return p
}

func (s *TableNameContext) GetParser() antlr.Parser { return s.parser }

func (s *TableNameContext) SymbolPrimitive() ISymbolPrimitiveContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISymbolPrimitiveContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISymbolPrimitiveContext)
}

func (s *TableNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TableNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterTableName(s)
	}
}

func (s *TableNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitTableName(s)
	}
}

func (p *PartiQLParser) TableName() (localctx ITableNameContext) {
	localctx = NewTableNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 20, PartiQLParserRULE_tableName)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(353)
		p.SymbolPrimitive()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITableConstraintNameContext is an interface to support dynamic dispatch.
type ITableConstraintNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SymbolPrimitive() ISymbolPrimitiveContext

	// IsTableConstraintNameContext differentiates from other interfaces.
	IsTableConstraintNameContext()
}

type TableConstraintNameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTableConstraintNameContext() *TableConstraintNameContext {
	var p = new(TableConstraintNameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_tableConstraintName
	return p
}

func InitEmptyTableConstraintNameContext(p *TableConstraintNameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_tableConstraintName
}

func (*TableConstraintNameContext) IsTableConstraintNameContext() {}

func NewTableConstraintNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TableConstraintNameContext {
	var p = new(TableConstraintNameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_tableConstraintName

	return p
}

func (s *TableConstraintNameContext) GetParser() antlr.Parser { return s.parser }

func (s *TableConstraintNameContext) SymbolPrimitive() ISymbolPrimitiveContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISymbolPrimitiveContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISymbolPrimitiveContext)
}

func (s *TableConstraintNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableConstraintNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TableConstraintNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterTableConstraintName(s)
	}
}

func (s *TableConstraintNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitTableConstraintName(s)
	}
}

func (p *PartiQLParser) TableConstraintName() (localctx ITableConstraintNameContext) {
	localctx = NewTableConstraintNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 22, PartiQLParserRULE_tableConstraintName)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(355)
		p.SymbolPrimitive()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IColumnNameContext is an interface to support dynamic dispatch.
type IColumnNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SymbolPrimitive() ISymbolPrimitiveContext

	// IsColumnNameContext differentiates from other interfaces.
	IsColumnNameContext()
}

type ColumnNameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumnNameContext() *ColumnNameContext {
	var p = new(ColumnNameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_columnName
	return p
}

func InitEmptyColumnNameContext(p *ColumnNameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_columnName
}

func (*ColumnNameContext) IsColumnNameContext() {}

func NewColumnNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ColumnNameContext {
	var p = new(ColumnNameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_columnName

	return p
}

func (s *ColumnNameContext) GetParser() antlr.Parser { return s.parser }

func (s *ColumnNameContext) SymbolPrimitive() ISymbolPrimitiveContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISymbolPrimitiveContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISymbolPrimitiveContext)
}

func (s *ColumnNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ColumnNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterColumnName(s)
	}
}

func (s *ColumnNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitColumnName(s)
	}
}

func (p *PartiQLParser) ColumnName() (localctx IColumnNameContext) {
	localctx = NewColumnNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 24, PartiQLParserRULE_columnName)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(357)
		p.SymbolPrimitive()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IColumnConstraintNameContext is an interface to support dynamic dispatch.
type IColumnConstraintNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SymbolPrimitive() ISymbolPrimitiveContext

	// IsColumnConstraintNameContext differentiates from other interfaces.
	IsColumnConstraintNameContext()
}

type ColumnConstraintNameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumnConstraintNameContext() *ColumnConstraintNameContext {
	var p = new(ColumnConstraintNameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_columnConstraintName
	return p
}

func InitEmptyColumnConstraintNameContext(p *ColumnConstraintNameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_columnConstraintName
}

func (*ColumnConstraintNameContext) IsColumnConstraintNameContext() {}

func NewColumnConstraintNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ColumnConstraintNameContext {
	var p = new(ColumnConstraintNameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_columnConstraintName

	return p
}

func (s *ColumnConstraintNameContext) GetParser() antlr.Parser { return s.parser }

func (s *ColumnConstraintNameContext) SymbolPrimitive() ISymbolPrimitiveContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISymbolPrimitiveContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISymbolPrimitiveContext)
}

func (s *ColumnConstraintNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnConstraintNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ColumnConstraintNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterColumnConstraintName(s)
	}
}

func (s *ColumnConstraintNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitColumnConstraintName(s)
	}
}

func (p *PartiQLParser) ColumnConstraintName() (localctx IColumnConstraintNameContext) {
	localctx = NewColumnConstraintNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 26, PartiQLParserRULE_columnConstraintName)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(359)
		p.SymbolPrimitive()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDdlContext is an interface to support dynamic dispatch.
type IDdlContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CreateCommand() ICreateCommandContext
	DropCommand() IDropCommandContext

	// IsDdlContext differentiates from other interfaces.
	IsDdlContext()
}

type DdlContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDdlContext() *DdlContext {
	var p = new(DdlContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_ddl
	return p
}

func InitEmptyDdlContext(p *DdlContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_ddl
}

func (*DdlContext) IsDdlContext() {}

func NewDdlContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DdlContext {
	var p = new(DdlContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_ddl

	return p
}

func (s *DdlContext) GetParser() antlr.Parser { return s.parser }

func (s *DdlContext) CreateCommand() ICreateCommandContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICreateCommandContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICreateCommandContext)
}

func (s *DdlContext) DropCommand() IDropCommandContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDropCommandContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDropCommandContext)
}

func (s *DdlContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DdlContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DdlContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterDdl(s)
	}
}

func (s *DdlContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitDdl(s)
	}
}

func (p *PartiQLParser) Ddl() (localctx IDdlContext) {
	localctx = NewDdlContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 28, PartiQLParserRULE_ddl)
	p.SetState(363)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case PartiQLParserCREATE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(361)
			p.CreateCommand()
		}

	case PartiQLParserDROP:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(362)
			p.DropCommand()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICreateCommandContext is an interface to support dynamic dispatch.
type ICreateCommandContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsCreateCommandContext differentiates from other interfaces.
	IsCreateCommandContext()
}

type CreateCommandContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreateCommandContext() *CreateCommandContext {
	var p = new(CreateCommandContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_createCommand
	return p
}

func InitEmptyCreateCommandContext(p *CreateCommandContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_createCommand
}

func (*CreateCommandContext) IsCreateCommandContext() {}

func NewCreateCommandContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CreateCommandContext {
	var p = new(CreateCommandContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_createCommand

	return p
}

func (s *CreateCommandContext) GetParser() antlr.Parser { return s.parser }

func (s *CreateCommandContext) CopyAll(ctx *CreateCommandContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *CreateCommandContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreateCommandContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type CreateIndexContext struct {
	CreateCommandContext
}

func NewCreateIndexContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CreateIndexContext {
	var p = new(CreateIndexContext)

	InitEmptyCreateCommandContext(&p.CreateCommandContext)
	p.parser = parser
	p.CopyAll(ctx.(*CreateCommandContext))

	return p
}

func (s *CreateIndexContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreateIndexContext) CREATE() antlr.TerminalNode {
	return s.GetToken(PartiQLParserCREATE, 0)
}

func (s *CreateIndexContext) INDEX() antlr.TerminalNode {
	return s.GetToken(PartiQLParserINDEX, 0)
}

func (s *CreateIndexContext) ON() antlr.TerminalNode {
	return s.GetToken(PartiQLParserON, 0)
}

func (s *CreateIndexContext) SymbolPrimitive() ISymbolPrimitiveContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISymbolPrimitiveContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISymbolPrimitiveContext)
}

func (s *CreateIndexContext) PAREN_LEFT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserPAREN_LEFT, 0)
}

func (s *CreateIndexContext) AllPathSimple() []IPathSimpleContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IPathSimpleContext); ok {
			len++
		}
	}

	tst := make([]IPathSimpleContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IPathSimpleContext); ok {
			tst[i] = t.(IPathSimpleContext)
			i++
		}
	}

	return tst
}

func (s *CreateIndexContext) PathSimple(i int) IPathSimpleContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPathSimpleContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPathSimpleContext)
}

func (s *CreateIndexContext) PAREN_RIGHT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserPAREN_RIGHT, 0)
}

func (s *CreateIndexContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PartiQLParserCOMMA)
}

func (s *CreateIndexContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PartiQLParserCOMMA, i)
}

func (s *CreateIndexContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterCreateIndex(s)
	}
}

func (s *CreateIndexContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitCreateIndex(s)
	}
}

type CreateTableContext struct {
	CreateCommandContext
}

func NewCreateTableContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CreateTableContext {
	var p = new(CreateTableContext)

	InitEmptyCreateCommandContext(&p.CreateCommandContext)
	p.parser = parser
	p.CopyAll(ctx.(*CreateCommandContext))

	return p
}

func (s *CreateTableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreateTableContext) CREATE() antlr.TerminalNode {
	return s.GetToken(PartiQLParserCREATE, 0)
}

func (s *CreateTableContext) TABLE() antlr.TerminalNode {
	return s.GetToken(PartiQLParserTABLE, 0)
}

func (s *CreateTableContext) QualifiedName() IQualifiedNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQualifiedNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQualifiedNameContext)
}

func (s *CreateTableContext) PAREN_LEFT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserPAREN_LEFT, 0)
}

func (s *CreateTableContext) TableDef() ITableDefContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITableDefContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITableDefContext)
}

func (s *CreateTableContext) PAREN_RIGHT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserPAREN_RIGHT, 0)
}

func (s *CreateTableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterCreateTable(s)
	}
}

func (s *CreateTableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitCreateTable(s)
	}
}

func (p *PartiQLParser) CreateCommand() (localctx ICreateCommandContext) {
	localctx = NewCreateCommandContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 30, PartiQLParserRULE_createCommand)
	var _la int

	p.SetState(389)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 14, p.GetParserRuleContext()) {
	case 1:
		localctx = NewCreateTableContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(365)
			p.Match(PartiQLParserCREATE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(366)
			p.Match(PartiQLParserTABLE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(367)
			p.QualifiedName()
		}
		p.SetState(372)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == PartiQLParserPAREN_LEFT {
			{
				p.SetState(368)
				p.Match(PartiQLParserPAREN_LEFT)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(369)
				p.TableDef()
			}
			{
				p.SetState(370)
				p.Match(PartiQLParserPAREN_RIGHT)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}

	case 2:
		localctx = NewCreateIndexContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(374)
			p.Match(PartiQLParserCREATE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(375)
			p.Match(PartiQLParserINDEX)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(376)
			p.Match(PartiQLParserON)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(377)
			p.SymbolPrimitive()
		}
		{
			p.SetState(378)
			p.Match(PartiQLParserPAREN_LEFT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(379)
			p.PathSimple()
		}
		p.SetState(384)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == PartiQLParserCOMMA {
			{
				p.SetState(380)
				p.Match(PartiQLParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(381)
				p.PathSimple()
			}

			p.SetState(386)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(387)
			p.Match(PartiQLParserPAREN_RIGHT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDropCommandContext is an interface to support dynamic dispatch.
type IDropCommandContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsDropCommandContext differentiates from other interfaces.
	IsDropCommandContext()
}

type DropCommandContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDropCommandContext() *DropCommandContext {
	var p = new(DropCommandContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_dropCommand
	return p
}

func InitEmptyDropCommandContext(p *DropCommandContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_dropCommand
}

func (*DropCommandContext) IsDropCommandContext() {}

func NewDropCommandContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DropCommandContext {
	var p = new(DropCommandContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_dropCommand

	return p
}

func (s *DropCommandContext) GetParser() antlr.Parser { return s.parser }

func (s *DropCommandContext) CopyAll(ctx *DropCommandContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *DropCommandContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DropCommandContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type DropTableContext struct {
	DropCommandContext
}

func NewDropTableContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *DropTableContext {
	var p = new(DropTableContext)

	InitEmptyDropCommandContext(&p.DropCommandContext)
	p.parser = parser
	p.CopyAll(ctx.(*DropCommandContext))

	return p
}

func (s *DropTableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DropTableContext) DROP() antlr.TerminalNode {
	return s.GetToken(PartiQLParserDROP, 0)
}

func (s *DropTableContext) TABLE() antlr.TerminalNode {
	return s.GetToken(PartiQLParserTABLE, 0)
}

func (s *DropTableContext) QualifiedName() IQualifiedNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQualifiedNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQualifiedNameContext)
}

func (s *DropTableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterDropTable(s)
	}
}

func (s *DropTableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitDropTable(s)
	}
}

type DropIndexContext struct {
	DropCommandContext
	target ISymbolPrimitiveContext
	on     ISymbolPrimitiveContext
}

func NewDropIndexContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *DropIndexContext {
	var p = new(DropIndexContext)

	InitEmptyDropCommandContext(&p.DropCommandContext)
	p.parser = parser
	p.CopyAll(ctx.(*DropCommandContext))

	return p
}

func (s *DropIndexContext) GetTarget() ISymbolPrimitiveContext { return s.target }

func (s *DropIndexContext) GetOn() ISymbolPrimitiveContext { return s.on }

func (s *DropIndexContext) SetTarget(v ISymbolPrimitiveContext) { s.target = v }

func (s *DropIndexContext) SetOn(v ISymbolPrimitiveContext) { s.on = v }

func (s *DropIndexContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DropIndexContext) DROP() antlr.TerminalNode {
	return s.GetToken(PartiQLParserDROP, 0)
}

func (s *DropIndexContext) INDEX() antlr.TerminalNode {
	return s.GetToken(PartiQLParserINDEX, 0)
}

func (s *DropIndexContext) ON() antlr.TerminalNode {
	return s.GetToken(PartiQLParserON, 0)
}

func (s *DropIndexContext) AllSymbolPrimitive() []ISymbolPrimitiveContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISymbolPrimitiveContext); ok {
			len++
		}
	}

	tst := make([]ISymbolPrimitiveContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISymbolPrimitiveContext); ok {
			tst[i] = t.(ISymbolPrimitiveContext)
			i++
		}
	}

	return tst
}

func (s *DropIndexContext) SymbolPrimitive(i int) ISymbolPrimitiveContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISymbolPrimitiveContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISymbolPrimitiveContext)
}

func (s *DropIndexContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterDropIndex(s)
	}
}

func (s *DropIndexContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitDropIndex(s)
	}
}

func (p *PartiQLParser) DropCommand() (localctx IDropCommandContext) {
	localctx = NewDropCommandContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 32, PartiQLParserRULE_dropCommand)
	p.SetState(400)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 15, p.GetParserRuleContext()) {
	case 1:
		localctx = NewDropTableContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(391)
			p.Match(PartiQLParserDROP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(392)
			p.Match(PartiQLParserTABLE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(393)
			p.QualifiedName()
		}

	case 2:
		localctx = NewDropIndexContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(394)
			p.Match(PartiQLParserDROP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(395)
			p.Match(PartiQLParserINDEX)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(396)

			var _x = p.SymbolPrimitive()

			localctx.(*DropIndexContext).target = _x
		}
		{
			p.SetState(397)
			p.Match(PartiQLParserON)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(398)

			var _x = p.SymbolPrimitive()

			localctx.(*DropIndexContext).on = _x
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITableDefContext is an interface to support dynamic dispatch.
type ITableDefContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllTableDefPart() []ITableDefPartContext
	TableDefPart(i int) ITableDefPartContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsTableDefContext differentiates from other interfaces.
	IsTableDefContext()
}

type TableDefContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTableDefContext() *TableDefContext {
	var p = new(TableDefContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_tableDef
	return p
}

func InitEmptyTableDefContext(p *TableDefContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_tableDef
}

func (*TableDefContext) IsTableDefContext() {}

func NewTableDefContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TableDefContext {
	var p = new(TableDefContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_tableDef

	return p
}

func (s *TableDefContext) GetParser() antlr.Parser { return s.parser }

func (s *TableDefContext) AllTableDefPart() []ITableDefPartContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITableDefPartContext); ok {
			len++
		}
	}

	tst := make([]ITableDefPartContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITableDefPartContext); ok {
			tst[i] = t.(ITableDefPartContext)
			i++
		}
	}

	return tst
}

func (s *TableDefContext) TableDefPart(i int) ITableDefPartContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITableDefPartContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITableDefPartContext)
}

func (s *TableDefContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PartiQLParserCOMMA)
}

func (s *TableDefContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PartiQLParserCOMMA, i)
}

func (s *TableDefContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableDefContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TableDefContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterTableDef(s)
	}
}

func (s *TableDefContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitTableDef(s)
	}
}

func (p *PartiQLParser) TableDef() (localctx ITableDefContext) {
	localctx = NewTableDefContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 34, PartiQLParserRULE_tableDef)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(402)
		p.TableDefPart()
	}
	p.SetState(407)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == PartiQLParserCOMMA {
		{
			p.SetState(403)
			p.Match(PartiQLParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(404)
			p.TableDefPart()
		}

		p.SetState(409)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITableDefPartContext is an interface to support dynamic dispatch.
type ITableDefPartContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsTableDefPartContext differentiates from other interfaces.
	IsTableDefPartContext()
}

type TableDefPartContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTableDefPartContext() *TableDefPartContext {
	var p = new(TableDefPartContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_tableDefPart
	return p
}

func InitEmptyTableDefPartContext(p *TableDefPartContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_tableDefPart
}

func (*TableDefPartContext) IsTableDefPartContext() {}

func NewTableDefPartContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TableDefPartContext {
	var p = new(TableDefPartContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_tableDefPart

	return p
}

func (s *TableDefPartContext) GetParser() antlr.Parser { return s.parser }

func (s *TableDefPartContext) CopyAll(ctx *TableDefPartContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *TableDefPartContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableDefPartContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type ColumnDeclarationContext struct {
	TableDefPartContext
}

func NewColumnDeclarationContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColumnDeclarationContext {
	var p = new(ColumnDeclarationContext)

	InitEmptyTableDefPartContext(&p.TableDefPartContext)
	p.parser = parser
	p.CopyAll(ctx.(*TableDefPartContext))

	return p
}

func (s *ColumnDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnDeclarationContext) ColumnName() IColumnNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnNameContext)
}

func (s *ColumnDeclarationContext) Type_() ITypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeContext)
}

func (s *ColumnDeclarationContext) AllColumnConstraint() []IColumnConstraintContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumnConstraintContext); ok {
			len++
		}
	}

	tst := make([]IColumnConstraintContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumnConstraintContext); ok {
			tst[i] = t.(IColumnConstraintContext)
			i++
		}
	}

	return tst
}

func (s *ColumnDeclarationContext) ColumnConstraint(i int) IColumnConstraintContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnConstraintContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnConstraintContext)
}

func (s *ColumnDeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterColumnDeclaration(s)
	}
}

func (s *ColumnDeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitColumnDeclaration(s)
	}
}

func (p *PartiQLParser) TableDefPart() (localctx ITableDefPartContext) {
	localctx = NewTableDefPartContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 36, PartiQLParserRULE_tableDefPart)
	var _la int

	localctx = NewColumnDeclarationContext(p, localctx)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(410)
		p.ColumnName()
	}
	{
		p.SetState(411)
		p.Type_()
	}
	p.SetState(415)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == PartiQLParserCONSTRAINT || _la == PartiQLParserNOT || _la == PartiQLParserNULL {
		{
			p.SetState(412)
			p.ColumnConstraint()
		}

		p.SetState(417)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IColumnConstraintContext is an interface to support dynamic dispatch.
type IColumnConstraintContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ColumnConstraintDef() IColumnConstraintDefContext
	CONSTRAINT() antlr.TerminalNode
	ColumnConstraintName() IColumnConstraintNameContext

	// IsColumnConstraintContext differentiates from other interfaces.
	IsColumnConstraintContext()
}

type ColumnConstraintContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumnConstraintContext() *ColumnConstraintContext {
	var p = new(ColumnConstraintContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_columnConstraint
	return p
}

func InitEmptyColumnConstraintContext(p *ColumnConstraintContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_columnConstraint
}

func (*ColumnConstraintContext) IsColumnConstraintContext() {}

func NewColumnConstraintContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ColumnConstraintContext {
	var p = new(ColumnConstraintContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_columnConstraint

	return p
}

func (s *ColumnConstraintContext) GetParser() antlr.Parser { return s.parser }

func (s *ColumnConstraintContext) ColumnConstraintDef() IColumnConstraintDefContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnConstraintDefContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnConstraintDefContext)
}

func (s *ColumnConstraintContext) CONSTRAINT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserCONSTRAINT, 0)
}

func (s *ColumnConstraintContext) ColumnConstraintName() IColumnConstraintNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumnConstraintNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumnConstraintNameContext)
}

func (s *ColumnConstraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnConstraintContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ColumnConstraintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterColumnConstraint(s)
	}
}

func (s *ColumnConstraintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitColumnConstraint(s)
	}
}

func (p *PartiQLParser) ColumnConstraint() (localctx IColumnConstraintContext) {
	localctx = NewColumnConstraintContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 38, PartiQLParserRULE_columnConstraint)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(420)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == PartiQLParserCONSTRAINT {
		{
			p.SetState(418)
			p.Match(PartiQLParserCONSTRAINT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(419)
			p.ColumnConstraintName()
		}

	}
	{
		p.SetState(422)
		p.ColumnConstraintDef()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IColumnConstraintDefContext is an interface to support dynamic dispatch.
type IColumnConstraintDefContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsColumnConstraintDefContext differentiates from other interfaces.
	IsColumnConstraintDefContext()
}

type ColumnConstraintDefContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumnConstraintDefContext() *ColumnConstraintDefContext {
	var p = new(ColumnConstraintDefContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_columnConstraintDef
	return p
}

func InitEmptyColumnConstraintDefContext(p *ColumnConstraintDefContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_columnConstraintDef
}

func (*ColumnConstraintDefContext) IsColumnConstraintDefContext() {}

func NewColumnConstraintDefContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ColumnConstraintDefContext {
	var p = new(ColumnConstraintDefContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_columnConstraintDef

	return p
}

func (s *ColumnConstraintDefContext) GetParser() antlr.Parser { return s.parser }

func (s *ColumnConstraintDefContext) CopyAll(ctx *ColumnConstraintDefContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *ColumnConstraintDefContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnConstraintDefContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type ColConstrNullContext struct {
	ColumnConstraintDefContext
}

func NewColConstrNullContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColConstrNullContext {
	var p = new(ColConstrNullContext)

	InitEmptyColumnConstraintDefContext(&p.ColumnConstraintDefContext)
	p.parser = parser
	p.CopyAll(ctx.(*ColumnConstraintDefContext))

	return p
}

func (s *ColConstrNullContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColConstrNullContext) NULL() antlr.TerminalNode {
	return s.GetToken(PartiQLParserNULL, 0)
}

func (s *ColConstrNullContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterColConstrNull(s)
	}
}

func (s *ColConstrNullContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitColConstrNull(s)
	}
}

type ColConstrNotNullContext struct {
	ColumnConstraintDefContext
}

func NewColConstrNotNullContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColConstrNotNullContext {
	var p = new(ColConstrNotNullContext)

	InitEmptyColumnConstraintDefContext(&p.ColumnConstraintDefContext)
	p.parser = parser
	p.CopyAll(ctx.(*ColumnConstraintDefContext))

	return p
}

func (s *ColConstrNotNullContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColConstrNotNullContext) NOT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserNOT, 0)
}

func (s *ColConstrNotNullContext) NULL() antlr.TerminalNode {
	return s.GetToken(PartiQLParserNULL, 0)
}

func (s *ColConstrNotNullContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterColConstrNotNull(s)
	}
}

func (s *ColConstrNotNullContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitColConstrNotNull(s)
	}
}

func (p *PartiQLParser) ColumnConstraintDef() (localctx IColumnConstraintDefContext) {
	localctx = NewColumnConstraintDefContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 40, PartiQLParserRULE_columnConstraintDef)
	p.SetState(427)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case PartiQLParserNOT:
		localctx = NewColConstrNotNullContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(424)
			p.Match(PartiQLParserNOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(425)
			p.Match(PartiQLParserNULL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case PartiQLParserNULL:
		localctx = NewColConstrNullContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(426)
			p.Match(PartiQLParserNULL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDmlContext is an interface to support dynamic dispatch.
type IDmlContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsDmlContext differentiates from other interfaces.
	IsDmlContext()
}

type DmlContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDmlContext() *DmlContext {
	var p = new(DmlContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_dml
	return p
}

func InitEmptyDmlContext(p *DmlContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_dml
}

func (*DmlContext) IsDmlContext() {}

func NewDmlContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DmlContext {
	var p = new(DmlContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_dml

	return p
}

func (s *DmlContext) GetParser() antlr.Parser { return s.parser }

func (s *DmlContext) CopyAll(ctx *DmlContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *DmlContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DmlContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type DmlDeleteContext struct {
	DmlContext
}

func NewDmlDeleteContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *DmlDeleteContext {
	var p = new(DmlDeleteContext)

	InitEmptyDmlContext(&p.DmlContext)
	p.parser = parser
	p.CopyAll(ctx.(*DmlContext))

	return p
}

func (s *DmlDeleteContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DmlDeleteContext) DeleteCommand() IDeleteCommandContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDeleteCommandContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDeleteCommandContext)
}

func (s *DmlDeleteContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterDmlDelete(s)
	}
}

func (s *DmlDeleteContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitDmlDelete(s)
	}
}

type DmlInsertReturningContext struct {
	DmlContext
}

func NewDmlInsertReturningContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *DmlInsertReturningContext {
	var p = new(DmlInsertReturningContext)

	InitEmptyDmlContext(&p.DmlContext)
	p.parser = parser
	p.CopyAll(ctx.(*DmlContext))

	return p
}

func (s *DmlInsertReturningContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DmlInsertReturningContext) InsertCommandReturning() IInsertCommandReturningContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInsertCommandReturningContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInsertCommandReturningContext)
}

func (s *DmlInsertReturningContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterDmlInsertReturning(s)
	}
}

func (s *DmlInsertReturningContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitDmlInsertReturning(s)
	}
}

type DmlBaseWrapperContext struct {
	DmlContext
}

func NewDmlBaseWrapperContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *DmlBaseWrapperContext {
	var p = new(DmlBaseWrapperContext)

	InitEmptyDmlContext(&p.DmlContext)
	p.parser = parser
	p.CopyAll(ctx.(*DmlContext))

	return p
}

func (s *DmlBaseWrapperContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DmlBaseWrapperContext) UpdateClause() IUpdateClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUpdateClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUpdateClauseContext)
}

func (s *DmlBaseWrapperContext) AllDmlBaseCommand() []IDmlBaseCommandContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IDmlBaseCommandContext); ok {
			len++
		}
	}

	tst := make([]IDmlBaseCommandContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IDmlBaseCommandContext); ok {
			tst[i] = t.(IDmlBaseCommandContext)
			i++
		}
	}

	return tst
}

func (s *DmlBaseWrapperContext) DmlBaseCommand(i int) IDmlBaseCommandContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDmlBaseCommandContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDmlBaseCommandContext)
}

func (s *DmlBaseWrapperContext) WhereClause() IWhereClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWhereClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWhereClauseContext)
}

func (s *DmlBaseWrapperContext) ReturningClause() IReturningClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IReturningClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IReturningClauseContext)
}

func (s *DmlBaseWrapperContext) FromClause() IFromClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFromClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFromClauseContext)
}

func (s *DmlBaseWrapperContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterDmlBaseWrapper(s)
	}
}

func (s *DmlBaseWrapperContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitDmlBaseWrapper(s)
	}
}

type DmlBaseContext struct {
	DmlContext
}

func NewDmlBaseContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *DmlBaseContext {
	var p = new(DmlBaseContext)

	InitEmptyDmlContext(&p.DmlContext)
	p.parser = parser
	p.CopyAll(ctx.(*DmlContext))

	return p
}

func (s *DmlBaseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DmlBaseContext) DmlBaseCommand() IDmlBaseCommandContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDmlBaseCommandContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDmlBaseCommandContext)
}

func (s *DmlBaseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterDmlBase(s)
	}
}

func (s *DmlBaseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitDmlBase(s)
	}
}

func (p *PartiQLParser) Dml() (localctx IDmlContext) {
	localctx = NewDmlContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 42, PartiQLParserRULE_dml)
	var _la int

	p.SetState(456)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 26, p.GetParserRuleContext()) {
	case 1:
		localctx = NewDmlBaseWrapperContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(429)
			p.UpdateClause()
		}
		p.SetState(431)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == PartiQLParserINSERT || _la == PartiQLParserREPLACE || ((int64((_la-185)) & ^0x3f) == 0 && ((int64(1)<<(_la-185))&72057594574798849) != 0) {
			{
				p.SetState(430)
				p.DmlBaseCommand()
			}

			p.SetState(433)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(436)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == PartiQLParserWHERE {
			{
				p.SetState(435)
				p.WhereClause()
			}

		}
		p.SetState(439)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == PartiQLParserRETURNING {
			{
				p.SetState(438)
				p.ReturningClause()
			}

		}

	case 2:
		localctx = NewDmlBaseWrapperContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(441)
			p.FromClause()
		}
		p.SetState(443)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == PartiQLParserWHERE {
			{
				p.SetState(442)
				p.WhereClause()
			}

		}
		p.SetState(446)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == PartiQLParserINSERT || _la == PartiQLParserREPLACE || ((int64((_la-185)) & ^0x3f) == 0 && ((int64(1)<<(_la-185))&72057594574798849) != 0) {
			{
				p.SetState(445)
				p.DmlBaseCommand()
			}

			p.SetState(448)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(451)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == PartiQLParserRETURNING {
			{
				p.SetState(450)
				p.ReturningClause()
			}

		}

	case 3:
		localctx = NewDmlDeleteContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(453)
			p.DeleteCommand()
		}

	case 4:
		localctx = NewDmlInsertReturningContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(454)
			p.InsertCommandReturning()
		}

	case 5:
		localctx = NewDmlBaseContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(455)
			p.DmlBaseCommand()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDmlBaseCommandContext is an interface to support dynamic dispatch.
type IDmlBaseCommandContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	InsertStatement() IInsertStatementContext
	InsertStatementLegacy() IInsertStatementLegacyContext
	SetCommand() ISetCommandContext
	ReplaceCommand() IReplaceCommandContext
	RemoveCommand() IRemoveCommandContext
	UpsertCommand() IUpsertCommandContext

	// IsDmlBaseCommandContext differentiates from other interfaces.
	IsDmlBaseCommandContext()
}

type DmlBaseCommandContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDmlBaseCommandContext() *DmlBaseCommandContext {
	var p = new(DmlBaseCommandContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_dmlBaseCommand
	return p
}

func InitEmptyDmlBaseCommandContext(p *DmlBaseCommandContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_dmlBaseCommand
}

func (*DmlBaseCommandContext) IsDmlBaseCommandContext() {}

func NewDmlBaseCommandContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DmlBaseCommandContext {
	var p = new(DmlBaseCommandContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_dmlBaseCommand

	return p
}

func (s *DmlBaseCommandContext) GetParser() antlr.Parser { return s.parser }

func (s *DmlBaseCommandContext) InsertStatement() IInsertStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInsertStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInsertStatementContext)
}

func (s *DmlBaseCommandContext) InsertStatementLegacy() IInsertStatementLegacyContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInsertStatementLegacyContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInsertStatementLegacyContext)
}

func (s *DmlBaseCommandContext) SetCommand() ISetCommandContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISetCommandContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISetCommandContext)
}

func (s *DmlBaseCommandContext) ReplaceCommand() IReplaceCommandContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IReplaceCommandContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IReplaceCommandContext)
}

func (s *DmlBaseCommandContext) RemoveCommand() IRemoveCommandContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRemoveCommandContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRemoveCommandContext)
}

func (s *DmlBaseCommandContext) UpsertCommand() IUpsertCommandContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUpsertCommandContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUpsertCommandContext)
}

func (s *DmlBaseCommandContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DmlBaseCommandContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DmlBaseCommandContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterDmlBaseCommand(s)
	}
}

func (s *DmlBaseCommandContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitDmlBaseCommand(s)
	}
}

func (p *PartiQLParser) DmlBaseCommand() (localctx IDmlBaseCommandContext) {
	localctx = NewDmlBaseCommandContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 44, PartiQLParserRULE_dmlBaseCommand)
	p.SetState(464)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 27, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(458)
			p.InsertStatement()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(459)
			p.InsertStatementLegacy()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(460)
			p.SetCommand()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(461)
			p.ReplaceCommand()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(462)
			p.RemoveCommand()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(463)
			p.UpsertCommand()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPathSimpleContext is an interface to support dynamic dispatch.
type IPathSimpleContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SymbolPrimitive() ISymbolPrimitiveContext
	AllPathSimpleSteps() []IPathSimpleStepsContext
	PathSimpleSteps(i int) IPathSimpleStepsContext

	// IsPathSimpleContext differentiates from other interfaces.
	IsPathSimpleContext()
}

type PathSimpleContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPathSimpleContext() *PathSimpleContext {
	var p = new(PathSimpleContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_pathSimple
	return p
}

func InitEmptyPathSimpleContext(p *PathSimpleContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_pathSimple
}

func (*PathSimpleContext) IsPathSimpleContext() {}

func NewPathSimpleContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PathSimpleContext {
	var p = new(PathSimpleContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_pathSimple

	return p
}

func (s *PathSimpleContext) GetParser() antlr.Parser { return s.parser }

func (s *PathSimpleContext) SymbolPrimitive() ISymbolPrimitiveContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISymbolPrimitiveContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISymbolPrimitiveContext)
}

func (s *PathSimpleContext) AllPathSimpleSteps() []IPathSimpleStepsContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IPathSimpleStepsContext); ok {
			len++
		}
	}

	tst := make([]IPathSimpleStepsContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IPathSimpleStepsContext); ok {
			tst[i] = t.(IPathSimpleStepsContext)
			i++
		}
	}

	return tst
}

func (s *PathSimpleContext) PathSimpleSteps(i int) IPathSimpleStepsContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPathSimpleStepsContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPathSimpleStepsContext)
}

func (s *PathSimpleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PathSimpleContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PathSimpleContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterPathSimple(s)
	}
}

func (s *PathSimpleContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitPathSimple(s)
	}
}

func (p *PartiQLParser) PathSimple() (localctx IPathSimpleContext) {
	localctx = NewPathSimpleContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 46, PartiQLParserRULE_pathSimple)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(466)
		p.SymbolPrimitive()
	}
	p.SetState(470)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == PartiQLParserBRACKET_LEFT || _la == PartiQLParserPERIOD {
		{
			p.SetState(467)
			p.PathSimpleSteps()
		}

		p.SetState(472)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPathSimpleStepsContext is an interface to support dynamic dispatch.
type IPathSimpleStepsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsPathSimpleStepsContext differentiates from other interfaces.
	IsPathSimpleStepsContext()
}

type PathSimpleStepsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPathSimpleStepsContext() *PathSimpleStepsContext {
	var p = new(PathSimpleStepsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_pathSimpleSteps
	return p
}

func InitEmptyPathSimpleStepsContext(p *PathSimpleStepsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_pathSimpleSteps
}

func (*PathSimpleStepsContext) IsPathSimpleStepsContext() {}

func NewPathSimpleStepsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PathSimpleStepsContext {
	var p = new(PathSimpleStepsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_pathSimpleSteps

	return p
}

func (s *PathSimpleStepsContext) GetParser() antlr.Parser { return s.parser }

func (s *PathSimpleStepsContext) CopyAll(ctx *PathSimpleStepsContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *PathSimpleStepsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PathSimpleStepsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type PathSimpleLiteralContext struct {
	PathSimpleStepsContext
	key ILiteralContext
}

func NewPathSimpleLiteralContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PathSimpleLiteralContext {
	var p = new(PathSimpleLiteralContext)

	InitEmptyPathSimpleStepsContext(&p.PathSimpleStepsContext)
	p.parser = parser
	p.CopyAll(ctx.(*PathSimpleStepsContext))

	return p
}

func (s *PathSimpleLiteralContext) GetKey() ILiteralContext { return s.key }

func (s *PathSimpleLiteralContext) SetKey(v ILiteralContext) { s.key = v }

func (s *PathSimpleLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PathSimpleLiteralContext) BRACKET_LEFT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserBRACKET_LEFT, 0)
}

func (s *PathSimpleLiteralContext) BRACKET_RIGHT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserBRACKET_RIGHT, 0)
}

func (s *PathSimpleLiteralContext) Literal() ILiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILiteralContext)
}

func (s *PathSimpleLiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterPathSimpleLiteral(s)
	}
}

func (s *PathSimpleLiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitPathSimpleLiteral(s)
	}
}

type PathSimpleDotSymbolContext struct {
	PathSimpleStepsContext
	key ISymbolPrimitiveContext
}

func NewPathSimpleDotSymbolContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PathSimpleDotSymbolContext {
	var p = new(PathSimpleDotSymbolContext)

	InitEmptyPathSimpleStepsContext(&p.PathSimpleStepsContext)
	p.parser = parser
	p.CopyAll(ctx.(*PathSimpleStepsContext))

	return p
}

func (s *PathSimpleDotSymbolContext) GetKey() ISymbolPrimitiveContext { return s.key }

func (s *PathSimpleDotSymbolContext) SetKey(v ISymbolPrimitiveContext) { s.key = v }

func (s *PathSimpleDotSymbolContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PathSimpleDotSymbolContext) PERIOD() antlr.TerminalNode {
	return s.GetToken(PartiQLParserPERIOD, 0)
}

func (s *PathSimpleDotSymbolContext) SymbolPrimitive() ISymbolPrimitiveContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISymbolPrimitiveContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISymbolPrimitiveContext)
}

func (s *PathSimpleDotSymbolContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterPathSimpleDotSymbol(s)
	}
}

func (s *PathSimpleDotSymbolContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitPathSimpleDotSymbol(s)
	}
}

type PathSimpleSymbolContext struct {
	PathSimpleStepsContext
	key ISymbolPrimitiveContext
}

func NewPathSimpleSymbolContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PathSimpleSymbolContext {
	var p = new(PathSimpleSymbolContext)

	InitEmptyPathSimpleStepsContext(&p.PathSimpleStepsContext)
	p.parser = parser
	p.CopyAll(ctx.(*PathSimpleStepsContext))

	return p
}

func (s *PathSimpleSymbolContext) GetKey() ISymbolPrimitiveContext { return s.key }

func (s *PathSimpleSymbolContext) SetKey(v ISymbolPrimitiveContext) { s.key = v }

func (s *PathSimpleSymbolContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PathSimpleSymbolContext) BRACKET_LEFT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserBRACKET_LEFT, 0)
}

func (s *PathSimpleSymbolContext) BRACKET_RIGHT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserBRACKET_RIGHT, 0)
}

func (s *PathSimpleSymbolContext) SymbolPrimitive() ISymbolPrimitiveContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISymbolPrimitiveContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISymbolPrimitiveContext)
}

func (s *PathSimpleSymbolContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterPathSimpleSymbol(s)
	}
}

func (s *PathSimpleSymbolContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitPathSimpleSymbol(s)
	}
}

func (p *PartiQLParser) PathSimpleSteps() (localctx IPathSimpleStepsContext) {
	localctx = NewPathSimpleStepsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 48, PartiQLParserRULE_pathSimpleSteps)
	p.SetState(483)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 29, p.GetParserRuleContext()) {
	case 1:
		localctx = NewPathSimpleLiteralContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(473)
			p.Match(PartiQLParserBRACKET_LEFT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(474)

			var _x = p.Literal()

			localctx.(*PathSimpleLiteralContext).key = _x
		}
		{
			p.SetState(475)
			p.Match(PartiQLParserBRACKET_RIGHT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		localctx = NewPathSimpleSymbolContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(477)
			p.Match(PartiQLParserBRACKET_LEFT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(478)

			var _x = p.SymbolPrimitive()

			localctx.(*PathSimpleSymbolContext).key = _x
		}
		{
			p.SetState(479)
			p.Match(PartiQLParserBRACKET_RIGHT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 3:
		localctx = NewPathSimpleDotSymbolContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(481)
			p.Match(PartiQLParserPERIOD)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(482)

			var _x = p.SymbolPrimitive()

			localctx.(*PathSimpleDotSymbolContext).key = _x
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IReplaceCommandContext is an interface to support dynamic dispatch.
type IReplaceCommandContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetValue returns the value rule contexts.
	GetValue() IExprContext

	// SetValue sets the value rule contexts.
	SetValue(IExprContext)

	// Getter signatures
	REPLACE() antlr.TerminalNode
	INTO() antlr.TerminalNode
	SymbolPrimitive() ISymbolPrimitiveContext
	Expr() IExprContext
	AsIdent() IAsIdentContext

	// IsReplaceCommandContext differentiates from other interfaces.
	IsReplaceCommandContext()
}

type ReplaceCommandContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	value  IExprContext
}

func NewEmptyReplaceCommandContext() *ReplaceCommandContext {
	var p = new(ReplaceCommandContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_replaceCommand
	return p
}

func InitEmptyReplaceCommandContext(p *ReplaceCommandContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_replaceCommand
}

func (*ReplaceCommandContext) IsReplaceCommandContext() {}

func NewReplaceCommandContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ReplaceCommandContext {
	var p = new(ReplaceCommandContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_replaceCommand

	return p
}

func (s *ReplaceCommandContext) GetParser() antlr.Parser { return s.parser }

func (s *ReplaceCommandContext) GetValue() IExprContext { return s.value }

func (s *ReplaceCommandContext) SetValue(v IExprContext) { s.value = v }

func (s *ReplaceCommandContext) REPLACE() antlr.TerminalNode {
	return s.GetToken(PartiQLParserREPLACE, 0)
}

func (s *ReplaceCommandContext) INTO() antlr.TerminalNode {
	return s.GetToken(PartiQLParserINTO, 0)
}

func (s *ReplaceCommandContext) SymbolPrimitive() ISymbolPrimitiveContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISymbolPrimitiveContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISymbolPrimitiveContext)
}

func (s *ReplaceCommandContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *ReplaceCommandContext) AsIdent() IAsIdentContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAsIdentContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAsIdentContext)
}

func (s *ReplaceCommandContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReplaceCommandContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ReplaceCommandContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterReplaceCommand(s)
	}
}

func (s *ReplaceCommandContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitReplaceCommand(s)
	}
}

func (p *PartiQLParser) ReplaceCommand() (localctx IReplaceCommandContext) {
	localctx = NewReplaceCommandContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 50, PartiQLParserRULE_replaceCommand)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(485)
		p.Match(PartiQLParserREPLACE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(486)
		p.Match(PartiQLParserINTO)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(487)
		p.SymbolPrimitive()
	}
	p.SetState(489)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == PartiQLParserAS {
		{
			p.SetState(488)
			p.AsIdent()
		}

	}
	{
		p.SetState(491)

		var _x = p.Expr()

		localctx.(*ReplaceCommandContext).value = _x
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUpsertCommandContext is an interface to support dynamic dispatch.
type IUpsertCommandContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetValue returns the value rule contexts.
	GetValue() IExprContext

	// SetValue sets the value rule contexts.
	SetValue(IExprContext)

	// Getter signatures
	UPSERT() antlr.TerminalNode
	INTO() antlr.TerminalNode
	SymbolPrimitive() ISymbolPrimitiveContext
	Expr() IExprContext
	AsIdent() IAsIdentContext

	// IsUpsertCommandContext differentiates from other interfaces.
	IsUpsertCommandContext()
}

type UpsertCommandContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	value  IExprContext
}

func NewEmptyUpsertCommandContext() *UpsertCommandContext {
	var p = new(UpsertCommandContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_upsertCommand
	return p
}

func InitEmptyUpsertCommandContext(p *UpsertCommandContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_upsertCommand
}

func (*UpsertCommandContext) IsUpsertCommandContext() {}

func NewUpsertCommandContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UpsertCommandContext {
	var p = new(UpsertCommandContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_upsertCommand

	return p
}

func (s *UpsertCommandContext) GetParser() antlr.Parser { return s.parser }

func (s *UpsertCommandContext) GetValue() IExprContext { return s.value }

func (s *UpsertCommandContext) SetValue(v IExprContext) { s.value = v }

func (s *UpsertCommandContext) UPSERT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserUPSERT, 0)
}

func (s *UpsertCommandContext) INTO() antlr.TerminalNode {
	return s.GetToken(PartiQLParserINTO, 0)
}

func (s *UpsertCommandContext) SymbolPrimitive() ISymbolPrimitiveContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISymbolPrimitiveContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISymbolPrimitiveContext)
}

func (s *UpsertCommandContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *UpsertCommandContext) AsIdent() IAsIdentContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAsIdentContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAsIdentContext)
}

func (s *UpsertCommandContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UpsertCommandContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UpsertCommandContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterUpsertCommand(s)
	}
}

func (s *UpsertCommandContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitUpsertCommand(s)
	}
}

func (p *PartiQLParser) UpsertCommand() (localctx IUpsertCommandContext) {
	localctx = NewUpsertCommandContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 52, PartiQLParserRULE_upsertCommand)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(493)
		p.Match(PartiQLParserUPSERT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(494)
		p.Match(PartiQLParserINTO)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(495)
		p.SymbolPrimitive()
	}
	p.SetState(497)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == PartiQLParserAS {
		{
			p.SetState(496)
			p.AsIdent()
		}

	}
	{
		p.SetState(499)

		var _x = p.Expr()

		localctx.(*UpsertCommandContext).value = _x
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IRemoveCommandContext is an interface to support dynamic dispatch.
type IRemoveCommandContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	REMOVE() antlr.TerminalNode
	PathSimple() IPathSimpleContext

	// IsRemoveCommandContext differentiates from other interfaces.
	IsRemoveCommandContext()
}

type RemoveCommandContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRemoveCommandContext() *RemoveCommandContext {
	var p = new(RemoveCommandContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_removeCommand
	return p
}

func InitEmptyRemoveCommandContext(p *RemoveCommandContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_removeCommand
}

func (*RemoveCommandContext) IsRemoveCommandContext() {}

func NewRemoveCommandContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RemoveCommandContext {
	var p = new(RemoveCommandContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_removeCommand

	return p
}

func (s *RemoveCommandContext) GetParser() antlr.Parser { return s.parser }

func (s *RemoveCommandContext) REMOVE() antlr.TerminalNode {
	return s.GetToken(PartiQLParserREMOVE, 0)
}

func (s *RemoveCommandContext) PathSimple() IPathSimpleContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPathSimpleContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPathSimpleContext)
}

func (s *RemoveCommandContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RemoveCommandContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RemoveCommandContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterRemoveCommand(s)
	}
}

func (s *RemoveCommandContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitRemoveCommand(s)
	}
}

func (p *PartiQLParser) RemoveCommand() (localctx IRemoveCommandContext) {
	localctx = NewRemoveCommandContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 54, PartiQLParserRULE_removeCommand)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(501)
		p.Match(PartiQLParserREMOVE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(502)
		p.PathSimple()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IInsertCommandReturningContext is an interface to support dynamic dispatch.
type IInsertCommandReturningContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetValue returns the value rule contexts.
	GetValue() IExprContext

	// GetPos returns the pos rule contexts.
	GetPos() IExprContext

	// SetValue sets the value rule contexts.
	SetValue(IExprContext)

	// SetPos sets the pos rule contexts.
	SetPos(IExprContext)

	// Getter signatures
	INSERT() antlr.TerminalNode
	INTO() antlr.TerminalNode
	PathSimple() IPathSimpleContext
	VALUE() antlr.TerminalNode
	AllExpr() []IExprContext
	Expr(i int) IExprContext
	AT() antlr.TerminalNode
	OnConflictLegacy() IOnConflictLegacyContext
	ReturningClause() IReturningClauseContext

	// IsInsertCommandReturningContext differentiates from other interfaces.
	IsInsertCommandReturningContext()
}

type InsertCommandReturningContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	value  IExprContext
	pos    IExprContext
}

func NewEmptyInsertCommandReturningContext() *InsertCommandReturningContext {
	var p = new(InsertCommandReturningContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_insertCommandReturning
	return p
}

func InitEmptyInsertCommandReturningContext(p *InsertCommandReturningContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_insertCommandReturning
}

func (*InsertCommandReturningContext) IsInsertCommandReturningContext() {}

func NewInsertCommandReturningContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InsertCommandReturningContext {
	var p = new(InsertCommandReturningContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_insertCommandReturning

	return p
}

func (s *InsertCommandReturningContext) GetParser() antlr.Parser { return s.parser }

func (s *InsertCommandReturningContext) GetValue() IExprContext { return s.value }

func (s *InsertCommandReturningContext) GetPos() IExprContext { return s.pos }

func (s *InsertCommandReturningContext) SetValue(v IExprContext) { s.value = v }

func (s *InsertCommandReturningContext) SetPos(v IExprContext) { s.pos = v }

func (s *InsertCommandReturningContext) INSERT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserINSERT, 0)
}

func (s *InsertCommandReturningContext) INTO() antlr.TerminalNode {
	return s.GetToken(PartiQLParserINTO, 0)
}

func (s *InsertCommandReturningContext) PathSimple() IPathSimpleContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPathSimpleContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPathSimpleContext)
}

func (s *InsertCommandReturningContext) VALUE() antlr.TerminalNode {
	return s.GetToken(PartiQLParserVALUE, 0)
}

func (s *InsertCommandReturningContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *InsertCommandReturningContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *InsertCommandReturningContext) AT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserAT, 0)
}

func (s *InsertCommandReturningContext) OnConflictLegacy() IOnConflictLegacyContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOnConflictLegacyContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOnConflictLegacyContext)
}

func (s *InsertCommandReturningContext) ReturningClause() IReturningClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IReturningClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IReturningClauseContext)
}

func (s *InsertCommandReturningContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InsertCommandReturningContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InsertCommandReturningContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterInsertCommandReturning(s)
	}
}

func (s *InsertCommandReturningContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitInsertCommandReturning(s)
	}
}

func (p *PartiQLParser) InsertCommandReturning() (localctx IInsertCommandReturningContext) {
	localctx = NewInsertCommandReturningContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 56, PartiQLParserRULE_insertCommandReturning)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(504)
		p.Match(PartiQLParserINSERT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(505)
		p.Match(PartiQLParserINTO)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(506)
		p.PathSimple()
	}
	{
		p.SetState(507)
		p.Match(PartiQLParserVALUE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(508)

		var _x = p.Expr()

		localctx.(*InsertCommandReturningContext).value = _x
	}
	p.SetState(511)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == PartiQLParserAT {
		{
			p.SetState(509)
			p.Match(PartiQLParserAT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(510)

			var _x = p.Expr()

			localctx.(*InsertCommandReturningContext).pos = _x
		}

	}
	p.SetState(514)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == PartiQLParserON {
		{
			p.SetState(513)
			p.OnConflictLegacy()
		}

	}
	p.SetState(517)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == PartiQLParserRETURNING {
		{
			p.SetState(516)
			p.ReturningClause()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IInsertStatementContext is an interface to support dynamic dispatch.
type IInsertStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetValue returns the value rule contexts.
	GetValue() IExprContext

	// SetValue sets the value rule contexts.
	SetValue(IExprContext)

	// Getter signatures
	INSERT() antlr.TerminalNode
	INTO() antlr.TerminalNode
	SymbolPrimitive() ISymbolPrimitiveContext
	Expr() IExprContext
	AsIdent() IAsIdentContext
	OnConflict() IOnConflictContext

	// IsInsertStatementContext differentiates from other interfaces.
	IsInsertStatementContext()
}

type InsertStatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	value  IExprContext
}

func NewEmptyInsertStatementContext() *InsertStatementContext {
	var p = new(InsertStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_insertStatement
	return p
}

func InitEmptyInsertStatementContext(p *InsertStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_insertStatement
}

func (*InsertStatementContext) IsInsertStatementContext() {}

func NewInsertStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InsertStatementContext {
	var p = new(InsertStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_insertStatement

	return p
}

func (s *InsertStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *InsertStatementContext) GetValue() IExprContext { return s.value }

func (s *InsertStatementContext) SetValue(v IExprContext) { s.value = v }

func (s *InsertStatementContext) INSERT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserINSERT, 0)
}

func (s *InsertStatementContext) INTO() antlr.TerminalNode {
	return s.GetToken(PartiQLParserINTO, 0)
}

func (s *InsertStatementContext) SymbolPrimitive() ISymbolPrimitiveContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISymbolPrimitiveContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISymbolPrimitiveContext)
}

func (s *InsertStatementContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *InsertStatementContext) AsIdent() IAsIdentContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAsIdentContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAsIdentContext)
}

func (s *InsertStatementContext) OnConflict() IOnConflictContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOnConflictContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOnConflictContext)
}

func (s *InsertStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InsertStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InsertStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterInsertStatement(s)
	}
}

func (s *InsertStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitInsertStatement(s)
	}
}

func (p *PartiQLParser) InsertStatement() (localctx IInsertStatementContext) {
	localctx = NewInsertStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 58, PartiQLParserRULE_insertStatement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(519)
		p.Match(PartiQLParserINSERT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(520)
		p.Match(PartiQLParserINTO)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(521)
		p.SymbolPrimitive()
	}
	p.SetState(523)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == PartiQLParserAS {
		{
			p.SetState(522)
			p.AsIdent()
		}

	}
	{
		p.SetState(525)

		var _x = p.Expr()

		localctx.(*InsertStatementContext).value = _x
	}
	p.SetState(527)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == PartiQLParserON {
		{
			p.SetState(526)
			p.OnConflict()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOnConflictContext is an interface to support dynamic dispatch.
type IOnConflictContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ON() antlr.TerminalNode
	CONFLICT() antlr.TerminalNode
	ConflictAction() IConflictActionContext
	ConflictTarget() IConflictTargetContext

	// IsOnConflictContext differentiates from other interfaces.
	IsOnConflictContext()
}

type OnConflictContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOnConflictContext() *OnConflictContext {
	var p = new(OnConflictContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_onConflict
	return p
}

func InitEmptyOnConflictContext(p *OnConflictContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_onConflict
}

func (*OnConflictContext) IsOnConflictContext() {}

func NewOnConflictContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OnConflictContext {
	var p = new(OnConflictContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_onConflict

	return p
}

func (s *OnConflictContext) GetParser() antlr.Parser { return s.parser }

func (s *OnConflictContext) ON() antlr.TerminalNode {
	return s.GetToken(PartiQLParserON, 0)
}

func (s *OnConflictContext) CONFLICT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserCONFLICT, 0)
}

func (s *OnConflictContext) ConflictAction() IConflictActionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConflictActionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConflictActionContext)
}

func (s *OnConflictContext) ConflictTarget() IConflictTargetContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConflictTargetContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConflictTargetContext)
}

func (s *OnConflictContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OnConflictContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OnConflictContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterOnConflict(s)
	}
}

func (s *OnConflictContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitOnConflict(s)
	}
}

func (p *PartiQLParser) OnConflict() (localctx IOnConflictContext) {
	localctx = NewOnConflictContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 60, PartiQLParserRULE_onConflict)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(529)
		p.Match(PartiQLParserON)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(530)
		p.Match(PartiQLParserCONFLICT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(532)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == PartiQLParserON || _la == PartiQLParserPAREN_LEFT {
		{
			p.SetState(531)
			p.ConflictTarget()
		}

	}
	{
		p.SetState(534)
		p.ConflictAction()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IInsertStatementLegacyContext is an interface to support dynamic dispatch.
type IInsertStatementLegacyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetValue returns the value rule contexts.
	GetValue() IExprContext

	// GetPos returns the pos rule contexts.
	GetPos() IExprContext

	// SetValue sets the value rule contexts.
	SetValue(IExprContext)

	// SetPos sets the pos rule contexts.
	SetPos(IExprContext)

	// Getter signatures
	INSERT() antlr.TerminalNode
	INTO() antlr.TerminalNode
	PathSimple() IPathSimpleContext
	VALUE() antlr.TerminalNode
	AllExpr() []IExprContext
	Expr(i int) IExprContext
	AT() antlr.TerminalNode
	OnConflictLegacy() IOnConflictLegacyContext

	// IsInsertStatementLegacyContext differentiates from other interfaces.
	IsInsertStatementLegacyContext()
}

type InsertStatementLegacyContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	value  IExprContext
	pos    IExprContext
}

func NewEmptyInsertStatementLegacyContext() *InsertStatementLegacyContext {
	var p = new(InsertStatementLegacyContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_insertStatementLegacy
	return p
}

func InitEmptyInsertStatementLegacyContext(p *InsertStatementLegacyContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_insertStatementLegacy
}

func (*InsertStatementLegacyContext) IsInsertStatementLegacyContext() {}

func NewInsertStatementLegacyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InsertStatementLegacyContext {
	var p = new(InsertStatementLegacyContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_insertStatementLegacy

	return p
}

func (s *InsertStatementLegacyContext) GetParser() antlr.Parser { return s.parser }

func (s *InsertStatementLegacyContext) GetValue() IExprContext { return s.value }

func (s *InsertStatementLegacyContext) GetPos() IExprContext { return s.pos }

func (s *InsertStatementLegacyContext) SetValue(v IExprContext) { s.value = v }

func (s *InsertStatementLegacyContext) SetPos(v IExprContext) { s.pos = v }

func (s *InsertStatementLegacyContext) INSERT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserINSERT, 0)
}

func (s *InsertStatementLegacyContext) INTO() antlr.TerminalNode {
	return s.GetToken(PartiQLParserINTO, 0)
}

func (s *InsertStatementLegacyContext) PathSimple() IPathSimpleContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPathSimpleContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPathSimpleContext)
}

func (s *InsertStatementLegacyContext) VALUE() antlr.TerminalNode {
	return s.GetToken(PartiQLParserVALUE, 0)
}

func (s *InsertStatementLegacyContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *InsertStatementLegacyContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *InsertStatementLegacyContext) AT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserAT, 0)
}

func (s *InsertStatementLegacyContext) OnConflictLegacy() IOnConflictLegacyContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOnConflictLegacyContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOnConflictLegacyContext)
}

func (s *InsertStatementLegacyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InsertStatementLegacyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InsertStatementLegacyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterInsertStatementLegacy(s)
	}
}

func (s *InsertStatementLegacyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitInsertStatementLegacy(s)
	}
}

func (p *PartiQLParser) InsertStatementLegacy() (localctx IInsertStatementLegacyContext) {
	localctx = NewInsertStatementLegacyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 62, PartiQLParserRULE_insertStatementLegacy)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(536)
		p.Match(PartiQLParserINSERT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(537)
		p.Match(PartiQLParserINTO)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(538)
		p.PathSimple()
	}
	{
		p.SetState(539)
		p.Match(PartiQLParserVALUE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(540)

		var _x = p.Expr()

		localctx.(*InsertStatementLegacyContext).value = _x
	}
	p.SetState(543)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == PartiQLParserAT {
		{
			p.SetState(541)
			p.Match(PartiQLParserAT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(542)

			var _x = p.Expr()

			localctx.(*InsertStatementLegacyContext).pos = _x
		}

	}
	p.SetState(546)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == PartiQLParserON {
		{
			p.SetState(545)
			p.OnConflictLegacy()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOnConflictLegacyContext is an interface to support dynamic dispatch.
type IOnConflictLegacyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ON() antlr.TerminalNode
	CONFLICT() antlr.TerminalNode
	WHERE() antlr.TerminalNode
	Expr() IExprContext
	DO() antlr.TerminalNode
	NOTHING() antlr.TerminalNode

	// IsOnConflictLegacyContext differentiates from other interfaces.
	IsOnConflictLegacyContext()
}

type OnConflictLegacyContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOnConflictLegacyContext() *OnConflictLegacyContext {
	var p = new(OnConflictLegacyContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_onConflictLegacy
	return p
}

func InitEmptyOnConflictLegacyContext(p *OnConflictLegacyContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_onConflictLegacy
}

func (*OnConflictLegacyContext) IsOnConflictLegacyContext() {}

func NewOnConflictLegacyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OnConflictLegacyContext {
	var p = new(OnConflictLegacyContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_onConflictLegacy

	return p
}

func (s *OnConflictLegacyContext) GetParser() antlr.Parser { return s.parser }

func (s *OnConflictLegacyContext) ON() antlr.TerminalNode {
	return s.GetToken(PartiQLParserON, 0)
}

func (s *OnConflictLegacyContext) CONFLICT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserCONFLICT, 0)
}

func (s *OnConflictLegacyContext) WHERE() antlr.TerminalNode {
	return s.GetToken(PartiQLParserWHERE, 0)
}

func (s *OnConflictLegacyContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *OnConflictLegacyContext) DO() antlr.TerminalNode {
	return s.GetToken(PartiQLParserDO, 0)
}

func (s *OnConflictLegacyContext) NOTHING() antlr.TerminalNode {
	return s.GetToken(PartiQLParserNOTHING, 0)
}

func (s *OnConflictLegacyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OnConflictLegacyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OnConflictLegacyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterOnConflictLegacy(s)
	}
}

func (s *OnConflictLegacyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitOnConflictLegacy(s)
	}
}

func (p *PartiQLParser) OnConflictLegacy() (localctx IOnConflictLegacyContext) {
	localctx = NewOnConflictLegacyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 64, PartiQLParserRULE_onConflictLegacy)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(548)
		p.Match(PartiQLParserON)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(549)
		p.Match(PartiQLParserCONFLICT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(550)
		p.Match(PartiQLParserWHERE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(551)
		p.Expr()
	}
	{
		p.SetState(552)
		p.Match(PartiQLParserDO)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(553)
		p.Match(PartiQLParserNOTHING)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IConflictTargetContext is an interface to support dynamic dispatch.
type IConflictTargetContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	PAREN_LEFT() antlr.TerminalNode
	AllSymbolPrimitive() []ISymbolPrimitiveContext
	SymbolPrimitive(i int) ISymbolPrimitiveContext
	PAREN_RIGHT() antlr.TerminalNode
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode
	ON() antlr.TerminalNode
	CONSTRAINT() antlr.TerminalNode
	ConstraintName() IConstraintNameContext

	// IsConflictTargetContext differentiates from other interfaces.
	IsConflictTargetContext()
}

type ConflictTargetContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConflictTargetContext() *ConflictTargetContext {
	var p = new(ConflictTargetContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_conflictTarget
	return p
}

func InitEmptyConflictTargetContext(p *ConflictTargetContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_conflictTarget
}

func (*ConflictTargetContext) IsConflictTargetContext() {}

func NewConflictTargetContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConflictTargetContext {
	var p = new(ConflictTargetContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_conflictTarget

	return p
}

func (s *ConflictTargetContext) GetParser() antlr.Parser { return s.parser }

func (s *ConflictTargetContext) PAREN_LEFT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserPAREN_LEFT, 0)
}

func (s *ConflictTargetContext) AllSymbolPrimitive() []ISymbolPrimitiveContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISymbolPrimitiveContext); ok {
			len++
		}
	}

	tst := make([]ISymbolPrimitiveContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISymbolPrimitiveContext); ok {
			tst[i] = t.(ISymbolPrimitiveContext)
			i++
		}
	}

	return tst
}

func (s *ConflictTargetContext) SymbolPrimitive(i int) ISymbolPrimitiveContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISymbolPrimitiveContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISymbolPrimitiveContext)
}

func (s *ConflictTargetContext) PAREN_RIGHT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserPAREN_RIGHT, 0)
}

func (s *ConflictTargetContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PartiQLParserCOMMA)
}

func (s *ConflictTargetContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PartiQLParserCOMMA, i)
}

func (s *ConflictTargetContext) ON() antlr.TerminalNode {
	return s.GetToken(PartiQLParserON, 0)
}

func (s *ConflictTargetContext) CONSTRAINT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserCONSTRAINT, 0)
}

func (s *ConflictTargetContext) ConstraintName() IConstraintNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConstraintNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConstraintNameContext)
}

func (s *ConflictTargetContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConflictTargetContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConflictTargetContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterConflictTarget(s)
	}
}

func (s *ConflictTargetContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitConflictTarget(s)
	}
}

func (p *PartiQLParser) ConflictTarget() (localctx IConflictTargetContext) {
	localctx = NewConflictTargetContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 66, PartiQLParserRULE_conflictTarget)
	var _la int

	p.SetState(569)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case PartiQLParserPAREN_LEFT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(555)
			p.Match(PartiQLParserPAREN_LEFT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(556)
			p.SymbolPrimitive()
		}
		p.SetState(561)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == PartiQLParserCOMMA {
			{
				p.SetState(557)
				p.Match(PartiQLParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(558)
				p.SymbolPrimitive()
			}

			p.SetState(563)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(564)
			p.Match(PartiQLParserPAREN_RIGHT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case PartiQLParserON:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(566)
			p.Match(PartiQLParserON)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(567)
			p.Match(PartiQLParserCONSTRAINT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(568)
			p.ConstraintName()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IConstraintNameContext is an interface to support dynamic dispatch.
type IConstraintNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SymbolPrimitive() ISymbolPrimitiveContext

	// IsConstraintNameContext differentiates from other interfaces.
	IsConstraintNameContext()
}

type ConstraintNameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConstraintNameContext() *ConstraintNameContext {
	var p = new(ConstraintNameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_constraintName
	return p
}

func InitEmptyConstraintNameContext(p *ConstraintNameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_constraintName
}

func (*ConstraintNameContext) IsConstraintNameContext() {}

func NewConstraintNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConstraintNameContext {
	var p = new(ConstraintNameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_constraintName

	return p
}

func (s *ConstraintNameContext) GetParser() antlr.Parser { return s.parser }

func (s *ConstraintNameContext) SymbolPrimitive() ISymbolPrimitiveContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISymbolPrimitiveContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISymbolPrimitiveContext)
}

func (s *ConstraintNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConstraintNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConstraintNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterConstraintName(s)
	}
}

func (s *ConstraintNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitConstraintName(s)
	}
}

func (p *PartiQLParser) ConstraintName() (localctx IConstraintNameContext) {
	localctx = NewConstraintNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 68, PartiQLParserRULE_constraintName)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(571)
		p.SymbolPrimitive()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IConflictActionContext is an interface to support dynamic dispatch.
type IConflictActionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	DO() antlr.TerminalNode
	NOTHING() antlr.TerminalNode
	REPLACE() antlr.TerminalNode
	DoReplace() IDoReplaceContext
	UPDATE() antlr.TerminalNode
	DoUpdate() IDoUpdateContext

	// IsConflictActionContext differentiates from other interfaces.
	IsConflictActionContext()
}

type ConflictActionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConflictActionContext() *ConflictActionContext {
	var p = new(ConflictActionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_conflictAction
	return p
}

func InitEmptyConflictActionContext(p *ConflictActionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_conflictAction
}

func (*ConflictActionContext) IsConflictActionContext() {}

func NewConflictActionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConflictActionContext {
	var p = new(ConflictActionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_conflictAction

	return p
}

func (s *ConflictActionContext) GetParser() antlr.Parser { return s.parser }

func (s *ConflictActionContext) DO() antlr.TerminalNode {
	return s.GetToken(PartiQLParserDO, 0)
}

func (s *ConflictActionContext) NOTHING() antlr.TerminalNode {
	return s.GetToken(PartiQLParserNOTHING, 0)
}

func (s *ConflictActionContext) REPLACE() antlr.TerminalNode {
	return s.GetToken(PartiQLParserREPLACE, 0)
}

func (s *ConflictActionContext) DoReplace() IDoReplaceContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDoReplaceContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDoReplaceContext)
}

func (s *ConflictActionContext) UPDATE() antlr.TerminalNode {
	return s.GetToken(PartiQLParserUPDATE, 0)
}

func (s *ConflictActionContext) DoUpdate() IDoUpdateContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDoUpdateContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDoUpdateContext)
}

func (s *ConflictActionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConflictActionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConflictActionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterConflictAction(s)
	}
}

func (s *ConflictActionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitConflictAction(s)
	}
}

func (p *PartiQLParser) ConflictAction() (localctx IConflictActionContext) {
	localctx = NewConflictActionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 70, PartiQLParserRULE_conflictAction)
	p.SetState(581)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 42, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(573)
			p.Match(PartiQLParserDO)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(574)
			p.Match(PartiQLParserNOTHING)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(575)
			p.Match(PartiQLParserDO)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(576)
			p.Match(PartiQLParserREPLACE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(577)
			p.DoReplace()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(578)
			p.Match(PartiQLParserDO)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(579)
			p.Match(PartiQLParserUPDATE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(580)
			p.DoUpdate()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDoReplaceContext is an interface to support dynamic dispatch.
type IDoReplaceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetCondition returns the condition rule contexts.
	GetCondition() IExprContext

	// SetCondition sets the condition rule contexts.
	SetCondition(IExprContext)

	// Getter signatures
	EXCLUDED() antlr.TerminalNode
	WHERE() antlr.TerminalNode
	Expr() IExprContext

	// IsDoReplaceContext differentiates from other interfaces.
	IsDoReplaceContext()
}

type DoReplaceContext struct {
	antlr.BaseParserRuleContext
	parser    antlr.Parser
	condition IExprContext
}

func NewEmptyDoReplaceContext() *DoReplaceContext {
	var p = new(DoReplaceContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_doReplace
	return p
}

func InitEmptyDoReplaceContext(p *DoReplaceContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_doReplace
}

func (*DoReplaceContext) IsDoReplaceContext() {}

func NewDoReplaceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DoReplaceContext {
	var p = new(DoReplaceContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_doReplace

	return p
}

func (s *DoReplaceContext) GetParser() antlr.Parser { return s.parser }

func (s *DoReplaceContext) GetCondition() IExprContext { return s.condition }

func (s *DoReplaceContext) SetCondition(v IExprContext) { s.condition = v }

func (s *DoReplaceContext) EXCLUDED() antlr.TerminalNode {
	return s.GetToken(PartiQLParserEXCLUDED, 0)
}

func (s *DoReplaceContext) WHERE() antlr.TerminalNode {
	return s.GetToken(PartiQLParserWHERE, 0)
}

func (s *DoReplaceContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *DoReplaceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DoReplaceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DoReplaceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterDoReplace(s)
	}
}

func (s *DoReplaceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitDoReplace(s)
	}
}

func (p *PartiQLParser) DoReplace() (localctx IDoReplaceContext) {
	localctx = NewDoReplaceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 72, PartiQLParserRULE_doReplace)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(583)
		p.Match(PartiQLParserEXCLUDED)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(586)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 43, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(584)
			p.Match(PartiQLParserWHERE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(585)

			var _x = p.Expr()

			localctx.(*DoReplaceContext).condition = _x
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDoUpdateContext is an interface to support dynamic dispatch.
type IDoUpdateContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetCondition returns the condition rule contexts.
	GetCondition() IExprContext

	// SetCondition sets the condition rule contexts.
	SetCondition(IExprContext)

	// Getter signatures
	EXCLUDED() antlr.TerminalNode
	WHERE() antlr.TerminalNode
	Expr() IExprContext

	// IsDoUpdateContext differentiates from other interfaces.
	IsDoUpdateContext()
}

type DoUpdateContext struct {
	antlr.BaseParserRuleContext
	parser    antlr.Parser
	condition IExprContext
}

func NewEmptyDoUpdateContext() *DoUpdateContext {
	var p = new(DoUpdateContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_doUpdate
	return p
}

func InitEmptyDoUpdateContext(p *DoUpdateContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_doUpdate
}

func (*DoUpdateContext) IsDoUpdateContext() {}

func NewDoUpdateContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DoUpdateContext {
	var p = new(DoUpdateContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_doUpdate

	return p
}

func (s *DoUpdateContext) GetParser() antlr.Parser { return s.parser }

func (s *DoUpdateContext) GetCondition() IExprContext { return s.condition }

func (s *DoUpdateContext) SetCondition(v IExprContext) { s.condition = v }

func (s *DoUpdateContext) EXCLUDED() antlr.TerminalNode {
	return s.GetToken(PartiQLParserEXCLUDED, 0)
}

func (s *DoUpdateContext) WHERE() antlr.TerminalNode {
	return s.GetToken(PartiQLParserWHERE, 0)
}

func (s *DoUpdateContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *DoUpdateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DoUpdateContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DoUpdateContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterDoUpdate(s)
	}
}

func (s *DoUpdateContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitDoUpdate(s)
	}
}

func (p *PartiQLParser) DoUpdate() (localctx IDoUpdateContext) {
	localctx = NewDoUpdateContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 74, PartiQLParserRULE_doUpdate)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(588)
		p.Match(PartiQLParserEXCLUDED)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(591)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 44, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(589)
			p.Match(PartiQLParserWHERE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(590)

			var _x = p.Expr()

			localctx.(*DoUpdateContext).condition = _x
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUpdateClauseContext is an interface to support dynamic dispatch.
type IUpdateClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	UPDATE() antlr.TerminalNode
	TableBaseReference() ITableBaseReferenceContext

	// IsUpdateClauseContext differentiates from other interfaces.
	IsUpdateClauseContext()
}

type UpdateClauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUpdateClauseContext() *UpdateClauseContext {
	var p = new(UpdateClauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_updateClause
	return p
}

func InitEmptyUpdateClauseContext(p *UpdateClauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_updateClause
}

func (*UpdateClauseContext) IsUpdateClauseContext() {}

func NewUpdateClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UpdateClauseContext {
	var p = new(UpdateClauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_updateClause

	return p
}

func (s *UpdateClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *UpdateClauseContext) UPDATE() antlr.TerminalNode {
	return s.GetToken(PartiQLParserUPDATE, 0)
}

func (s *UpdateClauseContext) TableBaseReference() ITableBaseReferenceContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITableBaseReferenceContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITableBaseReferenceContext)
}

func (s *UpdateClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UpdateClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UpdateClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterUpdateClause(s)
	}
}

func (s *UpdateClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitUpdateClause(s)
	}
}

func (p *PartiQLParser) UpdateClause() (localctx IUpdateClauseContext) {
	localctx = NewUpdateClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 76, PartiQLParserRULE_updateClause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(593)
		p.Match(PartiQLParserUPDATE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(594)
		p.TableBaseReference()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISetCommandContext is an interface to support dynamic dispatch.
type ISetCommandContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SET() antlr.TerminalNode
	AllSetAssignment() []ISetAssignmentContext
	SetAssignment(i int) ISetAssignmentContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsSetCommandContext differentiates from other interfaces.
	IsSetCommandContext()
}

type SetCommandContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySetCommandContext() *SetCommandContext {
	var p = new(SetCommandContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_setCommand
	return p
}

func InitEmptySetCommandContext(p *SetCommandContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_setCommand
}

func (*SetCommandContext) IsSetCommandContext() {}

func NewSetCommandContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SetCommandContext {
	var p = new(SetCommandContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_setCommand

	return p
}

func (s *SetCommandContext) GetParser() antlr.Parser { return s.parser }

func (s *SetCommandContext) SET() antlr.TerminalNode {
	return s.GetToken(PartiQLParserSET, 0)
}

func (s *SetCommandContext) AllSetAssignment() []ISetAssignmentContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISetAssignmentContext); ok {
			len++
		}
	}

	tst := make([]ISetAssignmentContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISetAssignmentContext); ok {
			tst[i] = t.(ISetAssignmentContext)
			i++
		}
	}

	return tst
}

func (s *SetCommandContext) SetAssignment(i int) ISetAssignmentContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISetAssignmentContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISetAssignmentContext)
}

func (s *SetCommandContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PartiQLParserCOMMA)
}

func (s *SetCommandContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PartiQLParserCOMMA, i)
}

func (s *SetCommandContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SetCommandContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SetCommandContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterSetCommand(s)
	}
}

func (s *SetCommandContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitSetCommand(s)
	}
}

func (p *PartiQLParser) SetCommand() (localctx ISetCommandContext) {
	localctx = NewSetCommandContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 78, PartiQLParserRULE_setCommand)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(596)
		p.Match(PartiQLParserSET)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(597)
		p.SetAssignment()
	}
	p.SetState(602)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == PartiQLParserCOMMA {
		{
			p.SetState(598)
			p.Match(PartiQLParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(599)
			p.SetAssignment()
		}

		p.SetState(604)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISetAssignmentContext is an interface to support dynamic dispatch.
type ISetAssignmentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	PathSimple() IPathSimpleContext
	EQ() antlr.TerminalNode
	Expr() IExprContext

	// IsSetAssignmentContext differentiates from other interfaces.
	IsSetAssignmentContext()
}

type SetAssignmentContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySetAssignmentContext() *SetAssignmentContext {
	var p = new(SetAssignmentContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_setAssignment
	return p
}

func InitEmptySetAssignmentContext(p *SetAssignmentContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_setAssignment
}

func (*SetAssignmentContext) IsSetAssignmentContext() {}

func NewSetAssignmentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SetAssignmentContext {
	var p = new(SetAssignmentContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_setAssignment

	return p
}

func (s *SetAssignmentContext) GetParser() antlr.Parser { return s.parser }

func (s *SetAssignmentContext) PathSimple() IPathSimpleContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPathSimpleContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPathSimpleContext)
}

func (s *SetAssignmentContext) EQ() antlr.TerminalNode {
	return s.GetToken(PartiQLParserEQ, 0)
}

func (s *SetAssignmentContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *SetAssignmentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SetAssignmentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SetAssignmentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterSetAssignment(s)
	}
}

func (s *SetAssignmentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitSetAssignment(s)
	}
}

func (p *PartiQLParser) SetAssignment() (localctx ISetAssignmentContext) {
	localctx = NewSetAssignmentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 80, PartiQLParserRULE_setAssignment)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(605)
		p.PathSimple()
	}
	{
		p.SetState(606)
		p.Match(PartiQLParserEQ)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(607)
		p.Expr()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDeleteCommandContext is an interface to support dynamic dispatch.
type IDeleteCommandContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	DELETE() antlr.TerminalNode
	FromClauseSimple() IFromClauseSimpleContext
	WhereClause() IWhereClauseContext
	ReturningClause() IReturningClauseContext

	// IsDeleteCommandContext differentiates from other interfaces.
	IsDeleteCommandContext()
}

type DeleteCommandContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeleteCommandContext() *DeleteCommandContext {
	var p = new(DeleteCommandContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_deleteCommand
	return p
}

func InitEmptyDeleteCommandContext(p *DeleteCommandContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_deleteCommand
}

func (*DeleteCommandContext) IsDeleteCommandContext() {}

func NewDeleteCommandContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeleteCommandContext {
	var p = new(DeleteCommandContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_deleteCommand

	return p
}

func (s *DeleteCommandContext) GetParser() antlr.Parser { return s.parser }

func (s *DeleteCommandContext) DELETE() antlr.TerminalNode {
	return s.GetToken(PartiQLParserDELETE, 0)
}

func (s *DeleteCommandContext) FromClauseSimple() IFromClauseSimpleContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFromClauseSimpleContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFromClauseSimpleContext)
}

func (s *DeleteCommandContext) WhereClause() IWhereClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWhereClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWhereClauseContext)
}

func (s *DeleteCommandContext) ReturningClause() IReturningClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IReturningClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IReturningClauseContext)
}

func (s *DeleteCommandContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeleteCommandContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DeleteCommandContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterDeleteCommand(s)
	}
}

func (s *DeleteCommandContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitDeleteCommand(s)
	}
}

func (p *PartiQLParser) DeleteCommand() (localctx IDeleteCommandContext) {
	localctx = NewDeleteCommandContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 82, PartiQLParserRULE_deleteCommand)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(609)
		p.Match(PartiQLParserDELETE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(610)
		p.FromClauseSimple()
	}
	p.SetState(612)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == PartiQLParserWHERE {
		{
			p.SetState(611)
			p.WhereClause()
		}

	}
	p.SetState(615)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == PartiQLParserRETURNING {
		{
			p.SetState(614)
			p.ReturningClause()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IReturningClauseContext is an interface to support dynamic dispatch.
type IReturningClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	RETURNING() antlr.TerminalNode
	AllReturningColumn() []IReturningColumnContext
	ReturningColumn(i int) IReturningColumnContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsReturningClauseContext differentiates from other interfaces.
	IsReturningClauseContext()
}

type ReturningClauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReturningClauseContext() *ReturningClauseContext {
	var p = new(ReturningClauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_returningClause
	return p
}

func InitEmptyReturningClauseContext(p *ReturningClauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_returningClause
}

func (*ReturningClauseContext) IsReturningClauseContext() {}

func NewReturningClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ReturningClauseContext {
	var p = new(ReturningClauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_returningClause

	return p
}

func (s *ReturningClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *ReturningClauseContext) RETURNING() antlr.TerminalNode {
	return s.GetToken(PartiQLParserRETURNING, 0)
}

func (s *ReturningClauseContext) AllReturningColumn() []IReturningColumnContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IReturningColumnContext); ok {
			len++
		}
	}

	tst := make([]IReturningColumnContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IReturningColumnContext); ok {
			tst[i] = t.(IReturningColumnContext)
			i++
		}
	}

	return tst
}

func (s *ReturningClauseContext) ReturningColumn(i int) IReturningColumnContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IReturningColumnContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IReturningColumnContext)
}

func (s *ReturningClauseContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PartiQLParserCOMMA)
}

func (s *ReturningClauseContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PartiQLParserCOMMA, i)
}

func (s *ReturningClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReturningClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ReturningClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterReturningClause(s)
	}
}

func (s *ReturningClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitReturningClause(s)
	}
}

func (p *PartiQLParser) ReturningClause() (localctx IReturningClauseContext) {
	localctx = NewReturningClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 84, PartiQLParserRULE_returningClause)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(617)
		p.Match(PartiQLParserRETURNING)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(618)
		p.ReturningColumn()
	}
	p.SetState(623)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == PartiQLParserCOMMA {
		{
			p.SetState(619)
			p.Match(PartiQLParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(620)
			p.ReturningColumn()
		}

		p.SetState(625)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IReturningColumnContext is an interface to support dynamic dispatch.
type IReturningColumnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetStatus returns the status token.
	GetStatus() antlr.Token

	// GetAge returns the age token.
	GetAge() antlr.Token

	// SetStatus sets the status token.
	SetStatus(antlr.Token)

	// SetAge sets the age token.
	SetAge(antlr.Token)

	// GetCol returns the col rule contexts.
	GetCol() IExprContext

	// SetCol sets the col rule contexts.
	SetCol(IExprContext)

	// Getter signatures
	ASTERISK() antlr.TerminalNode
	MODIFIED() antlr.TerminalNode
	ALL() antlr.TerminalNode
	OLD() antlr.TerminalNode
	NEW() antlr.TerminalNode
	Expr() IExprContext

	// IsReturningColumnContext differentiates from other interfaces.
	IsReturningColumnContext()
}

type ReturningColumnContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	status antlr.Token
	age    antlr.Token
	col    IExprContext
}

func NewEmptyReturningColumnContext() *ReturningColumnContext {
	var p = new(ReturningColumnContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_returningColumn
	return p
}

func InitEmptyReturningColumnContext(p *ReturningColumnContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_returningColumn
}

func (*ReturningColumnContext) IsReturningColumnContext() {}

func NewReturningColumnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ReturningColumnContext {
	var p = new(ReturningColumnContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_returningColumn

	return p
}

func (s *ReturningColumnContext) GetParser() antlr.Parser { return s.parser }

func (s *ReturningColumnContext) GetStatus() antlr.Token { return s.status }

func (s *ReturningColumnContext) GetAge() antlr.Token { return s.age }

func (s *ReturningColumnContext) SetStatus(v antlr.Token) { s.status = v }

func (s *ReturningColumnContext) SetAge(v antlr.Token) { s.age = v }

func (s *ReturningColumnContext) GetCol() IExprContext { return s.col }

func (s *ReturningColumnContext) SetCol(v IExprContext) { s.col = v }

func (s *ReturningColumnContext) ASTERISK() antlr.TerminalNode {
	return s.GetToken(PartiQLParserASTERISK, 0)
}

func (s *ReturningColumnContext) MODIFIED() antlr.TerminalNode {
	return s.GetToken(PartiQLParserMODIFIED, 0)
}

func (s *ReturningColumnContext) ALL() antlr.TerminalNode {
	return s.GetToken(PartiQLParserALL, 0)
}

func (s *ReturningColumnContext) OLD() antlr.TerminalNode {
	return s.GetToken(PartiQLParserOLD, 0)
}

func (s *ReturningColumnContext) NEW() antlr.TerminalNode {
	return s.GetToken(PartiQLParserNEW, 0)
}

func (s *ReturningColumnContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *ReturningColumnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReturningColumnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ReturningColumnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterReturningColumn(s)
	}
}

func (s *ReturningColumnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitReturningColumn(s)
	}
}

func (p *PartiQLParser) ReturningColumn() (localctx IReturningColumnContext) {
	localctx = NewReturningColumnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 86, PartiQLParserRULE_returningColumn)
	var _la int

	p.SetState(632)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 49, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(626)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*ReturningColumnContext).status = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == PartiQLParserALL || _la == PartiQLParserMODIFIED) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*ReturningColumnContext).status = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(627)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*ReturningColumnContext).age = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == PartiQLParserNEW || _la == PartiQLParserOLD) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*ReturningColumnContext).age = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(628)
			p.Match(PartiQLParserASTERISK)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(629)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*ReturningColumnContext).status = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == PartiQLParserALL || _la == PartiQLParserMODIFIED) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*ReturningColumnContext).status = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(630)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*ReturningColumnContext).age = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == PartiQLParserNEW || _la == PartiQLParserOLD) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*ReturningColumnContext).age = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(631)

			var _x = p.Expr()

			localctx.(*ReturningColumnContext).col = _x
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFromClauseSimpleContext is an interface to support dynamic dispatch.
type IFromClauseSimpleContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsFromClauseSimpleContext differentiates from other interfaces.
	IsFromClauseSimpleContext()
}

type FromClauseSimpleContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFromClauseSimpleContext() *FromClauseSimpleContext {
	var p = new(FromClauseSimpleContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_fromClauseSimple
	return p
}

func InitEmptyFromClauseSimpleContext(p *FromClauseSimpleContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_fromClauseSimple
}

func (*FromClauseSimpleContext) IsFromClauseSimpleContext() {}

func NewFromClauseSimpleContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FromClauseSimpleContext {
	var p = new(FromClauseSimpleContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_fromClauseSimple

	return p
}

func (s *FromClauseSimpleContext) GetParser() antlr.Parser { return s.parser }

func (s *FromClauseSimpleContext) CopyAll(ctx *FromClauseSimpleContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *FromClauseSimpleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FromClauseSimpleContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type FromClauseSimpleExplicitContext struct {
	FromClauseSimpleContext
}

func NewFromClauseSimpleExplicitContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *FromClauseSimpleExplicitContext {
	var p = new(FromClauseSimpleExplicitContext)

	InitEmptyFromClauseSimpleContext(&p.FromClauseSimpleContext)
	p.parser = parser
	p.CopyAll(ctx.(*FromClauseSimpleContext))

	return p
}

func (s *FromClauseSimpleExplicitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FromClauseSimpleExplicitContext) FROM() antlr.TerminalNode {
	return s.GetToken(PartiQLParserFROM, 0)
}

func (s *FromClauseSimpleExplicitContext) PathSimple() IPathSimpleContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPathSimpleContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPathSimpleContext)
}

func (s *FromClauseSimpleExplicitContext) AsIdent() IAsIdentContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAsIdentContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAsIdentContext)
}

func (s *FromClauseSimpleExplicitContext) AtIdent() IAtIdentContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAtIdentContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAtIdentContext)
}

func (s *FromClauseSimpleExplicitContext) ByIdent() IByIdentContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IByIdentContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IByIdentContext)
}

func (s *FromClauseSimpleExplicitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterFromClauseSimpleExplicit(s)
	}
}

func (s *FromClauseSimpleExplicitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitFromClauseSimpleExplicit(s)
	}
}

type FromClauseSimpleImplicitContext struct {
	FromClauseSimpleContext
}

func NewFromClauseSimpleImplicitContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *FromClauseSimpleImplicitContext {
	var p = new(FromClauseSimpleImplicitContext)

	InitEmptyFromClauseSimpleContext(&p.FromClauseSimpleContext)
	p.parser = parser
	p.CopyAll(ctx.(*FromClauseSimpleContext))

	return p
}

func (s *FromClauseSimpleImplicitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FromClauseSimpleImplicitContext) FROM() antlr.TerminalNode {
	return s.GetToken(PartiQLParserFROM, 0)
}

func (s *FromClauseSimpleImplicitContext) PathSimple() IPathSimpleContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPathSimpleContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPathSimpleContext)
}

func (s *FromClauseSimpleImplicitContext) SymbolPrimitive() ISymbolPrimitiveContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISymbolPrimitiveContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISymbolPrimitiveContext)
}

func (s *FromClauseSimpleImplicitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterFromClauseSimpleImplicit(s)
	}
}

func (s *FromClauseSimpleImplicitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitFromClauseSimpleImplicit(s)
	}
}

func (p *PartiQLParser) FromClauseSimple() (localctx IFromClauseSimpleContext) {
	localctx = NewFromClauseSimpleContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 88, PartiQLParserRULE_fromClauseSimple)
	var _la int

	p.SetState(649)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 53, p.GetParserRuleContext()) {
	case 1:
		localctx = NewFromClauseSimpleExplicitContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(634)
			p.Match(PartiQLParserFROM)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(635)
			p.PathSimple()
		}
		p.SetState(637)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == PartiQLParserAS {
			{
				p.SetState(636)
				p.AsIdent()
			}

		}
		p.SetState(640)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == PartiQLParserAT {
			{
				p.SetState(639)
				p.AtIdent()
			}

		}
		p.SetState(643)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == PartiQLParserBY {
			{
				p.SetState(642)
				p.ByIdent()
			}

		}

	case 2:
		localctx = NewFromClauseSimpleImplicitContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(645)
			p.Match(PartiQLParserFROM)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(646)
			p.PathSimple()
		}
		{
			p.SetState(647)
			p.SymbolPrimitive()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IWhereClauseContext is an interface to support dynamic dispatch.
type IWhereClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetArg returns the arg rule contexts.
	GetArg() IExprContext

	// SetArg sets the arg rule contexts.
	SetArg(IExprContext)

	// Getter signatures
	WHERE() antlr.TerminalNode
	Expr() IExprContext

	// IsWhereClauseContext differentiates from other interfaces.
	IsWhereClauseContext()
}

type WhereClauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	arg    IExprContext
}

func NewEmptyWhereClauseContext() *WhereClauseContext {
	var p = new(WhereClauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_whereClause
	return p
}

func InitEmptyWhereClauseContext(p *WhereClauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_whereClause
}

func (*WhereClauseContext) IsWhereClauseContext() {}

func NewWhereClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WhereClauseContext {
	var p = new(WhereClauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_whereClause

	return p
}

func (s *WhereClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *WhereClauseContext) GetArg() IExprContext { return s.arg }

func (s *WhereClauseContext) SetArg(v IExprContext) { s.arg = v }

func (s *WhereClauseContext) WHERE() antlr.TerminalNode {
	return s.GetToken(PartiQLParserWHERE, 0)
}

func (s *WhereClauseContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *WhereClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WhereClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WhereClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterWhereClause(s)
	}
}

func (s *WhereClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitWhereClause(s)
	}
}

func (p *PartiQLParser) WhereClause() (localctx IWhereClauseContext) {
	localctx = NewWhereClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 90, PartiQLParserRULE_whereClause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(651)
		p.Match(PartiQLParserWHERE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(652)

		var _x = p.Expr()

		localctx.(*WhereClauseContext).arg = _x
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISelectClauseContext is an interface to support dynamic dispatch.
type ISelectClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsSelectClauseContext differentiates from other interfaces.
	IsSelectClauseContext()
}

type SelectClauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelectClauseContext() *SelectClauseContext {
	var p = new(SelectClauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_selectClause
	return p
}

func InitEmptySelectClauseContext(p *SelectClauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_selectClause
}

func (*SelectClauseContext) IsSelectClauseContext() {}

func NewSelectClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SelectClauseContext {
	var p = new(SelectClauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_selectClause

	return p
}

func (s *SelectClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *SelectClauseContext) CopyAll(ctx *SelectClauseContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *SelectClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SelectClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type SelectAllContext struct {
	SelectClauseContext
}

func NewSelectAllContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SelectAllContext {
	var p = new(SelectAllContext)

	InitEmptySelectClauseContext(&p.SelectClauseContext)
	p.parser = parser
	p.CopyAll(ctx.(*SelectClauseContext))

	return p
}

func (s *SelectAllContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SelectAllContext) SELECT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserSELECT, 0)
}

func (s *SelectAllContext) ASTERISK() antlr.TerminalNode {
	return s.GetToken(PartiQLParserASTERISK, 0)
}

func (s *SelectAllContext) SetQuantifierStrategy() ISetQuantifierStrategyContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISetQuantifierStrategyContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISetQuantifierStrategyContext)
}

func (s *SelectAllContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterSelectAll(s)
	}
}

func (s *SelectAllContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitSelectAll(s)
	}
}

type SelectValueContext struct {
	SelectClauseContext
}

func NewSelectValueContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SelectValueContext {
	var p = new(SelectValueContext)

	InitEmptySelectClauseContext(&p.SelectClauseContext)
	p.parser = parser
	p.CopyAll(ctx.(*SelectClauseContext))

	return p
}

func (s *SelectValueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SelectValueContext) SELECT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserSELECT, 0)
}

func (s *SelectValueContext) VALUE() antlr.TerminalNode {
	return s.GetToken(PartiQLParserVALUE, 0)
}

func (s *SelectValueContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *SelectValueContext) SetQuantifierStrategy() ISetQuantifierStrategyContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISetQuantifierStrategyContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISetQuantifierStrategyContext)
}

func (s *SelectValueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterSelectValue(s)
	}
}

func (s *SelectValueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitSelectValue(s)
	}
}

type SelectItemsContext struct {
	SelectClauseContext
}

func NewSelectItemsContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SelectItemsContext {
	var p = new(SelectItemsContext)

	InitEmptySelectClauseContext(&p.SelectClauseContext)
	p.parser = parser
	p.CopyAll(ctx.(*SelectClauseContext))

	return p
}

func (s *SelectItemsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SelectItemsContext) SELECT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserSELECT, 0)
}

func (s *SelectItemsContext) ProjectionItems() IProjectionItemsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IProjectionItemsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IProjectionItemsContext)
}

func (s *SelectItemsContext) SetQuantifierStrategy() ISetQuantifierStrategyContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISetQuantifierStrategyContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISetQuantifierStrategyContext)
}

func (s *SelectItemsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterSelectItems(s)
	}
}

func (s *SelectItemsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitSelectItems(s)
	}
}

type SelectPivotContext struct {
	SelectClauseContext
	pivot IExprContext
	at    IExprContext
}

func NewSelectPivotContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SelectPivotContext {
	var p = new(SelectPivotContext)

	InitEmptySelectClauseContext(&p.SelectClauseContext)
	p.parser = parser
	p.CopyAll(ctx.(*SelectClauseContext))

	return p
}

func (s *SelectPivotContext) GetPivot() IExprContext { return s.pivot }

func (s *SelectPivotContext) GetAt() IExprContext { return s.at }

func (s *SelectPivotContext) SetPivot(v IExprContext) { s.pivot = v }

func (s *SelectPivotContext) SetAt(v IExprContext) { s.at = v }

func (s *SelectPivotContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SelectPivotContext) PIVOT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserPIVOT, 0)
}

func (s *SelectPivotContext) AT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserAT, 0)
}

func (s *SelectPivotContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *SelectPivotContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *SelectPivotContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterSelectPivot(s)
	}
}

func (s *SelectPivotContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitSelectPivot(s)
	}
}

func (p *PartiQLParser) SelectClause() (localctx ISelectClauseContext) {
	localctx = NewSelectClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 92, PartiQLParserRULE_selectClause)
	var _la int

	p.SetState(675)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 57, p.GetParserRuleContext()) {
	case 1:
		localctx = NewSelectAllContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(654)
			p.Match(PartiQLParserSELECT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(656)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == PartiQLParserALL || _la == PartiQLParserDISTINCT {
			{
				p.SetState(655)
				p.SetQuantifierStrategy()
			}

		}
		{
			p.SetState(658)
			p.Match(PartiQLParserASTERISK)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		localctx = NewSelectItemsContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(659)
			p.Match(PartiQLParserSELECT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(661)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == PartiQLParserALL || _la == PartiQLParserDISTINCT {
			{
				p.SetState(660)
				p.SetQuantifierStrategy()
			}

		}
		{
			p.SetState(663)
			p.ProjectionItems()
		}

	case 3:
		localctx = NewSelectValueContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(664)
			p.Match(PartiQLParserSELECT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(666)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == PartiQLParserALL || _la == PartiQLParserDISTINCT {
			{
				p.SetState(665)
				p.SetQuantifierStrategy()
			}

		}
		{
			p.SetState(668)
			p.Match(PartiQLParserVALUE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(669)
			p.Expr()
		}

	case 4:
		localctx = NewSelectPivotContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(670)
			p.Match(PartiQLParserPIVOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(671)

			var _x = p.Expr()

			localctx.(*SelectPivotContext).pivot = _x
		}
		{
			p.SetState(672)
			p.Match(PartiQLParserAT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(673)

			var _x = p.Expr()

			localctx.(*SelectPivotContext).at = _x
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IProjectionItemsContext is an interface to support dynamic dispatch.
type IProjectionItemsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllProjectionItem() []IProjectionItemContext
	ProjectionItem(i int) IProjectionItemContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsProjectionItemsContext differentiates from other interfaces.
	IsProjectionItemsContext()
}

type ProjectionItemsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyProjectionItemsContext() *ProjectionItemsContext {
	var p = new(ProjectionItemsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_projectionItems
	return p
}

func InitEmptyProjectionItemsContext(p *ProjectionItemsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_projectionItems
}

func (*ProjectionItemsContext) IsProjectionItemsContext() {}

func NewProjectionItemsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ProjectionItemsContext {
	var p = new(ProjectionItemsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_projectionItems

	return p
}

func (s *ProjectionItemsContext) GetParser() antlr.Parser { return s.parser }

func (s *ProjectionItemsContext) AllProjectionItem() []IProjectionItemContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IProjectionItemContext); ok {
			len++
		}
	}

	tst := make([]IProjectionItemContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IProjectionItemContext); ok {
			tst[i] = t.(IProjectionItemContext)
			i++
		}
	}

	return tst
}

func (s *ProjectionItemsContext) ProjectionItem(i int) IProjectionItemContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IProjectionItemContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IProjectionItemContext)
}

func (s *ProjectionItemsContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PartiQLParserCOMMA)
}

func (s *ProjectionItemsContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PartiQLParserCOMMA, i)
}

func (s *ProjectionItemsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ProjectionItemsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ProjectionItemsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterProjectionItems(s)
	}
}

func (s *ProjectionItemsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitProjectionItems(s)
	}
}

func (p *PartiQLParser) ProjectionItems() (localctx IProjectionItemsContext) {
	localctx = NewProjectionItemsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 94, PartiQLParserRULE_projectionItems)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(677)
		p.ProjectionItem()
	}
	p.SetState(682)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == PartiQLParserCOMMA {
		{
			p.SetState(678)
			p.Match(PartiQLParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(679)
			p.ProjectionItem()
		}

		p.SetState(684)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IProjectionItemContext is an interface to support dynamic dispatch.
type IProjectionItemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Expr() IExprContext
	SymbolPrimitive() ISymbolPrimitiveContext
	AS() antlr.TerminalNode

	// IsProjectionItemContext differentiates from other interfaces.
	IsProjectionItemContext()
}

type ProjectionItemContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyProjectionItemContext() *ProjectionItemContext {
	var p = new(ProjectionItemContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_projectionItem
	return p
}

func InitEmptyProjectionItemContext(p *ProjectionItemContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_projectionItem
}

func (*ProjectionItemContext) IsProjectionItemContext() {}

func NewProjectionItemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ProjectionItemContext {
	var p = new(ProjectionItemContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_projectionItem

	return p
}

func (s *ProjectionItemContext) GetParser() antlr.Parser { return s.parser }

func (s *ProjectionItemContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *ProjectionItemContext) SymbolPrimitive() ISymbolPrimitiveContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISymbolPrimitiveContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISymbolPrimitiveContext)
}

func (s *ProjectionItemContext) AS() antlr.TerminalNode {
	return s.GetToken(PartiQLParserAS, 0)
}

func (s *ProjectionItemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ProjectionItemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ProjectionItemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterProjectionItem(s)
	}
}

func (s *ProjectionItemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitProjectionItem(s)
	}
}

func (p *PartiQLParser) ProjectionItem() (localctx IProjectionItemContext) {
	localctx = NewProjectionItemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 96, PartiQLParserRULE_projectionItem)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(685)
		p.Expr()
	}
	p.SetState(690)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == PartiQLParserAS || _la == PartiQLParserIDENTIFIER || _la == PartiQLParserIDENTIFIER_QUOTED {
		p.SetState(687)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == PartiQLParserAS {
			{
				p.SetState(686)
				p.Match(PartiQLParserAS)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(689)
			p.SymbolPrimitive()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISetQuantifierStrategyContext is an interface to support dynamic dispatch.
type ISetQuantifierStrategyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	DISTINCT() antlr.TerminalNode
	ALL() antlr.TerminalNode

	// IsSetQuantifierStrategyContext differentiates from other interfaces.
	IsSetQuantifierStrategyContext()
}

type SetQuantifierStrategyContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySetQuantifierStrategyContext() *SetQuantifierStrategyContext {
	var p = new(SetQuantifierStrategyContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_setQuantifierStrategy
	return p
}

func InitEmptySetQuantifierStrategyContext(p *SetQuantifierStrategyContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_setQuantifierStrategy
}

func (*SetQuantifierStrategyContext) IsSetQuantifierStrategyContext() {}

func NewSetQuantifierStrategyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SetQuantifierStrategyContext {
	var p = new(SetQuantifierStrategyContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_setQuantifierStrategy

	return p
}

func (s *SetQuantifierStrategyContext) GetParser() antlr.Parser { return s.parser }

func (s *SetQuantifierStrategyContext) DISTINCT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserDISTINCT, 0)
}

func (s *SetQuantifierStrategyContext) ALL() antlr.TerminalNode {
	return s.GetToken(PartiQLParserALL, 0)
}

func (s *SetQuantifierStrategyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SetQuantifierStrategyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SetQuantifierStrategyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterSetQuantifierStrategy(s)
	}
}

func (s *SetQuantifierStrategyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitSetQuantifierStrategy(s)
	}
}

func (p *PartiQLParser) SetQuantifierStrategy() (localctx ISetQuantifierStrategyContext) {
	localctx = NewSetQuantifierStrategyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 98, PartiQLParserRULE_setQuantifierStrategy)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(692)
		_la = p.GetTokenStream().LA(1)

		if !(_la == PartiQLParserALL || _la == PartiQLParserDISTINCT) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ILetClauseContext is an interface to support dynamic dispatch.
type ILetClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LET() antlr.TerminalNode
	AllLetBinding() []ILetBindingContext
	LetBinding(i int) ILetBindingContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsLetClauseContext differentiates from other interfaces.
	IsLetClauseContext()
}

type LetClauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLetClauseContext() *LetClauseContext {
	var p = new(LetClauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_letClause
	return p
}

func InitEmptyLetClauseContext(p *LetClauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_letClause
}

func (*LetClauseContext) IsLetClauseContext() {}

func NewLetClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LetClauseContext {
	var p = new(LetClauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_letClause

	return p
}

func (s *LetClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *LetClauseContext) LET() antlr.TerminalNode {
	return s.GetToken(PartiQLParserLET, 0)
}

func (s *LetClauseContext) AllLetBinding() []ILetBindingContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ILetBindingContext); ok {
			len++
		}
	}

	tst := make([]ILetBindingContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ILetBindingContext); ok {
			tst[i] = t.(ILetBindingContext)
			i++
		}
	}

	return tst
}

func (s *LetClauseContext) LetBinding(i int) ILetBindingContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILetBindingContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILetBindingContext)
}

func (s *LetClauseContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PartiQLParserCOMMA)
}

func (s *LetClauseContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PartiQLParserCOMMA, i)
}

func (s *LetClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LetClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LetClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterLetClause(s)
	}
}

func (s *LetClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitLetClause(s)
	}
}

func (p *PartiQLParser) LetClause() (localctx ILetClauseContext) {
	localctx = NewLetClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 100, PartiQLParserRULE_letClause)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(694)
		p.Match(PartiQLParserLET)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(695)
		p.LetBinding()
	}
	p.SetState(700)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 61, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(696)
				p.Match(PartiQLParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(697)
				p.LetBinding()
			}

		}
		p.SetState(702)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 61, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ILetBindingContext is an interface to support dynamic dispatch.
type ILetBindingContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Expr() IExprContext
	AS() antlr.TerminalNode
	SymbolPrimitive() ISymbolPrimitiveContext

	// IsLetBindingContext differentiates from other interfaces.
	IsLetBindingContext()
}

type LetBindingContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLetBindingContext() *LetBindingContext {
	var p = new(LetBindingContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_letBinding
	return p
}

func InitEmptyLetBindingContext(p *LetBindingContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_letBinding
}

func (*LetBindingContext) IsLetBindingContext() {}

func NewLetBindingContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LetBindingContext {
	var p = new(LetBindingContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_letBinding

	return p
}

func (s *LetBindingContext) GetParser() antlr.Parser { return s.parser }

func (s *LetBindingContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *LetBindingContext) AS() antlr.TerminalNode {
	return s.GetToken(PartiQLParserAS, 0)
}

func (s *LetBindingContext) SymbolPrimitive() ISymbolPrimitiveContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISymbolPrimitiveContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISymbolPrimitiveContext)
}

func (s *LetBindingContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LetBindingContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LetBindingContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterLetBinding(s)
	}
}

func (s *LetBindingContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitLetBinding(s)
	}
}

func (p *PartiQLParser) LetBinding() (localctx ILetBindingContext) {
	localctx = NewLetBindingContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 102, PartiQLParserRULE_letBinding)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(703)
		p.Expr()
	}
	{
		p.SetState(704)
		p.Match(PartiQLParserAS)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(705)
		p.SymbolPrimitive()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOrderByClauseContext is an interface to support dynamic dispatch.
type IOrderByClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ORDER() antlr.TerminalNode
	BY() antlr.TerminalNode
	AllOrderSortSpec() []IOrderSortSpecContext
	OrderSortSpec(i int) IOrderSortSpecContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsOrderByClauseContext differentiates from other interfaces.
	IsOrderByClauseContext()
}

type OrderByClauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOrderByClauseContext() *OrderByClauseContext {
	var p = new(OrderByClauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_orderByClause
	return p
}

func InitEmptyOrderByClauseContext(p *OrderByClauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_orderByClause
}

func (*OrderByClauseContext) IsOrderByClauseContext() {}

func NewOrderByClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OrderByClauseContext {
	var p = new(OrderByClauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_orderByClause

	return p
}

func (s *OrderByClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *OrderByClauseContext) ORDER() antlr.TerminalNode {
	return s.GetToken(PartiQLParserORDER, 0)
}

func (s *OrderByClauseContext) BY() antlr.TerminalNode {
	return s.GetToken(PartiQLParserBY, 0)
}

func (s *OrderByClauseContext) AllOrderSortSpec() []IOrderSortSpecContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IOrderSortSpecContext); ok {
			len++
		}
	}

	tst := make([]IOrderSortSpecContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IOrderSortSpecContext); ok {
			tst[i] = t.(IOrderSortSpecContext)
			i++
		}
	}

	return tst
}

func (s *OrderByClauseContext) OrderSortSpec(i int) IOrderSortSpecContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOrderSortSpecContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOrderSortSpecContext)
}

func (s *OrderByClauseContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PartiQLParserCOMMA)
}

func (s *OrderByClauseContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PartiQLParserCOMMA, i)
}

func (s *OrderByClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OrderByClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OrderByClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterOrderByClause(s)
	}
}

func (s *OrderByClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitOrderByClause(s)
	}
}

func (p *PartiQLParser) OrderByClause() (localctx IOrderByClauseContext) {
	localctx = NewOrderByClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 104, PartiQLParserRULE_orderByClause)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(707)
		p.Match(PartiQLParserORDER)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(708)
		p.Match(PartiQLParserBY)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(709)
		p.OrderSortSpec()
	}
	p.SetState(714)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 62, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(710)
				p.Match(PartiQLParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(711)
				p.OrderSortSpec()
			}

		}
		p.SetState(716)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 62, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOrderSortSpecContext is an interface to support dynamic dispatch.
type IOrderSortSpecContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetDir returns the dir token.
	GetDir() antlr.Token

	// GetNulls returns the nulls token.
	GetNulls() antlr.Token

	// SetDir sets the dir token.
	SetDir(antlr.Token)

	// SetNulls sets the nulls token.
	SetNulls(antlr.Token)

	// Getter signatures
	Expr() IExprContext
	NULLS() antlr.TerminalNode
	ASC() antlr.TerminalNode
	DESC() antlr.TerminalNode
	FIRST() antlr.TerminalNode
	LAST() antlr.TerminalNode

	// IsOrderSortSpecContext differentiates from other interfaces.
	IsOrderSortSpecContext()
}

type OrderSortSpecContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	dir    antlr.Token
	nulls  antlr.Token
}

func NewEmptyOrderSortSpecContext() *OrderSortSpecContext {
	var p = new(OrderSortSpecContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_orderSortSpec
	return p
}

func InitEmptyOrderSortSpecContext(p *OrderSortSpecContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_orderSortSpec
}

func (*OrderSortSpecContext) IsOrderSortSpecContext() {}

func NewOrderSortSpecContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OrderSortSpecContext {
	var p = new(OrderSortSpecContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_orderSortSpec

	return p
}

func (s *OrderSortSpecContext) GetParser() antlr.Parser { return s.parser }

func (s *OrderSortSpecContext) GetDir() antlr.Token { return s.dir }

func (s *OrderSortSpecContext) GetNulls() antlr.Token { return s.nulls }

func (s *OrderSortSpecContext) SetDir(v antlr.Token) { s.dir = v }

func (s *OrderSortSpecContext) SetNulls(v antlr.Token) { s.nulls = v }

func (s *OrderSortSpecContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *OrderSortSpecContext) NULLS() antlr.TerminalNode {
	return s.GetToken(PartiQLParserNULLS, 0)
}

func (s *OrderSortSpecContext) ASC() antlr.TerminalNode {
	return s.GetToken(PartiQLParserASC, 0)
}

func (s *OrderSortSpecContext) DESC() antlr.TerminalNode {
	return s.GetToken(PartiQLParserDESC, 0)
}

func (s *OrderSortSpecContext) FIRST() antlr.TerminalNode {
	return s.GetToken(PartiQLParserFIRST, 0)
}

func (s *OrderSortSpecContext) LAST() antlr.TerminalNode {
	return s.GetToken(PartiQLParserLAST, 0)
}

func (s *OrderSortSpecContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OrderSortSpecContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OrderSortSpecContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterOrderSortSpec(s)
	}
}

func (s *OrderSortSpecContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitOrderSortSpec(s)
	}
}

func (p *PartiQLParser) OrderSortSpec() (localctx IOrderSortSpecContext) {
	localctx = NewOrderSortSpecContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 106, PartiQLParserRULE_orderSortSpec)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(717)
		p.Expr()
	}
	p.SetState(719)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 63, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(718)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*OrderSortSpecContext).dir = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == PartiQLParserASC || _la == PartiQLParserDESC) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*OrderSortSpecContext).dir = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(723)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 64, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(721)
			p.Match(PartiQLParserNULLS)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(722)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*OrderSortSpecContext).nulls = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == PartiQLParserFIRST || _la == PartiQLParserLAST) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*OrderSortSpecContext).nulls = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IGroupClauseContext is an interface to support dynamic dispatch.
type IGroupClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	GROUP() antlr.TerminalNode
	BY() antlr.TerminalNode
	AllGroupKey() []IGroupKeyContext
	GroupKey(i int) IGroupKeyContext
	PARTIAL() antlr.TerminalNode
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode
	GroupAlias() IGroupAliasContext

	// IsGroupClauseContext differentiates from other interfaces.
	IsGroupClauseContext()
}

type GroupClauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGroupClauseContext() *GroupClauseContext {
	var p = new(GroupClauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_groupClause
	return p
}

func InitEmptyGroupClauseContext(p *GroupClauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_groupClause
}

func (*GroupClauseContext) IsGroupClauseContext() {}

func NewGroupClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GroupClauseContext {
	var p = new(GroupClauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_groupClause

	return p
}

func (s *GroupClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *GroupClauseContext) GROUP() antlr.TerminalNode {
	return s.GetToken(PartiQLParserGROUP, 0)
}

func (s *GroupClauseContext) BY() antlr.TerminalNode {
	return s.GetToken(PartiQLParserBY, 0)
}

func (s *GroupClauseContext) AllGroupKey() []IGroupKeyContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IGroupKeyContext); ok {
			len++
		}
	}

	tst := make([]IGroupKeyContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IGroupKeyContext); ok {
			tst[i] = t.(IGroupKeyContext)
			i++
		}
	}

	return tst
}

func (s *GroupClauseContext) GroupKey(i int) IGroupKeyContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGroupKeyContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGroupKeyContext)
}

func (s *GroupClauseContext) PARTIAL() antlr.TerminalNode {
	return s.GetToken(PartiQLParserPARTIAL, 0)
}

func (s *GroupClauseContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PartiQLParserCOMMA)
}

func (s *GroupClauseContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PartiQLParserCOMMA, i)
}

func (s *GroupClauseContext) GroupAlias() IGroupAliasContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGroupAliasContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGroupAliasContext)
}

func (s *GroupClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GroupClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GroupClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterGroupClause(s)
	}
}

func (s *GroupClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitGroupClause(s)
	}
}

func (p *PartiQLParser) GroupClause() (localctx IGroupClauseContext) {
	localctx = NewGroupClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 108, PartiQLParserRULE_groupClause)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(725)
		p.Match(PartiQLParserGROUP)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(727)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == PartiQLParserPARTIAL {
		{
			p.SetState(726)
			p.Match(PartiQLParserPARTIAL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(729)
		p.Match(PartiQLParserBY)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(730)
		p.GroupKey()
	}
	p.SetState(735)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 66, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(731)
				p.Match(PartiQLParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(732)
				p.GroupKey()
			}

		}
		p.SetState(737)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 66, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(739)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 67, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(738)
			p.GroupAlias()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IGroupAliasContext is an interface to support dynamic dispatch.
type IGroupAliasContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	GROUP() antlr.TerminalNode
	AS() antlr.TerminalNode
	SymbolPrimitive() ISymbolPrimitiveContext

	// IsGroupAliasContext differentiates from other interfaces.
	IsGroupAliasContext()
}

type GroupAliasContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGroupAliasContext() *GroupAliasContext {
	var p = new(GroupAliasContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_groupAlias
	return p
}

func InitEmptyGroupAliasContext(p *GroupAliasContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_groupAlias
}

func (*GroupAliasContext) IsGroupAliasContext() {}

func NewGroupAliasContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GroupAliasContext {
	var p = new(GroupAliasContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_groupAlias

	return p
}

func (s *GroupAliasContext) GetParser() antlr.Parser { return s.parser }

func (s *GroupAliasContext) GROUP() antlr.TerminalNode {
	return s.GetToken(PartiQLParserGROUP, 0)
}

func (s *GroupAliasContext) AS() antlr.TerminalNode {
	return s.GetToken(PartiQLParserAS, 0)
}

func (s *GroupAliasContext) SymbolPrimitive() ISymbolPrimitiveContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISymbolPrimitiveContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISymbolPrimitiveContext)
}

func (s *GroupAliasContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GroupAliasContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GroupAliasContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterGroupAlias(s)
	}
}

func (s *GroupAliasContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitGroupAlias(s)
	}
}

func (p *PartiQLParser) GroupAlias() (localctx IGroupAliasContext) {
	localctx = NewGroupAliasContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 110, PartiQLParserRULE_groupAlias)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(741)
		p.Match(PartiQLParserGROUP)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(742)
		p.Match(PartiQLParserAS)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(743)
		p.SymbolPrimitive()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IGroupKeyContext is an interface to support dynamic dispatch.
type IGroupKeyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetKey returns the key rule contexts.
	GetKey() IExprSelectContext

	// SetKey sets the key rule contexts.
	SetKey(IExprSelectContext)

	// Getter signatures
	ExprSelect() IExprSelectContext
	AS() antlr.TerminalNode
	SymbolPrimitive() ISymbolPrimitiveContext

	// IsGroupKeyContext differentiates from other interfaces.
	IsGroupKeyContext()
}

type GroupKeyContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	key    IExprSelectContext
}

func NewEmptyGroupKeyContext() *GroupKeyContext {
	var p = new(GroupKeyContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_groupKey
	return p
}

func InitEmptyGroupKeyContext(p *GroupKeyContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_groupKey
}

func (*GroupKeyContext) IsGroupKeyContext() {}

func NewGroupKeyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GroupKeyContext {
	var p = new(GroupKeyContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_groupKey

	return p
}

func (s *GroupKeyContext) GetParser() antlr.Parser { return s.parser }

func (s *GroupKeyContext) GetKey() IExprSelectContext { return s.key }

func (s *GroupKeyContext) SetKey(v IExprSelectContext) { s.key = v }

func (s *GroupKeyContext) ExprSelect() IExprSelectContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprSelectContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprSelectContext)
}

func (s *GroupKeyContext) AS() antlr.TerminalNode {
	return s.GetToken(PartiQLParserAS, 0)
}

func (s *GroupKeyContext) SymbolPrimitive() ISymbolPrimitiveContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISymbolPrimitiveContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISymbolPrimitiveContext)
}

func (s *GroupKeyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GroupKeyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GroupKeyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterGroupKey(s)
	}
}

func (s *GroupKeyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitGroupKey(s)
	}
}

func (p *PartiQLParser) GroupKey() (localctx IGroupKeyContext) {
	localctx = NewGroupKeyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 112, PartiQLParserRULE_groupKey)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(745)

		var _x = p.ExprSelect()

		localctx.(*GroupKeyContext).key = _x
	}
	p.SetState(748)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 68, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(746)
			p.Match(PartiQLParserAS)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(747)
			p.SymbolPrimitive()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOverContext is an interface to support dynamic dispatch.
type IOverContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	OVER() antlr.TerminalNode
	PAREN_LEFT() antlr.TerminalNode
	PAREN_RIGHT() antlr.TerminalNode
	WindowPartitionList() IWindowPartitionListContext
	WindowSortSpecList() IWindowSortSpecListContext

	// IsOverContext differentiates from other interfaces.
	IsOverContext()
}

type OverContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOverContext() *OverContext {
	var p = new(OverContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_over
	return p
}

func InitEmptyOverContext(p *OverContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_over
}

func (*OverContext) IsOverContext() {}

func NewOverContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OverContext {
	var p = new(OverContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_over

	return p
}

func (s *OverContext) GetParser() antlr.Parser { return s.parser }

func (s *OverContext) OVER() antlr.TerminalNode {
	return s.GetToken(PartiQLParserOVER, 0)
}

func (s *OverContext) PAREN_LEFT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserPAREN_LEFT, 0)
}

func (s *OverContext) PAREN_RIGHT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserPAREN_RIGHT, 0)
}

func (s *OverContext) WindowPartitionList() IWindowPartitionListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWindowPartitionListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWindowPartitionListContext)
}

func (s *OverContext) WindowSortSpecList() IWindowSortSpecListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWindowSortSpecListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWindowSortSpecListContext)
}

func (s *OverContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OverContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OverContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterOver(s)
	}
}

func (s *OverContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitOver(s)
	}
}

func (p *PartiQLParser) Over() (localctx IOverContext) {
	localctx = NewOverContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 114, PartiQLParserRULE_over)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(750)
		p.Match(PartiQLParserOVER)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(751)
		p.Match(PartiQLParserPAREN_LEFT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(753)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == PartiQLParserPARTITION {
		{
			p.SetState(752)
			p.WindowPartitionList()
		}

	}
	p.SetState(756)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == PartiQLParserORDER {
		{
			p.SetState(755)
			p.WindowSortSpecList()
		}

	}
	{
		p.SetState(758)
		p.Match(PartiQLParserPAREN_RIGHT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IWindowPartitionListContext is an interface to support dynamic dispatch.
type IWindowPartitionListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	PARTITION() antlr.TerminalNode
	BY() antlr.TerminalNode
	AllExpr() []IExprContext
	Expr(i int) IExprContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsWindowPartitionListContext differentiates from other interfaces.
	IsWindowPartitionListContext()
}

type WindowPartitionListContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWindowPartitionListContext() *WindowPartitionListContext {
	var p = new(WindowPartitionListContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_windowPartitionList
	return p
}

func InitEmptyWindowPartitionListContext(p *WindowPartitionListContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_windowPartitionList
}

func (*WindowPartitionListContext) IsWindowPartitionListContext() {}

func NewWindowPartitionListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WindowPartitionListContext {
	var p = new(WindowPartitionListContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_windowPartitionList

	return p
}

func (s *WindowPartitionListContext) GetParser() antlr.Parser { return s.parser }

func (s *WindowPartitionListContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(PartiQLParserPARTITION, 0)
}

func (s *WindowPartitionListContext) BY() antlr.TerminalNode {
	return s.GetToken(PartiQLParserBY, 0)
}

func (s *WindowPartitionListContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *WindowPartitionListContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *WindowPartitionListContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PartiQLParserCOMMA)
}

func (s *WindowPartitionListContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PartiQLParserCOMMA, i)
}

func (s *WindowPartitionListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WindowPartitionListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WindowPartitionListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterWindowPartitionList(s)
	}
}

func (s *WindowPartitionListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitWindowPartitionList(s)
	}
}

func (p *PartiQLParser) WindowPartitionList() (localctx IWindowPartitionListContext) {
	localctx = NewWindowPartitionListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 116, PartiQLParserRULE_windowPartitionList)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(760)
		p.Match(PartiQLParserPARTITION)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(761)
		p.Match(PartiQLParserBY)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(762)
		p.Expr()
	}
	p.SetState(767)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == PartiQLParserCOMMA {
		{
			p.SetState(763)
			p.Match(PartiQLParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(764)
			p.Expr()
		}

		p.SetState(769)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IWindowSortSpecListContext is an interface to support dynamic dispatch.
type IWindowSortSpecListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ORDER() antlr.TerminalNode
	BY() antlr.TerminalNode
	AllOrderSortSpec() []IOrderSortSpecContext
	OrderSortSpec(i int) IOrderSortSpecContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsWindowSortSpecListContext differentiates from other interfaces.
	IsWindowSortSpecListContext()
}

type WindowSortSpecListContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWindowSortSpecListContext() *WindowSortSpecListContext {
	var p = new(WindowSortSpecListContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_windowSortSpecList
	return p
}

func InitEmptyWindowSortSpecListContext(p *WindowSortSpecListContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_windowSortSpecList
}

func (*WindowSortSpecListContext) IsWindowSortSpecListContext() {}

func NewWindowSortSpecListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WindowSortSpecListContext {
	var p = new(WindowSortSpecListContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_windowSortSpecList

	return p
}

func (s *WindowSortSpecListContext) GetParser() antlr.Parser { return s.parser }

func (s *WindowSortSpecListContext) ORDER() antlr.TerminalNode {
	return s.GetToken(PartiQLParserORDER, 0)
}

func (s *WindowSortSpecListContext) BY() antlr.TerminalNode {
	return s.GetToken(PartiQLParserBY, 0)
}

func (s *WindowSortSpecListContext) AllOrderSortSpec() []IOrderSortSpecContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IOrderSortSpecContext); ok {
			len++
		}
	}

	tst := make([]IOrderSortSpecContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IOrderSortSpecContext); ok {
			tst[i] = t.(IOrderSortSpecContext)
			i++
		}
	}

	return tst
}

func (s *WindowSortSpecListContext) OrderSortSpec(i int) IOrderSortSpecContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOrderSortSpecContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOrderSortSpecContext)
}

func (s *WindowSortSpecListContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PartiQLParserCOMMA)
}

func (s *WindowSortSpecListContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PartiQLParserCOMMA, i)
}

func (s *WindowSortSpecListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WindowSortSpecListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WindowSortSpecListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterWindowSortSpecList(s)
	}
}

func (s *WindowSortSpecListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitWindowSortSpecList(s)
	}
}

func (p *PartiQLParser) WindowSortSpecList() (localctx IWindowSortSpecListContext) {
	localctx = NewWindowSortSpecListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 118, PartiQLParserRULE_windowSortSpecList)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(770)
		p.Match(PartiQLParserORDER)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(771)
		p.Match(PartiQLParserBY)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(772)
		p.OrderSortSpec()
	}
	p.SetState(777)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == PartiQLParserCOMMA {
		{
			p.SetState(773)
			p.Match(PartiQLParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(774)
			p.OrderSortSpec()
		}

		p.SetState(779)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IHavingClauseContext is an interface to support dynamic dispatch.
type IHavingClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetArg returns the arg rule contexts.
	GetArg() IExprSelectContext

	// SetArg sets the arg rule contexts.
	SetArg(IExprSelectContext)

	// Getter signatures
	HAVING() antlr.TerminalNode
	ExprSelect() IExprSelectContext

	// IsHavingClauseContext differentiates from other interfaces.
	IsHavingClauseContext()
}

type HavingClauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	arg    IExprSelectContext
}

func NewEmptyHavingClauseContext() *HavingClauseContext {
	var p = new(HavingClauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_havingClause
	return p
}

func InitEmptyHavingClauseContext(p *HavingClauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_havingClause
}

func (*HavingClauseContext) IsHavingClauseContext() {}

func NewHavingClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *HavingClauseContext {
	var p = new(HavingClauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_havingClause

	return p
}

func (s *HavingClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *HavingClauseContext) GetArg() IExprSelectContext { return s.arg }

func (s *HavingClauseContext) SetArg(v IExprSelectContext) { s.arg = v }

func (s *HavingClauseContext) HAVING() antlr.TerminalNode {
	return s.GetToken(PartiQLParserHAVING, 0)
}

func (s *HavingClauseContext) ExprSelect() IExprSelectContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprSelectContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprSelectContext)
}

func (s *HavingClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *HavingClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *HavingClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterHavingClause(s)
	}
}

func (s *HavingClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitHavingClause(s)
	}
}

func (p *PartiQLParser) HavingClause() (localctx IHavingClauseContext) {
	localctx = NewHavingClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 120, PartiQLParserRULE_havingClause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(780)
		p.Match(PartiQLParserHAVING)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(781)

		var _x = p.ExprSelect()

		localctx.(*HavingClauseContext).arg = _x
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExcludeClauseContext is an interface to support dynamic dispatch.
type IExcludeClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	EXCLUDE() antlr.TerminalNode
	AllExcludeExpr() []IExcludeExprContext
	ExcludeExpr(i int) IExcludeExprContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsExcludeClauseContext differentiates from other interfaces.
	IsExcludeClauseContext()
}

type ExcludeClauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExcludeClauseContext() *ExcludeClauseContext {
	var p = new(ExcludeClauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_excludeClause
	return p
}

func InitEmptyExcludeClauseContext(p *ExcludeClauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_excludeClause
}

func (*ExcludeClauseContext) IsExcludeClauseContext() {}

func NewExcludeClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExcludeClauseContext {
	var p = new(ExcludeClauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_excludeClause

	return p
}

func (s *ExcludeClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *ExcludeClauseContext) EXCLUDE() antlr.TerminalNode {
	return s.GetToken(PartiQLParserEXCLUDE, 0)
}

func (s *ExcludeClauseContext) AllExcludeExpr() []IExcludeExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExcludeExprContext); ok {
			len++
		}
	}

	tst := make([]IExcludeExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExcludeExprContext); ok {
			tst[i] = t.(IExcludeExprContext)
			i++
		}
	}

	return tst
}

func (s *ExcludeClauseContext) ExcludeExpr(i int) IExcludeExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExcludeExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExcludeExprContext)
}

func (s *ExcludeClauseContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PartiQLParserCOMMA)
}

func (s *ExcludeClauseContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PartiQLParserCOMMA, i)
}

func (s *ExcludeClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExcludeClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExcludeClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterExcludeClause(s)
	}
}

func (s *ExcludeClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitExcludeClause(s)
	}
}

func (p *PartiQLParser) ExcludeClause() (localctx IExcludeClauseContext) {
	localctx = NewExcludeClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 122, PartiQLParserRULE_excludeClause)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(783)
		p.Match(PartiQLParserEXCLUDE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(784)
		p.ExcludeExpr()
	}
	p.SetState(789)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == PartiQLParserCOMMA {
		{
			p.SetState(785)
			p.Match(PartiQLParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(786)
			p.ExcludeExpr()
		}

		p.SetState(791)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExcludeExprContext is an interface to support dynamic dispatch.
type IExcludeExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SymbolPrimitive() ISymbolPrimitiveContext
	AllExcludeExprSteps() []IExcludeExprStepsContext
	ExcludeExprSteps(i int) IExcludeExprStepsContext

	// IsExcludeExprContext differentiates from other interfaces.
	IsExcludeExprContext()
}

type ExcludeExprContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExcludeExprContext() *ExcludeExprContext {
	var p = new(ExcludeExprContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_excludeExpr
	return p
}

func InitEmptyExcludeExprContext(p *ExcludeExprContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_excludeExpr
}

func (*ExcludeExprContext) IsExcludeExprContext() {}

func NewExcludeExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExcludeExprContext {
	var p = new(ExcludeExprContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_excludeExpr

	return p
}

func (s *ExcludeExprContext) GetParser() antlr.Parser { return s.parser }

func (s *ExcludeExprContext) SymbolPrimitive() ISymbolPrimitiveContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISymbolPrimitiveContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISymbolPrimitiveContext)
}

func (s *ExcludeExprContext) AllExcludeExprSteps() []IExcludeExprStepsContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExcludeExprStepsContext); ok {
			len++
		}
	}

	tst := make([]IExcludeExprStepsContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExcludeExprStepsContext); ok {
			tst[i] = t.(IExcludeExprStepsContext)
			i++
		}
	}

	return tst
}

func (s *ExcludeExprContext) ExcludeExprSteps(i int) IExcludeExprStepsContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExcludeExprStepsContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExcludeExprStepsContext)
}

func (s *ExcludeExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExcludeExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExcludeExprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterExcludeExpr(s)
	}
}

func (s *ExcludeExprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitExcludeExpr(s)
	}
}

func (p *PartiQLParser) ExcludeExpr() (localctx IExcludeExprContext) {
	localctx = NewExcludeExprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 124, PartiQLParserRULE_excludeExpr)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(792)
		p.SymbolPrimitive()
	}
	p.SetState(794)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == PartiQLParserBRACKET_LEFT || _la == PartiQLParserPERIOD {
		{
			p.SetState(793)
			p.ExcludeExprSteps()
		}

		p.SetState(796)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExcludeExprStepsContext is an interface to support dynamic dispatch.
type IExcludeExprStepsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsExcludeExprStepsContext differentiates from other interfaces.
	IsExcludeExprStepsContext()
}

type ExcludeExprStepsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExcludeExprStepsContext() *ExcludeExprStepsContext {
	var p = new(ExcludeExprStepsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_excludeExprSteps
	return p
}

func InitEmptyExcludeExprStepsContext(p *ExcludeExprStepsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_excludeExprSteps
}

func (*ExcludeExprStepsContext) IsExcludeExprStepsContext() {}

func NewExcludeExprStepsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExcludeExprStepsContext {
	var p = new(ExcludeExprStepsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_excludeExprSteps

	return p
}

func (s *ExcludeExprStepsContext) GetParser() antlr.Parser { return s.parser }

func (s *ExcludeExprStepsContext) CopyAll(ctx *ExcludeExprStepsContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *ExcludeExprStepsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExcludeExprStepsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type ExcludeExprTupleAttrContext struct {
	ExcludeExprStepsContext
}

func NewExcludeExprTupleAttrContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExcludeExprTupleAttrContext {
	var p = new(ExcludeExprTupleAttrContext)

	InitEmptyExcludeExprStepsContext(&p.ExcludeExprStepsContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExcludeExprStepsContext))

	return p
}

func (s *ExcludeExprTupleAttrContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExcludeExprTupleAttrContext) PERIOD() antlr.TerminalNode {
	return s.GetToken(PartiQLParserPERIOD, 0)
}

func (s *ExcludeExprTupleAttrContext) SymbolPrimitive() ISymbolPrimitiveContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISymbolPrimitiveContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISymbolPrimitiveContext)
}

func (s *ExcludeExprTupleAttrContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterExcludeExprTupleAttr(s)
	}
}

func (s *ExcludeExprTupleAttrContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitExcludeExprTupleAttr(s)
	}
}

type ExcludeExprTupleWildcardContext struct {
	ExcludeExprStepsContext
}

func NewExcludeExprTupleWildcardContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExcludeExprTupleWildcardContext {
	var p = new(ExcludeExprTupleWildcardContext)

	InitEmptyExcludeExprStepsContext(&p.ExcludeExprStepsContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExcludeExprStepsContext))

	return p
}

func (s *ExcludeExprTupleWildcardContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExcludeExprTupleWildcardContext) PERIOD() antlr.TerminalNode {
	return s.GetToken(PartiQLParserPERIOD, 0)
}

func (s *ExcludeExprTupleWildcardContext) ASTERISK() antlr.TerminalNode {
	return s.GetToken(PartiQLParserASTERISK, 0)
}

func (s *ExcludeExprTupleWildcardContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterExcludeExprTupleWildcard(s)
	}
}

func (s *ExcludeExprTupleWildcardContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitExcludeExprTupleWildcard(s)
	}
}

type ExcludeExprCollectionWildcardContext struct {
	ExcludeExprStepsContext
}

func NewExcludeExprCollectionWildcardContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExcludeExprCollectionWildcardContext {
	var p = new(ExcludeExprCollectionWildcardContext)

	InitEmptyExcludeExprStepsContext(&p.ExcludeExprStepsContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExcludeExprStepsContext))

	return p
}

func (s *ExcludeExprCollectionWildcardContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExcludeExprCollectionWildcardContext) BRACKET_LEFT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserBRACKET_LEFT, 0)
}

func (s *ExcludeExprCollectionWildcardContext) ASTERISK() antlr.TerminalNode {
	return s.GetToken(PartiQLParserASTERISK, 0)
}

func (s *ExcludeExprCollectionWildcardContext) BRACKET_RIGHT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserBRACKET_RIGHT, 0)
}

func (s *ExcludeExprCollectionWildcardContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterExcludeExprCollectionWildcard(s)
	}
}

func (s *ExcludeExprCollectionWildcardContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitExcludeExprCollectionWildcard(s)
	}
}

type ExcludeExprCollectionAttrContext struct {
	ExcludeExprStepsContext
	attr antlr.Token
}

func NewExcludeExprCollectionAttrContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExcludeExprCollectionAttrContext {
	var p = new(ExcludeExprCollectionAttrContext)

	InitEmptyExcludeExprStepsContext(&p.ExcludeExprStepsContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExcludeExprStepsContext))

	return p
}

func (s *ExcludeExprCollectionAttrContext) GetAttr() antlr.Token { return s.attr }

func (s *ExcludeExprCollectionAttrContext) SetAttr(v antlr.Token) { s.attr = v }

func (s *ExcludeExprCollectionAttrContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExcludeExprCollectionAttrContext) BRACKET_LEFT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserBRACKET_LEFT, 0)
}

func (s *ExcludeExprCollectionAttrContext) BRACKET_RIGHT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserBRACKET_RIGHT, 0)
}

func (s *ExcludeExprCollectionAttrContext) LITERAL_STRING() antlr.TerminalNode {
	return s.GetToken(PartiQLParserLITERAL_STRING, 0)
}

func (s *ExcludeExprCollectionAttrContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterExcludeExprCollectionAttr(s)
	}
}

func (s *ExcludeExprCollectionAttrContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitExcludeExprCollectionAttr(s)
	}
}

type ExcludeExprCollectionIndexContext struct {
	ExcludeExprStepsContext
	index antlr.Token
}

func NewExcludeExprCollectionIndexContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExcludeExprCollectionIndexContext {
	var p = new(ExcludeExprCollectionIndexContext)

	InitEmptyExcludeExprStepsContext(&p.ExcludeExprStepsContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExcludeExprStepsContext))

	return p
}

func (s *ExcludeExprCollectionIndexContext) GetIndex() antlr.Token { return s.index }

func (s *ExcludeExprCollectionIndexContext) SetIndex(v antlr.Token) { s.index = v }

func (s *ExcludeExprCollectionIndexContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExcludeExprCollectionIndexContext) BRACKET_LEFT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserBRACKET_LEFT, 0)
}

func (s *ExcludeExprCollectionIndexContext) BRACKET_RIGHT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserBRACKET_RIGHT, 0)
}

func (s *ExcludeExprCollectionIndexContext) LITERAL_INTEGER() antlr.TerminalNode {
	return s.GetToken(PartiQLParserLITERAL_INTEGER, 0)
}

func (s *ExcludeExprCollectionIndexContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterExcludeExprCollectionIndex(s)
	}
}

func (s *ExcludeExprCollectionIndexContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitExcludeExprCollectionIndex(s)
	}
}

func (p *PartiQLParser) ExcludeExprSteps() (localctx IExcludeExprStepsContext) {
	localctx = NewExcludeExprStepsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 126, PartiQLParserRULE_excludeExprSteps)
	p.SetState(811)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 75, p.GetParserRuleContext()) {
	case 1:
		localctx = NewExcludeExprTupleAttrContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(798)
			p.Match(PartiQLParserPERIOD)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(799)
			p.SymbolPrimitive()
		}

	case 2:
		localctx = NewExcludeExprCollectionAttrContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(800)
			p.Match(PartiQLParserBRACKET_LEFT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(801)

			var _m = p.Match(PartiQLParserLITERAL_STRING)

			localctx.(*ExcludeExprCollectionAttrContext).attr = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(802)
			p.Match(PartiQLParserBRACKET_RIGHT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 3:
		localctx = NewExcludeExprCollectionIndexContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(803)
			p.Match(PartiQLParserBRACKET_LEFT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(804)

			var _m = p.Match(PartiQLParserLITERAL_INTEGER)

			localctx.(*ExcludeExprCollectionIndexContext).index = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(805)
			p.Match(PartiQLParserBRACKET_RIGHT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 4:
		localctx = NewExcludeExprCollectionWildcardContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(806)
			p.Match(PartiQLParserBRACKET_LEFT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(807)
			p.Match(PartiQLParserASTERISK)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(808)
			p.Match(PartiQLParserBRACKET_RIGHT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 5:
		localctx = NewExcludeExprTupleWildcardContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(809)
			p.Match(PartiQLParserPERIOD)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(810)
			p.Match(PartiQLParserASTERISK)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFromClauseContext is an interface to support dynamic dispatch.
type IFromClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	FROM() antlr.TerminalNode
	TableReference() ITableReferenceContext

	// IsFromClauseContext differentiates from other interfaces.
	IsFromClauseContext()
}

type FromClauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFromClauseContext() *FromClauseContext {
	var p = new(FromClauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_fromClause
	return p
}

func InitEmptyFromClauseContext(p *FromClauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_fromClause
}

func (*FromClauseContext) IsFromClauseContext() {}

func NewFromClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FromClauseContext {
	var p = new(FromClauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_fromClause

	return p
}

func (s *FromClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *FromClauseContext) FROM() antlr.TerminalNode {
	return s.GetToken(PartiQLParserFROM, 0)
}

func (s *FromClauseContext) TableReference() ITableReferenceContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITableReferenceContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITableReferenceContext)
}

func (s *FromClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FromClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FromClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterFromClause(s)
	}
}

func (s *FromClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitFromClause(s)
	}
}

func (p *PartiQLParser) FromClause() (localctx IFromClauseContext) {
	localctx = NewFromClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 128, PartiQLParserRULE_fromClause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(813)
		p.Match(PartiQLParserFROM)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(814)
		p.tableReference(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IWhereClauseSelectContext is an interface to support dynamic dispatch.
type IWhereClauseSelectContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetArg returns the arg rule contexts.
	GetArg() IExprSelectContext

	// SetArg sets the arg rule contexts.
	SetArg(IExprSelectContext)

	// Getter signatures
	WHERE() antlr.TerminalNode
	ExprSelect() IExprSelectContext

	// IsWhereClauseSelectContext differentiates from other interfaces.
	IsWhereClauseSelectContext()
}

type WhereClauseSelectContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	arg    IExprSelectContext
}

func NewEmptyWhereClauseSelectContext() *WhereClauseSelectContext {
	var p = new(WhereClauseSelectContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_whereClauseSelect
	return p
}

func InitEmptyWhereClauseSelectContext(p *WhereClauseSelectContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_whereClauseSelect
}

func (*WhereClauseSelectContext) IsWhereClauseSelectContext() {}

func NewWhereClauseSelectContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WhereClauseSelectContext {
	var p = new(WhereClauseSelectContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_whereClauseSelect

	return p
}

func (s *WhereClauseSelectContext) GetParser() antlr.Parser { return s.parser }

func (s *WhereClauseSelectContext) GetArg() IExprSelectContext { return s.arg }

func (s *WhereClauseSelectContext) SetArg(v IExprSelectContext) { s.arg = v }

func (s *WhereClauseSelectContext) WHERE() antlr.TerminalNode {
	return s.GetToken(PartiQLParserWHERE, 0)
}

func (s *WhereClauseSelectContext) ExprSelect() IExprSelectContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprSelectContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprSelectContext)
}

func (s *WhereClauseSelectContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WhereClauseSelectContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WhereClauseSelectContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterWhereClauseSelect(s)
	}
}

func (s *WhereClauseSelectContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitWhereClauseSelect(s)
	}
}

func (p *PartiQLParser) WhereClauseSelect() (localctx IWhereClauseSelectContext) {
	localctx = NewWhereClauseSelectContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 130, PartiQLParserRULE_whereClauseSelect)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(816)
		p.Match(PartiQLParserWHERE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(817)

		var _x = p.ExprSelect()

		localctx.(*WhereClauseSelectContext).arg = _x
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOffsetByClauseContext is an interface to support dynamic dispatch.
type IOffsetByClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetArg returns the arg rule contexts.
	GetArg() IExprSelectContext

	// SetArg sets the arg rule contexts.
	SetArg(IExprSelectContext)

	// Getter signatures
	OFFSET() antlr.TerminalNode
	ExprSelect() IExprSelectContext

	// IsOffsetByClauseContext differentiates from other interfaces.
	IsOffsetByClauseContext()
}

type OffsetByClauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	arg    IExprSelectContext
}

func NewEmptyOffsetByClauseContext() *OffsetByClauseContext {
	var p = new(OffsetByClauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_offsetByClause
	return p
}

func InitEmptyOffsetByClauseContext(p *OffsetByClauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_offsetByClause
}

func (*OffsetByClauseContext) IsOffsetByClauseContext() {}

func NewOffsetByClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OffsetByClauseContext {
	var p = new(OffsetByClauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_offsetByClause

	return p
}

func (s *OffsetByClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *OffsetByClauseContext) GetArg() IExprSelectContext { return s.arg }

func (s *OffsetByClauseContext) SetArg(v IExprSelectContext) { s.arg = v }

func (s *OffsetByClauseContext) OFFSET() antlr.TerminalNode {
	return s.GetToken(PartiQLParserOFFSET, 0)
}

func (s *OffsetByClauseContext) ExprSelect() IExprSelectContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprSelectContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprSelectContext)
}

func (s *OffsetByClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OffsetByClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OffsetByClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterOffsetByClause(s)
	}
}

func (s *OffsetByClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitOffsetByClause(s)
	}
}

func (p *PartiQLParser) OffsetByClause() (localctx IOffsetByClauseContext) {
	localctx = NewOffsetByClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 132, PartiQLParserRULE_offsetByClause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(819)
		p.Match(PartiQLParserOFFSET)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(820)

		var _x = p.ExprSelect()

		localctx.(*OffsetByClauseContext).arg = _x
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ILimitClauseContext is an interface to support dynamic dispatch.
type ILimitClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetArg returns the arg rule contexts.
	GetArg() IExprSelectContext

	// SetArg sets the arg rule contexts.
	SetArg(IExprSelectContext)

	// Getter signatures
	LIMIT() antlr.TerminalNode
	ExprSelect() IExprSelectContext

	// IsLimitClauseContext differentiates from other interfaces.
	IsLimitClauseContext()
}

type LimitClauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	arg    IExprSelectContext
}

func NewEmptyLimitClauseContext() *LimitClauseContext {
	var p = new(LimitClauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_limitClause
	return p
}

func InitEmptyLimitClauseContext(p *LimitClauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_limitClause
}

func (*LimitClauseContext) IsLimitClauseContext() {}

func NewLimitClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LimitClauseContext {
	var p = new(LimitClauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_limitClause

	return p
}

func (s *LimitClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *LimitClauseContext) GetArg() IExprSelectContext { return s.arg }

func (s *LimitClauseContext) SetArg(v IExprSelectContext) { s.arg = v }

func (s *LimitClauseContext) LIMIT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserLIMIT, 0)
}

func (s *LimitClauseContext) ExprSelect() IExprSelectContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprSelectContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprSelectContext)
}

func (s *LimitClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LimitClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LimitClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterLimitClause(s)
	}
}

func (s *LimitClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitLimitClause(s)
	}
}

func (p *PartiQLParser) LimitClause() (localctx ILimitClauseContext) {
	localctx = NewLimitClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 134, PartiQLParserRULE_limitClause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(822)
		p.Match(PartiQLParserLIMIT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(823)

		var _x = p.ExprSelect()

		localctx.(*LimitClauseContext).arg = _x
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IGpmlPatternContext is an interface to support dynamic dispatch.
type IGpmlPatternContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetSelector returns the selector rule contexts.
	GetSelector() IMatchSelectorContext

	// SetSelector sets the selector rule contexts.
	SetSelector(IMatchSelectorContext)

	// Getter signatures
	MatchPattern() IMatchPatternContext
	MatchSelector() IMatchSelectorContext

	// IsGpmlPatternContext differentiates from other interfaces.
	IsGpmlPatternContext()
}

type GpmlPatternContext struct {
	antlr.BaseParserRuleContext
	parser   antlr.Parser
	selector IMatchSelectorContext
}

func NewEmptyGpmlPatternContext() *GpmlPatternContext {
	var p = new(GpmlPatternContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_gpmlPattern
	return p
}

func InitEmptyGpmlPatternContext(p *GpmlPatternContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_gpmlPattern
}

func (*GpmlPatternContext) IsGpmlPatternContext() {}

func NewGpmlPatternContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GpmlPatternContext {
	var p = new(GpmlPatternContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_gpmlPattern

	return p
}

func (s *GpmlPatternContext) GetParser() antlr.Parser { return s.parser }

func (s *GpmlPatternContext) GetSelector() IMatchSelectorContext { return s.selector }

func (s *GpmlPatternContext) SetSelector(v IMatchSelectorContext) { s.selector = v }

func (s *GpmlPatternContext) MatchPattern() IMatchPatternContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMatchPatternContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMatchPatternContext)
}

func (s *GpmlPatternContext) MatchSelector() IMatchSelectorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMatchSelectorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMatchSelectorContext)
}

func (s *GpmlPatternContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GpmlPatternContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GpmlPatternContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterGpmlPattern(s)
	}
}

func (s *GpmlPatternContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitGpmlPattern(s)
	}
}

func (p *PartiQLParser) GpmlPattern() (localctx IGpmlPatternContext) {
	localctx = NewGpmlPatternContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 136, PartiQLParserRULE_gpmlPattern)
	p.EnterOuterAlt(localctx, 1)
	p.SetState(826)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 76, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(825)

			var _x = p.MatchSelector()

			localctx.(*GpmlPatternContext).selector = _x
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	{
		p.SetState(828)
		p.MatchPattern()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IGpmlPatternListContext is an interface to support dynamic dispatch.
type IGpmlPatternListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetSelector returns the selector rule contexts.
	GetSelector() IMatchSelectorContext

	// SetSelector sets the selector rule contexts.
	SetSelector(IMatchSelectorContext)

	// Getter signatures
	AllMatchPattern() []IMatchPatternContext
	MatchPattern(i int) IMatchPatternContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode
	MatchSelector() IMatchSelectorContext

	// IsGpmlPatternListContext differentiates from other interfaces.
	IsGpmlPatternListContext()
}

type GpmlPatternListContext struct {
	antlr.BaseParserRuleContext
	parser   antlr.Parser
	selector IMatchSelectorContext
}

func NewEmptyGpmlPatternListContext() *GpmlPatternListContext {
	var p = new(GpmlPatternListContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_gpmlPatternList
	return p
}

func InitEmptyGpmlPatternListContext(p *GpmlPatternListContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_gpmlPatternList
}

func (*GpmlPatternListContext) IsGpmlPatternListContext() {}

func NewGpmlPatternListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GpmlPatternListContext {
	var p = new(GpmlPatternListContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_gpmlPatternList

	return p
}

func (s *GpmlPatternListContext) GetParser() antlr.Parser { return s.parser }

func (s *GpmlPatternListContext) GetSelector() IMatchSelectorContext { return s.selector }

func (s *GpmlPatternListContext) SetSelector(v IMatchSelectorContext) { s.selector = v }

func (s *GpmlPatternListContext) AllMatchPattern() []IMatchPatternContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IMatchPatternContext); ok {
			len++
		}
	}

	tst := make([]IMatchPatternContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IMatchPatternContext); ok {
			tst[i] = t.(IMatchPatternContext)
			i++
		}
	}

	return tst
}

func (s *GpmlPatternListContext) MatchPattern(i int) IMatchPatternContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMatchPatternContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMatchPatternContext)
}

func (s *GpmlPatternListContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PartiQLParserCOMMA)
}

func (s *GpmlPatternListContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PartiQLParserCOMMA, i)
}

func (s *GpmlPatternListContext) MatchSelector() IMatchSelectorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMatchSelectorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMatchSelectorContext)
}

func (s *GpmlPatternListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GpmlPatternListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GpmlPatternListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterGpmlPatternList(s)
	}
}

func (s *GpmlPatternListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitGpmlPatternList(s)
	}
}

func (p *PartiQLParser) GpmlPatternList() (localctx IGpmlPatternListContext) {
	localctx = NewGpmlPatternListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 138, PartiQLParserRULE_gpmlPatternList)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(831)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == PartiQLParserALL || _la == PartiQLParserANY || _la == PartiQLParserSHORTEST {
		{
			p.SetState(830)

			var _x = p.MatchSelector()

			localctx.(*GpmlPatternListContext).selector = _x
		}

	}
	{
		p.SetState(833)
		p.MatchPattern()
	}
	p.SetState(838)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == PartiQLParserCOMMA {
		{
			p.SetState(834)
			p.Match(PartiQLParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(835)
			p.MatchPattern()
		}

		p.SetState(840)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IMatchPatternContext is an interface to support dynamic dispatch.
type IMatchPatternContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetRestrictor returns the restrictor rule contexts.
	GetRestrictor() IPatternRestrictorContext

	// GetVariable returns the variable rule contexts.
	GetVariable() IPatternPathVariableContext

	// SetRestrictor sets the restrictor rule contexts.
	SetRestrictor(IPatternRestrictorContext)

	// SetVariable sets the variable rule contexts.
	SetVariable(IPatternPathVariableContext)

	// Getter signatures
	AllGraphPart() []IGraphPartContext
	GraphPart(i int) IGraphPartContext
	PatternRestrictor() IPatternRestrictorContext
	PatternPathVariable() IPatternPathVariableContext

	// IsMatchPatternContext differentiates from other interfaces.
	IsMatchPatternContext()
}

type MatchPatternContext struct {
	antlr.BaseParserRuleContext
	parser     antlr.Parser
	restrictor IPatternRestrictorContext
	variable   IPatternPathVariableContext
}

func NewEmptyMatchPatternContext() *MatchPatternContext {
	var p = new(MatchPatternContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_matchPattern
	return p
}

func InitEmptyMatchPatternContext(p *MatchPatternContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_matchPattern
}

func (*MatchPatternContext) IsMatchPatternContext() {}

func NewMatchPatternContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MatchPatternContext {
	var p = new(MatchPatternContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_matchPattern

	return p
}

func (s *MatchPatternContext) GetParser() antlr.Parser { return s.parser }

func (s *MatchPatternContext) GetRestrictor() IPatternRestrictorContext { return s.restrictor }

func (s *MatchPatternContext) GetVariable() IPatternPathVariableContext { return s.variable }

func (s *MatchPatternContext) SetRestrictor(v IPatternRestrictorContext) { s.restrictor = v }

func (s *MatchPatternContext) SetVariable(v IPatternPathVariableContext) { s.variable = v }

func (s *MatchPatternContext) AllGraphPart() []IGraphPartContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IGraphPartContext); ok {
			len++
		}
	}

	tst := make([]IGraphPartContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IGraphPartContext); ok {
			tst[i] = t.(IGraphPartContext)
			i++
		}
	}

	return tst
}

func (s *MatchPatternContext) GraphPart(i int) IGraphPartContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGraphPartContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGraphPartContext)
}

func (s *MatchPatternContext) PatternRestrictor() IPatternRestrictorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPatternRestrictorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPatternRestrictorContext)
}

func (s *MatchPatternContext) PatternPathVariable() IPatternPathVariableContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPatternPathVariableContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPatternPathVariableContext)
}

func (s *MatchPatternContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MatchPatternContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MatchPatternContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterMatchPattern(s)
	}
}

func (s *MatchPatternContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitMatchPattern(s)
	}
}

func (p *PartiQLParser) MatchPattern() (localctx IMatchPatternContext) {
	localctx = NewMatchPatternContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 140, PartiQLParserRULE_matchPattern)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(842)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 79, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(841)

			var _x = p.PatternRestrictor()

			localctx.(*MatchPatternContext).restrictor = _x
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(845)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 80, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(844)

			var _x = p.PatternPathVariable()

			localctx.(*MatchPatternContext).variable = _x
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(850)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 81, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(847)
				p.GraphPart()
			}

		}
		p.SetState(852)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 81, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IGraphPartContext is an interface to support dynamic dispatch.
type IGraphPartContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Node() INodeContext
	Edge() IEdgeContext
	Pattern() IPatternContext

	// IsGraphPartContext differentiates from other interfaces.
	IsGraphPartContext()
}

type GraphPartContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGraphPartContext() *GraphPartContext {
	var p = new(GraphPartContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_graphPart
	return p
}

func InitEmptyGraphPartContext(p *GraphPartContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_graphPart
}

func (*GraphPartContext) IsGraphPartContext() {}

func NewGraphPartContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GraphPartContext {
	var p = new(GraphPartContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_graphPart

	return p
}

func (s *GraphPartContext) GetParser() antlr.Parser { return s.parser }

func (s *GraphPartContext) Node() INodeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INodeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INodeContext)
}

func (s *GraphPartContext) Edge() IEdgeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEdgeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEdgeContext)
}

func (s *GraphPartContext) Pattern() IPatternContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPatternContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPatternContext)
}

func (s *GraphPartContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GraphPartContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GraphPartContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterGraphPart(s)
	}
}

func (s *GraphPartContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitGraphPart(s)
	}
}

func (p *PartiQLParser) GraphPart() (localctx IGraphPartContext) {
	localctx = NewGraphPartContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 142, PartiQLParserRULE_graphPart)
	p.SetState(856)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 82, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(853)
			p.Node()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(854)
			p.Edge()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(855)
			p.Pattern()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IMatchSelectorContext is an interface to support dynamic dispatch.
type IMatchSelectorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsMatchSelectorContext differentiates from other interfaces.
	IsMatchSelectorContext()
}

type MatchSelectorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMatchSelectorContext() *MatchSelectorContext {
	var p = new(MatchSelectorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_matchSelector
	return p
}

func InitEmptyMatchSelectorContext(p *MatchSelectorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_matchSelector
}

func (*MatchSelectorContext) IsMatchSelectorContext() {}

func NewMatchSelectorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MatchSelectorContext {
	var p = new(MatchSelectorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_matchSelector

	return p
}

func (s *MatchSelectorContext) GetParser() antlr.Parser { return s.parser }

func (s *MatchSelectorContext) CopyAll(ctx *MatchSelectorContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *MatchSelectorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MatchSelectorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type SelectorAnyContext struct {
	MatchSelectorContext
	k antlr.Token
}

func NewSelectorAnyContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SelectorAnyContext {
	var p = new(SelectorAnyContext)

	InitEmptyMatchSelectorContext(&p.MatchSelectorContext)
	p.parser = parser
	p.CopyAll(ctx.(*MatchSelectorContext))

	return p
}

func (s *SelectorAnyContext) GetK() antlr.Token { return s.k }

func (s *SelectorAnyContext) SetK(v antlr.Token) { s.k = v }

func (s *SelectorAnyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SelectorAnyContext) ANY() antlr.TerminalNode {
	return s.GetToken(PartiQLParserANY, 0)
}

func (s *SelectorAnyContext) LITERAL_INTEGER() antlr.TerminalNode {
	return s.GetToken(PartiQLParserLITERAL_INTEGER, 0)
}

func (s *SelectorAnyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterSelectorAny(s)
	}
}

func (s *SelectorAnyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitSelectorAny(s)
	}
}

type SelectorShortestContext struct {
	MatchSelectorContext
	k antlr.Token
}

func NewSelectorShortestContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SelectorShortestContext {
	var p = new(SelectorShortestContext)

	InitEmptyMatchSelectorContext(&p.MatchSelectorContext)
	p.parser = parser
	p.CopyAll(ctx.(*MatchSelectorContext))

	return p
}

func (s *SelectorShortestContext) GetK() antlr.Token { return s.k }

func (s *SelectorShortestContext) SetK(v antlr.Token) { s.k = v }

func (s *SelectorShortestContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SelectorShortestContext) SHORTEST() antlr.TerminalNode {
	return s.GetToken(PartiQLParserSHORTEST, 0)
}

func (s *SelectorShortestContext) LITERAL_INTEGER() antlr.TerminalNode {
	return s.GetToken(PartiQLParserLITERAL_INTEGER, 0)
}

func (s *SelectorShortestContext) GROUP() antlr.TerminalNode {
	return s.GetToken(PartiQLParserGROUP, 0)
}

func (s *SelectorShortestContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterSelectorShortest(s)
	}
}

func (s *SelectorShortestContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitSelectorShortest(s)
	}
}

type SelectorBasicContext struct {
	MatchSelectorContext
	mod antlr.Token
}

func NewSelectorBasicContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SelectorBasicContext {
	var p = new(SelectorBasicContext)

	InitEmptyMatchSelectorContext(&p.MatchSelectorContext)
	p.parser = parser
	p.CopyAll(ctx.(*MatchSelectorContext))

	return p
}

func (s *SelectorBasicContext) GetMod() antlr.Token { return s.mod }

func (s *SelectorBasicContext) SetMod(v antlr.Token) { s.mod = v }

func (s *SelectorBasicContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SelectorBasicContext) SHORTEST() antlr.TerminalNode {
	return s.GetToken(PartiQLParserSHORTEST, 0)
}

func (s *SelectorBasicContext) ANY() antlr.TerminalNode {
	return s.GetToken(PartiQLParserANY, 0)
}

func (s *SelectorBasicContext) ALL() antlr.TerminalNode {
	return s.GetToken(PartiQLParserALL, 0)
}

func (s *SelectorBasicContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterSelectorBasic(s)
	}
}

func (s *SelectorBasicContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitSelectorBasic(s)
	}
}

func (p *PartiQLParser) MatchSelector() (localctx IMatchSelectorContext) {
	localctx = NewMatchSelectorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 144, PartiQLParserRULE_matchSelector)
	var _la int

	p.SetState(869)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 85, p.GetParserRuleContext()) {
	case 1:
		localctx = NewSelectorBasicContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(858)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*SelectorBasicContext).mod = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == PartiQLParserALL || _la == PartiQLParserANY) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*SelectorBasicContext).mod = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(859)
			p.Match(PartiQLParserSHORTEST)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		localctx = NewSelectorAnyContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(860)
			p.Match(PartiQLParserANY)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(862)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 83, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(861)

				var _m = p.Match(PartiQLParserLITERAL_INTEGER)

				localctx.(*SelectorAnyContext).k = _m
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case 3:
		localctx = NewSelectorShortestContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(864)
			p.Match(PartiQLParserSHORTEST)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(865)

			var _m = p.Match(PartiQLParserLITERAL_INTEGER)

			localctx.(*SelectorShortestContext).k = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(867)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 84, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(866)
				p.Match(PartiQLParserGROUP)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPatternPathVariableContext is an interface to support dynamic dispatch.
type IPatternPathVariableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SymbolPrimitive() ISymbolPrimitiveContext
	EQ() antlr.TerminalNode

	// IsPatternPathVariableContext differentiates from other interfaces.
	IsPatternPathVariableContext()
}

type PatternPathVariableContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPatternPathVariableContext() *PatternPathVariableContext {
	var p = new(PatternPathVariableContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_patternPathVariable
	return p
}

func InitEmptyPatternPathVariableContext(p *PatternPathVariableContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_patternPathVariable
}

func (*PatternPathVariableContext) IsPatternPathVariableContext() {}

func NewPatternPathVariableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PatternPathVariableContext {
	var p = new(PatternPathVariableContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_patternPathVariable

	return p
}

func (s *PatternPathVariableContext) GetParser() antlr.Parser { return s.parser }

func (s *PatternPathVariableContext) SymbolPrimitive() ISymbolPrimitiveContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISymbolPrimitiveContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISymbolPrimitiveContext)
}

func (s *PatternPathVariableContext) EQ() antlr.TerminalNode {
	return s.GetToken(PartiQLParserEQ, 0)
}

func (s *PatternPathVariableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PatternPathVariableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PatternPathVariableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterPatternPathVariable(s)
	}
}

func (s *PatternPathVariableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitPatternPathVariable(s)
	}
}

func (p *PartiQLParser) PatternPathVariable() (localctx IPatternPathVariableContext) {
	localctx = NewPatternPathVariableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 146, PartiQLParserRULE_patternPathVariable)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(871)
		p.SymbolPrimitive()
	}
	{
		p.SetState(872)
		p.Match(PartiQLParserEQ)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPatternRestrictorContext is an interface to support dynamic dispatch.
type IPatternRestrictorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetRestrictor returns the restrictor token.
	GetRestrictor() antlr.Token

	// SetRestrictor sets the restrictor token.
	SetRestrictor(antlr.Token)

	// Getter signatures
	IDENTIFIER() antlr.TerminalNode

	// IsPatternRestrictorContext differentiates from other interfaces.
	IsPatternRestrictorContext()
}

type PatternRestrictorContext struct {
	antlr.BaseParserRuleContext
	parser     antlr.Parser
	restrictor antlr.Token
}

func NewEmptyPatternRestrictorContext() *PatternRestrictorContext {
	var p = new(PatternRestrictorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_patternRestrictor
	return p
}

func InitEmptyPatternRestrictorContext(p *PatternRestrictorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_patternRestrictor
}

func (*PatternRestrictorContext) IsPatternRestrictorContext() {}

func NewPatternRestrictorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PatternRestrictorContext {
	var p = new(PatternRestrictorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_patternRestrictor

	return p
}

func (s *PatternRestrictorContext) GetParser() antlr.Parser { return s.parser }

func (s *PatternRestrictorContext) GetRestrictor() antlr.Token { return s.restrictor }

func (s *PatternRestrictorContext) SetRestrictor(v antlr.Token) { s.restrictor = v }

func (s *PatternRestrictorContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(PartiQLParserIDENTIFIER, 0)
}

func (s *PatternRestrictorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PatternRestrictorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PatternRestrictorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterPatternRestrictor(s)
	}
}

func (s *PatternRestrictorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitPatternRestrictor(s)
	}
}

func (p *PartiQLParser) PatternRestrictor() (localctx IPatternRestrictorContext) {
	localctx = NewPatternRestrictorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 148, PartiQLParserRULE_patternRestrictor)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(874)

		var _m = p.Match(PartiQLParserIDENTIFIER)

		localctx.(*PatternRestrictorContext).restrictor = _m
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INodeContext is an interface to support dynamic dispatch.
type INodeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	PAREN_LEFT() antlr.TerminalNode
	PAREN_RIGHT() antlr.TerminalNode
	SymbolPrimitive() ISymbolPrimitiveContext
	COLON() antlr.TerminalNode
	LabelSpec() ILabelSpecContext
	WhereClause() IWhereClauseContext

	// IsNodeContext differentiates from other interfaces.
	IsNodeContext()
}

type NodeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNodeContext() *NodeContext {
	var p = new(NodeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_node
	return p
}

func InitEmptyNodeContext(p *NodeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_node
}

func (*NodeContext) IsNodeContext() {}

func NewNodeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NodeContext {
	var p = new(NodeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_node

	return p
}

func (s *NodeContext) GetParser() antlr.Parser { return s.parser }

func (s *NodeContext) PAREN_LEFT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserPAREN_LEFT, 0)
}

func (s *NodeContext) PAREN_RIGHT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserPAREN_RIGHT, 0)
}

func (s *NodeContext) SymbolPrimitive() ISymbolPrimitiveContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISymbolPrimitiveContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISymbolPrimitiveContext)
}

func (s *NodeContext) COLON() antlr.TerminalNode {
	return s.GetToken(PartiQLParserCOLON, 0)
}

func (s *NodeContext) LabelSpec() ILabelSpecContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILabelSpecContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILabelSpecContext)
}

func (s *NodeContext) WhereClause() IWhereClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWhereClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWhereClauseContext)
}

func (s *NodeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NodeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NodeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterNode(s)
	}
}

func (s *NodeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitNode(s)
	}
}

func (p *PartiQLParser) Node() (localctx INodeContext) {
	localctx = NewNodeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 150, PartiQLParserRULE_node)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(876)
		p.Match(PartiQLParserPAREN_LEFT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(878)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == PartiQLParserIDENTIFIER || _la == PartiQLParserIDENTIFIER_QUOTED {
		{
			p.SetState(877)
			p.SymbolPrimitive()
		}

	}
	p.SetState(882)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == PartiQLParserCOLON {
		{
			p.SetState(880)
			p.Match(PartiQLParserCOLON)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(881)
			p.labelSpec(0)
		}

	}
	p.SetState(885)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == PartiQLParserWHERE {
		{
			p.SetState(884)
			p.WhereClause()
		}

	}
	{
		p.SetState(887)
		p.Match(PartiQLParserPAREN_RIGHT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IEdgeContext is an interface to support dynamic dispatch.
type IEdgeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsEdgeContext differentiates from other interfaces.
	IsEdgeContext()
}

type EdgeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEdgeContext() *EdgeContext {
	var p = new(EdgeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_edge
	return p
}

func InitEmptyEdgeContext(p *EdgeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_edge
}

func (*EdgeContext) IsEdgeContext() {}

func NewEdgeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EdgeContext {
	var p = new(EdgeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_edge

	return p
}

func (s *EdgeContext) GetParser() antlr.Parser { return s.parser }

func (s *EdgeContext) CopyAll(ctx *EdgeContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *EdgeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EdgeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type EdgeWithSpecContext struct {
	EdgeContext
	quantifier IPatternQuantifierContext
}

func NewEdgeWithSpecContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *EdgeWithSpecContext {
	var p = new(EdgeWithSpecContext)

	InitEmptyEdgeContext(&p.EdgeContext)
	p.parser = parser
	p.CopyAll(ctx.(*EdgeContext))

	return p
}

func (s *EdgeWithSpecContext) GetQuantifier() IPatternQuantifierContext { return s.quantifier }

func (s *EdgeWithSpecContext) SetQuantifier(v IPatternQuantifierContext) { s.quantifier = v }

func (s *EdgeWithSpecContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EdgeWithSpecContext) EdgeWSpec() IEdgeWSpecContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEdgeWSpecContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEdgeWSpecContext)
}

func (s *EdgeWithSpecContext) PatternQuantifier() IPatternQuantifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPatternQuantifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPatternQuantifierContext)
}

func (s *EdgeWithSpecContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterEdgeWithSpec(s)
	}
}

func (s *EdgeWithSpecContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitEdgeWithSpec(s)
	}
}

type EdgeAbbreviatedContext struct {
	EdgeContext
	quantifier IPatternQuantifierContext
}

func NewEdgeAbbreviatedContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *EdgeAbbreviatedContext {
	var p = new(EdgeAbbreviatedContext)

	InitEmptyEdgeContext(&p.EdgeContext)
	p.parser = parser
	p.CopyAll(ctx.(*EdgeContext))

	return p
}

func (s *EdgeAbbreviatedContext) GetQuantifier() IPatternQuantifierContext { return s.quantifier }

func (s *EdgeAbbreviatedContext) SetQuantifier(v IPatternQuantifierContext) { s.quantifier = v }

func (s *EdgeAbbreviatedContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EdgeAbbreviatedContext) EdgeAbbrev() IEdgeAbbrevContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEdgeAbbrevContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEdgeAbbrevContext)
}

func (s *EdgeAbbreviatedContext) PatternQuantifier() IPatternQuantifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPatternQuantifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPatternQuantifierContext)
}

func (s *EdgeAbbreviatedContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterEdgeAbbreviated(s)
	}
}

func (s *EdgeAbbreviatedContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitEdgeAbbreviated(s)
	}
}

func (p *PartiQLParser) Edge() (localctx IEdgeContext) {
	localctx = NewEdgeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 152, PartiQLParserRULE_edge)
	p.SetState(897)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 91, p.GetParserRuleContext()) {
	case 1:
		localctx = NewEdgeWithSpecContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(889)
			p.EdgeWSpec()
		}
		p.SetState(891)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 89, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(890)

				var _x = p.PatternQuantifier()

				localctx.(*EdgeWithSpecContext).quantifier = _x
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case 2:
		localctx = NewEdgeAbbreviatedContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(893)
			p.EdgeAbbrev()
		}
		p.SetState(895)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 90, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(894)

				var _x = p.PatternQuantifier()

				localctx.(*EdgeAbbreviatedContext).quantifier = _x
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPatternContext is an interface to support dynamic dispatch.
type IPatternContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetRestrictor returns the restrictor rule contexts.
	GetRestrictor() IPatternRestrictorContext

	// GetVariable returns the variable rule contexts.
	GetVariable() IPatternPathVariableContext

	// GetWhere returns the where rule contexts.
	GetWhere() IWhereClauseContext

	// GetQuantifier returns the quantifier rule contexts.
	GetQuantifier() IPatternQuantifierContext

	// SetRestrictor sets the restrictor rule contexts.
	SetRestrictor(IPatternRestrictorContext)

	// SetVariable sets the variable rule contexts.
	SetVariable(IPatternPathVariableContext)

	// SetWhere sets the where rule contexts.
	SetWhere(IWhereClauseContext)

	// SetQuantifier sets the quantifier rule contexts.
	SetQuantifier(IPatternQuantifierContext)

	// Getter signatures
	PAREN_LEFT() antlr.TerminalNode
	PAREN_RIGHT() antlr.TerminalNode
	AllGraphPart() []IGraphPartContext
	GraphPart(i int) IGraphPartContext
	PatternRestrictor() IPatternRestrictorContext
	PatternPathVariable() IPatternPathVariableContext
	WhereClause() IWhereClauseContext
	PatternQuantifier() IPatternQuantifierContext
	BRACKET_LEFT() antlr.TerminalNode
	BRACKET_RIGHT() antlr.TerminalNode

	// IsPatternContext differentiates from other interfaces.
	IsPatternContext()
}

type PatternContext struct {
	antlr.BaseParserRuleContext
	parser     antlr.Parser
	restrictor IPatternRestrictorContext
	variable   IPatternPathVariableContext
	where      IWhereClauseContext
	quantifier IPatternQuantifierContext
}

func NewEmptyPatternContext() *PatternContext {
	var p = new(PatternContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_pattern
	return p
}

func InitEmptyPatternContext(p *PatternContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_pattern
}

func (*PatternContext) IsPatternContext() {}

func NewPatternContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PatternContext {
	var p = new(PatternContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_pattern

	return p
}

func (s *PatternContext) GetParser() antlr.Parser { return s.parser }

func (s *PatternContext) GetRestrictor() IPatternRestrictorContext { return s.restrictor }

func (s *PatternContext) GetVariable() IPatternPathVariableContext { return s.variable }

func (s *PatternContext) GetWhere() IWhereClauseContext { return s.where }

func (s *PatternContext) GetQuantifier() IPatternQuantifierContext { return s.quantifier }

func (s *PatternContext) SetRestrictor(v IPatternRestrictorContext) { s.restrictor = v }

func (s *PatternContext) SetVariable(v IPatternPathVariableContext) { s.variable = v }

func (s *PatternContext) SetWhere(v IWhereClauseContext) { s.where = v }

func (s *PatternContext) SetQuantifier(v IPatternQuantifierContext) { s.quantifier = v }

func (s *PatternContext) PAREN_LEFT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserPAREN_LEFT, 0)
}

func (s *PatternContext) PAREN_RIGHT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserPAREN_RIGHT, 0)
}

func (s *PatternContext) AllGraphPart() []IGraphPartContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IGraphPartContext); ok {
			len++
		}
	}

	tst := make([]IGraphPartContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IGraphPartContext); ok {
			tst[i] = t.(IGraphPartContext)
			i++
		}
	}

	return tst
}

func (s *PatternContext) GraphPart(i int) IGraphPartContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGraphPartContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGraphPartContext)
}

func (s *PatternContext) PatternRestrictor() IPatternRestrictorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPatternRestrictorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPatternRestrictorContext)
}

func (s *PatternContext) PatternPathVariable() IPatternPathVariableContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPatternPathVariableContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPatternPathVariableContext)
}

func (s *PatternContext) WhereClause() IWhereClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWhereClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWhereClauseContext)
}

func (s *PatternContext) PatternQuantifier() IPatternQuantifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPatternQuantifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPatternQuantifierContext)
}

func (s *PatternContext) BRACKET_LEFT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserBRACKET_LEFT, 0)
}

func (s *PatternContext) BRACKET_RIGHT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserBRACKET_RIGHT, 0)
}

func (s *PatternContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PatternContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PatternContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterPattern(s)
	}
}

func (s *PatternContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitPattern(s)
	}
}

func (p *PartiQLParser) Pattern() (localctx IPatternContext) {
	localctx = NewPatternContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 154, PartiQLParserRULE_pattern)
	var _la int

	p.SetState(937)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case PartiQLParserPAREN_LEFT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(899)
			p.Match(PartiQLParserPAREN_LEFT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(901)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 92, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(900)

				var _x = p.PatternRestrictor()

				localctx.(*PatternContext).restrictor = _x
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(904)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == PartiQLParserIDENTIFIER || _la == PartiQLParserIDENTIFIER_QUOTED {
			{
				p.SetState(903)

				var _x = p.PatternPathVariable()

				localctx.(*PatternContext).variable = _x
			}

		}
		p.SetState(907)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = ((int64((_la-272)) & ^0x3f) == 0 && ((int64(1)<<(_la-272))&4472849) != 0) {
			{
				p.SetState(906)
				p.GraphPart()
			}

			p.SetState(909)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(912)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == PartiQLParserWHERE {
			{
				p.SetState(911)

				var _x = p.WhereClause()

				localctx.(*PatternContext).where = _x
			}

		}
		{
			p.SetState(914)
			p.Match(PartiQLParserPAREN_RIGHT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(916)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 96, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(915)

				var _x = p.PatternQuantifier()

				localctx.(*PatternContext).quantifier = _x
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case PartiQLParserBRACKET_LEFT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(918)
			p.Match(PartiQLParserBRACKET_LEFT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(920)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 97, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(919)

				var _x = p.PatternRestrictor()

				localctx.(*PatternContext).restrictor = _x
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(923)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == PartiQLParserIDENTIFIER || _la == PartiQLParserIDENTIFIER_QUOTED {
			{
				p.SetState(922)

				var _x = p.PatternPathVariable()

				localctx.(*PatternContext).variable = _x
			}

		}
		p.SetState(926)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = ((int64((_la-272)) & ^0x3f) == 0 && ((int64(1)<<(_la-272))&4472849) != 0) {
			{
				p.SetState(925)
				p.GraphPart()
			}

			p.SetState(928)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(931)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == PartiQLParserWHERE {
			{
				p.SetState(930)

				var _x = p.WhereClause()

				localctx.(*PatternContext).where = _x
			}

		}
		{
			p.SetState(933)
			p.Match(PartiQLParserBRACKET_RIGHT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(935)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 101, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(934)

				var _x = p.PatternQuantifier()

				localctx.(*PatternContext).quantifier = _x
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPatternQuantifierContext is an interface to support dynamic dispatch.
type IPatternQuantifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetQuant returns the quant token.
	GetQuant() antlr.Token

	// GetLower returns the lower token.
	GetLower() antlr.Token

	// GetUpper returns the upper token.
	GetUpper() antlr.Token

	// SetQuant sets the quant token.
	SetQuant(antlr.Token)

	// SetLower sets the lower token.
	SetLower(antlr.Token)

	// SetUpper sets the upper token.
	SetUpper(antlr.Token)

	// Getter signatures
	PLUS() antlr.TerminalNode
	ASTERISK() antlr.TerminalNode
	BRACE_LEFT() antlr.TerminalNode
	COMMA() antlr.TerminalNode
	BRACE_RIGHT() antlr.TerminalNode
	AllLITERAL_INTEGER() []antlr.TerminalNode
	LITERAL_INTEGER(i int) antlr.TerminalNode

	// IsPatternQuantifierContext differentiates from other interfaces.
	IsPatternQuantifierContext()
}

type PatternQuantifierContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	quant  antlr.Token
	lower  antlr.Token
	upper  antlr.Token
}

func NewEmptyPatternQuantifierContext() *PatternQuantifierContext {
	var p = new(PatternQuantifierContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_patternQuantifier
	return p
}

func InitEmptyPatternQuantifierContext(p *PatternQuantifierContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_patternQuantifier
}

func (*PatternQuantifierContext) IsPatternQuantifierContext() {}

func NewPatternQuantifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PatternQuantifierContext {
	var p = new(PatternQuantifierContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_patternQuantifier

	return p
}

func (s *PatternQuantifierContext) GetParser() antlr.Parser { return s.parser }

func (s *PatternQuantifierContext) GetQuant() antlr.Token { return s.quant }

func (s *PatternQuantifierContext) GetLower() antlr.Token { return s.lower }

func (s *PatternQuantifierContext) GetUpper() antlr.Token { return s.upper }

func (s *PatternQuantifierContext) SetQuant(v antlr.Token) { s.quant = v }

func (s *PatternQuantifierContext) SetLower(v antlr.Token) { s.lower = v }

func (s *PatternQuantifierContext) SetUpper(v antlr.Token) { s.upper = v }

func (s *PatternQuantifierContext) PLUS() antlr.TerminalNode {
	return s.GetToken(PartiQLParserPLUS, 0)
}

func (s *PatternQuantifierContext) ASTERISK() antlr.TerminalNode {
	return s.GetToken(PartiQLParserASTERISK, 0)
}

func (s *PatternQuantifierContext) BRACE_LEFT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserBRACE_LEFT, 0)
}

func (s *PatternQuantifierContext) COMMA() antlr.TerminalNode {
	return s.GetToken(PartiQLParserCOMMA, 0)
}

func (s *PatternQuantifierContext) BRACE_RIGHT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserBRACE_RIGHT, 0)
}

func (s *PatternQuantifierContext) AllLITERAL_INTEGER() []antlr.TerminalNode {
	return s.GetTokens(PartiQLParserLITERAL_INTEGER)
}

func (s *PatternQuantifierContext) LITERAL_INTEGER(i int) antlr.TerminalNode {
	return s.GetToken(PartiQLParserLITERAL_INTEGER, i)
}

func (s *PatternQuantifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PatternQuantifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PatternQuantifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterPatternQuantifier(s)
	}
}

func (s *PatternQuantifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitPatternQuantifier(s)
	}
}

func (p *PartiQLParser) PatternQuantifier() (localctx IPatternQuantifierContext) {
	localctx = NewPatternQuantifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 156, PartiQLParserRULE_patternQuantifier)
	var _la int

	p.SetState(947)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case PartiQLParserPLUS, PartiQLParserASTERISK:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(939)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*PatternQuantifierContext).quant = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == PartiQLParserPLUS || _la == PartiQLParserASTERISK) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*PatternQuantifierContext).quant = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case PartiQLParserBRACE_LEFT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(940)
			p.Match(PartiQLParserBRACE_LEFT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(941)

			var _m = p.Match(PartiQLParserLITERAL_INTEGER)

			localctx.(*PatternQuantifierContext).lower = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(942)
			p.Match(PartiQLParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(944)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == PartiQLParserLITERAL_INTEGER {
			{
				p.SetState(943)

				var _m = p.Match(PartiQLParserLITERAL_INTEGER)

				localctx.(*PatternQuantifierContext).upper = _m
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(946)
			p.Match(PartiQLParserBRACE_RIGHT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IEdgeWSpecContext is an interface to support dynamic dispatch.
type IEdgeWSpecContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsEdgeWSpecContext differentiates from other interfaces.
	IsEdgeWSpecContext()
}

type EdgeWSpecContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEdgeWSpecContext() *EdgeWSpecContext {
	var p = new(EdgeWSpecContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_edgeWSpec
	return p
}

func InitEmptyEdgeWSpecContext(p *EdgeWSpecContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_edgeWSpec
}

func (*EdgeWSpecContext) IsEdgeWSpecContext() {}

func NewEdgeWSpecContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EdgeWSpecContext {
	var p = new(EdgeWSpecContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_edgeWSpec

	return p
}

func (s *EdgeWSpecContext) GetParser() antlr.Parser { return s.parser }

func (s *EdgeWSpecContext) CopyAll(ctx *EdgeWSpecContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *EdgeWSpecContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EdgeWSpecContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type EdgeSpecLeftContext struct {
	EdgeWSpecContext
}

func NewEdgeSpecLeftContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *EdgeSpecLeftContext {
	var p = new(EdgeSpecLeftContext)

	InitEmptyEdgeWSpecContext(&p.EdgeWSpecContext)
	p.parser = parser
	p.CopyAll(ctx.(*EdgeWSpecContext))

	return p
}

func (s *EdgeSpecLeftContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EdgeSpecLeftContext) ANGLE_LEFT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserANGLE_LEFT, 0)
}

func (s *EdgeSpecLeftContext) AllMINUS() []antlr.TerminalNode {
	return s.GetTokens(PartiQLParserMINUS)
}

func (s *EdgeSpecLeftContext) MINUS(i int) antlr.TerminalNode {
	return s.GetToken(PartiQLParserMINUS, i)
}

func (s *EdgeSpecLeftContext) EdgeSpec() IEdgeSpecContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEdgeSpecContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEdgeSpecContext)
}

func (s *EdgeSpecLeftContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterEdgeSpecLeft(s)
	}
}

func (s *EdgeSpecLeftContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitEdgeSpecLeft(s)
	}
}

type EdgeSpecUndirectedLeftContext struct {
	EdgeWSpecContext
}

func NewEdgeSpecUndirectedLeftContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *EdgeSpecUndirectedLeftContext {
	var p = new(EdgeSpecUndirectedLeftContext)

	InitEmptyEdgeWSpecContext(&p.EdgeWSpecContext)
	p.parser = parser
	p.CopyAll(ctx.(*EdgeWSpecContext))

	return p
}

func (s *EdgeSpecUndirectedLeftContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EdgeSpecUndirectedLeftContext) ANGLE_LEFT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserANGLE_LEFT, 0)
}

func (s *EdgeSpecUndirectedLeftContext) AllTILDE() []antlr.TerminalNode {
	return s.GetTokens(PartiQLParserTILDE)
}

func (s *EdgeSpecUndirectedLeftContext) TILDE(i int) antlr.TerminalNode {
	return s.GetToken(PartiQLParserTILDE, i)
}

func (s *EdgeSpecUndirectedLeftContext) EdgeSpec() IEdgeSpecContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEdgeSpecContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEdgeSpecContext)
}

func (s *EdgeSpecUndirectedLeftContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterEdgeSpecUndirectedLeft(s)
	}
}

func (s *EdgeSpecUndirectedLeftContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitEdgeSpecUndirectedLeft(s)
	}
}

type EdgeSpecBidirectionalContext struct {
	EdgeWSpecContext
}

func NewEdgeSpecBidirectionalContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *EdgeSpecBidirectionalContext {
	var p = new(EdgeSpecBidirectionalContext)

	InitEmptyEdgeWSpecContext(&p.EdgeWSpecContext)
	p.parser = parser
	p.CopyAll(ctx.(*EdgeWSpecContext))

	return p
}

func (s *EdgeSpecBidirectionalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EdgeSpecBidirectionalContext) ANGLE_LEFT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserANGLE_LEFT, 0)
}

func (s *EdgeSpecBidirectionalContext) AllMINUS() []antlr.TerminalNode {
	return s.GetTokens(PartiQLParserMINUS)
}

func (s *EdgeSpecBidirectionalContext) MINUS(i int) antlr.TerminalNode {
	return s.GetToken(PartiQLParserMINUS, i)
}

func (s *EdgeSpecBidirectionalContext) EdgeSpec() IEdgeSpecContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEdgeSpecContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEdgeSpecContext)
}

func (s *EdgeSpecBidirectionalContext) ANGLE_RIGHT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserANGLE_RIGHT, 0)
}

func (s *EdgeSpecBidirectionalContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterEdgeSpecBidirectional(s)
	}
}

func (s *EdgeSpecBidirectionalContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitEdgeSpecBidirectional(s)
	}
}

type EdgeSpecRightContext struct {
	EdgeWSpecContext
}

func NewEdgeSpecRightContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *EdgeSpecRightContext {
	var p = new(EdgeSpecRightContext)

	InitEmptyEdgeWSpecContext(&p.EdgeWSpecContext)
	p.parser = parser
	p.CopyAll(ctx.(*EdgeWSpecContext))

	return p
}

func (s *EdgeSpecRightContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EdgeSpecRightContext) AllMINUS() []antlr.TerminalNode {
	return s.GetTokens(PartiQLParserMINUS)
}

func (s *EdgeSpecRightContext) MINUS(i int) antlr.TerminalNode {
	return s.GetToken(PartiQLParserMINUS, i)
}

func (s *EdgeSpecRightContext) EdgeSpec() IEdgeSpecContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEdgeSpecContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEdgeSpecContext)
}

func (s *EdgeSpecRightContext) ANGLE_RIGHT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserANGLE_RIGHT, 0)
}

func (s *EdgeSpecRightContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterEdgeSpecRight(s)
	}
}

func (s *EdgeSpecRightContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitEdgeSpecRight(s)
	}
}

type EdgeSpecUndirectedBidirectionalContext struct {
	EdgeWSpecContext
}

func NewEdgeSpecUndirectedBidirectionalContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *EdgeSpecUndirectedBidirectionalContext {
	var p = new(EdgeSpecUndirectedBidirectionalContext)

	InitEmptyEdgeWSpecContext(&p.EdgeWSpecContext)
	p.parser = parser
	p.CopyAll(ctx.(*EdgeWSpecContext))

	return p
}

func (s *EdgeSpecUndirectedBidirectionalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EdgeSpecUndirectedBidirectionalContext) AllMINUS() []antlr.TerminalNode {
	return s.GetTokens(PartiQLParserMINUS)
}

func (s *EdgeSpecUndirectedBidirectionalContext) MINUS(i int) antlr.TerminalNode {
	return s.GetToken(PartiQLParserMINUS, i)
}

func (s *EdgeSpecUndirectedBidirectionalContext) EdgeSpec() IEdgeSpecContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEdgeSpecContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEdgeSpecContext)
}

func (s *EdgeSpecUndirectedBidirectionalContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterEdgeSpecUndirectedBidirectional(s)
	}
}

func (s *EdgeSpecUndirectedBidirectionalContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitEdgeSpecUndirectedBidirectional(s)
	}
}

type EdgeSpecUndirectedContext struct {
	EdgeWSpecContext
}

func NewEdgeSpecUndirectedContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *EdgeSpecUndirectedContext {
	var p = new(EdgeSpecUndirectedContext)

	InitEmptyEdgeWSpecContext(&p.EdgeWSpecContext)
	p.parser = parser
	p.CopyAll(ctx.(*EdgeWSpecContext))

	return p
}

func (s *EdgeSpecUndirectedContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EdgeSpecUndirectedContext) AllTILDE() []antlr.TerminalNode {
	return s.GetTokens(PartiQLParserTILDE)
}

func (s *EdgeSpecUndirectedContext) TILDE(i int) antlr.TerminalNode {
	return s.GetToken(PartiQLParserTILDE, i)
}

func (s *EdgeSpecUndirectedContext) EdgeSpec() IEdgeSpecContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEdgeSpecContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEdgeSpecContext)
}

func (s *EdgeSpecUndirectedContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterEdgeSpecUndirected(s)
	}
}

func (s *EdgeSpecUndirectedContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitEdgeSpecUndirected(s)
	}
}

type EdgeSpecUndirectedRightContext struct {
	EdgeWSpecContext
}

func NewEdgeSpecUndirectedRightContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *EdgeSpecUndirectedRightContext {
	var p = new(EdgeSpecUndirectedRightContext)

	InitEmptyEdgeWSpecContext(&p.EdgeWSpecContext)
	p.parser = parser
	p.CopyAll(ctx.(*EdgeWSpecContext))

	return p
}

func (s *EdgeSpecUndirectedRightContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EdgeSpecUndirectedRightContext) AllTILDE() []antlr.TerminalNode {
	return s.GetTokens(PartiQLParserTILDE)
}

func (s *EdgeSpecUndirectedRightContext) TILDE(i int) antlr.TerminalNode {
	return s.GetToken(PartiQLParserTILDE, i)
}

func (s *EdgeSpecUndirectedRightContext) EdgeSpec() IEdgeSpecContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEdgeSpecContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEdgeSpecContext)
}

func (s *EdgeSpecUndirectedRightContext) ANGLE_RIGHT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserANGLE_RIGHT, 0)
}

func (s *EdgeSpecUndirectedRightContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterEdgeSpecUndirectedRight(s)
	}
}

func (s *EdgeSpecUndirectedRightContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitEdgeSpecUndirectedRight(s)
	}
}

func (p *PartiQLParser) EdgeWSpec() (localctx IEdgeWSpecContext) {
	localctx = NewEdgeWSpecContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 158, PartiQLParserRULE_edgeWSpec)
	p.SetState(983)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 105, p.GetParserRuleContext()) {
	case 1:
		localctx = NewEdgeSpecRightContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(949)
			p.Match(PartiQLParserMINUS)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(950)
			p.EdgeSpec()
		}
		{
			p.SetState(951)
			p.Match(PartiQLParserMINUS)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(952)
			p.Match(PartiQLParserANGLE_RIGHT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		localctx = NewEdgeSpecUndirectedContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(954)
			p.Match(PartiQLParserTILDE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(955)
			p.EdgeSpec()
		}
		{
			p.SetState(956)
			p.Match(PartiQLParserTILDE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 3:
		localctx = NewEdgeSpecLeftContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(958)
			p.Match(PartiQLParserANGLE_LEFT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(959)
			p.Match(PartiQLParserMINUS)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(960)
			p.EdgeSpec()
		}
		{
			p.SetState(961)
			p.Match(PartiQLParserMINUS)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 4:
		localctx = NewEdgeSpecUndirectedRightContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(963)
			p.Match(PartiQLParserTILDE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(964)
			p.EdgeSpec()
		}
		{
			p.SetState(965)
			p.Match(PartiQLParserTILDE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(966)
			p.Match(PartiQLParserANGLE_RIGHT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 5:
		localctx = NewEdgeSpecUndirectedLeftContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(968)
			p.Match(PartiQLParserANGLE_LEFT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(969)
			p.Match(PartiQLParserTILDE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(970)
			p.EdgeSpec()
		}
		{
			p.SetState(971)
			p.Match(PartiQLParserTILDE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 6:
		localctx = NewEdgeSpecBidirectionalContext(p, localctx)
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(973)
			p.Match(PartiQLParserANGLE_LEFT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(974)
			p.Match(PartiQLParserMINUS)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(975)
			p.EdgeSpec()
		}
		{
			p.SetState(976)
			p.Match(PartiQLParserMINUS)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(977)
			p.Match(PartiQLParserANGLE_RIGHT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 7:
		localctx = NewEdgeSpecUndirectedBidirectionalContext(p, localctx)
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(979)
			p.Match(PartiQLParserMINUS)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(980)
			p.EdgeSpec()
		}
		{
			p.SetState(981)
			p.Match(PartiQLParserMINUS)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IEdgeSpecContext is an interface to support dynamic dispatch.
type IEdgeSpecContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	BRACKET_LEFT() antlr.TerminalNode
	BRACKET_RIGHT() antlr.TerminalNode
	SymbolPrimitive() ISymbolPrimitiveContext
	COLON() antlr.TerminalNode
	LabelSpec() ILabelSpecContext
	WhereClause() IWhereClauseContext

	// IsEdgeSpecContext differentiates from other interfaces.
	IsEdgeSpecContext()
}

type EdgeSpecContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEdgeSpecContext() *EdgeSpecContext {
	var p = new(EdgeSpecContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_edgeSpec
	return p
}

func InitEmptyEdgeSpecContext(p *EdgeSpecContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_edgeSpec
}

func (*EdgeSpecContext) IsEdgeSpecContext() {}

func NewEdgeSpecContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EdgeSpecContext {
	var p = new(EdgeSpecContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_edgeSpec

	return p
}

func (s *EdgeSpecContext) GetParser() antlr.Parser { return s.parser }

func (s *EdgeSpecContext) BRACKET_LEFT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserBRACKET_LEFT, 0)
}

func (s *EdgeSpecContext) BRACKET_RIGHT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserBRACKET_RIGHT, 0)
}

func (s *EdgeSpecContext) SymbolPrimitive() ISymbolPrimitiveContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISymbolPrimitiveContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISymbolPrimitiveContext)
}

func (s *EdgeSpecContext) COLON() antlr.TerminalNode {
	return s.GetToken(PartiQLParserCOLON, 0)
}

func (s *EdgeSpecContext) LabelSpec() ILabelSpecContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILabelSpecContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILabelSpecContext)
}

func (s *EdgeSpecContext) WhereClause() IWhereClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWhereClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWhereClauseContext)
}

func (s *EdgeSpecContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EdgeSpecContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EdgeSpecContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterEdgeSpec(s)
	}
}

func (s *EdgeSpecContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitEdgeSpec(s)
	}
}

func (p *PartiQLParser) EdgeSpec() (localctx IEdgeSpecContext) {
	localctx = NewEdgeSpecContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 160, PartiQLParserRULE_edgeSpec)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(985)
		p.Match(PartiQLParserBRACKET_LEFT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(987)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == PartiQLParserIDENTIFIER || _la == PartiQLParserIDENTIFIER_QUOTED {
		{
			p.SetState(986)
			p.SymbolPrimitive()
		}

	}
	p.SetState(991)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == PartiQLParserCOLON {
		{
			p.SetState(989)
			p.Match(PartiQLParserCOLON)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(990)
			p.labelSpec(0)
		}

	}
	p.SetState(994)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == PartiQLParserWHERE {
		{
			p.SetState(993)
			p.WhereClause()
		}

	}
	{
		p.SetState(996)
		p.Match(PartiQLParserBRACKET_RIGHT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ILabelSpecContext is an interface to support dynamic dispatch.
type ILabelSpecContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsLabelSpecContext differentiates from other interfaces.
	IsLabelSpecContext()
}

type LabelSpecContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLabelSpecContext() *LabelSpecContext {
	var p = new(LabelSpecContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_labelSpec
	return p
}

func InitEmptyLabelSpecContext(p *LabelSpecContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_labelSpec
}

func (*LabelSpecContext) IsLabelSpecContext() {}

func NewLabelSpecContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LabelSpecContext {
	var p = new(LabelSpecContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_labelSpec

	return p
}

func (s *LabelSpecContext) GetParser() antlr.Parser { return s.parser }

func (s *LabelSpecContext) CopyAll(ctx *LabelSpecContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *LabelSpecContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LabelSpecContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type LabelSpecTermContext struct {
	LabelSpecContext
}

func NewLabelSpecTermContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *LabelSpecTermContext {
	var p = new(LabelSpecTermContext)

	InitEmptyLabelSpecContext(&p.LabelSpecContext)
	p.parser = parser
	p.CopyAll(ctx.(*LabelSpecContext))

	return p
}

func (s *LabelSpecTermContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LabelSpecTermContext) LabelTerm() ILabelTermContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILabelTermContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILabelTermContext)
}

func (s *LabelSpecTermContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterLabelSpecTerm(s)
	}
}

func (s *LabelSpecTermContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitLabelSpecTerm(s)
	}
}

type LabelSpecOrContext struct {
	LabelSpecContext
}

func NewLabelSpecOrContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *LabelSpecOrContext {
	var p = new(LabelSpecOrContext)

	InitEmptyLabelSpecContext(&p.LabelSpecContext)
	p.parser = parser
	p.CopyAll(ctx.(*LabelSpecContext))

	return p
}

func (s *LabelSpecOrContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LabelSpecOrContext) LabelSpec() ILabelSpecContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILabelSpecContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILabelSpecContext)
}

func (s *LabelSpecOrContext) VERTBAR() antlr.TerminalNode {
	return s.GetToken(PartiQLParserVERTBAR, 0)
}

func (s *LabelSpecOrContext) LabelTerm() ILabelTermContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILabelTermContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILabelTermContext)
}

func (s *LabelSpecOrContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterLabelSpecOr(s)
	}
}

func (s *LabelSpecOrContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitLabelSpecOr(s)
	}
}

func (p *PartiQLParser) LabelSpec() (localctx ILabelSpecContext) {
	return p.labelSpec(0)
}

func (p *PartiQLParser) labelSpec(_p int) (localctx ILabelSpecContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewLabelSpecContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx ILabelSpecContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 162
	p.EnterRecursionRule(localctx, 162, PartiQLParserRULE_labelSpec, _p)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	localctx = NewLabelSpecTermContext(p, localctx)
	p.SetParserRuleContext(localctx)
	_prevctx = localctx

	{
		p.SetState(999)
		p.labelTerm(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(1006)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 109, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewLabelSpecOrContext(p, NewLabelSpecContext(p, _parentctx, _parentState))
			p.PushNewRecursionContext(localctx, _startState, PartiQLParserRULE_labelSpec)
			p.SetState(1001)

			if !(p.Precpred(p.GetParserRuleContext(), 2)) {
				p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				goto errorExit
			}
			{
				p.SetState(1002)
				p.Match(PartiQLParserVERTBAR)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1003)
				p.labelTerm(0)
			}

		}
		p.SetState(1008)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 109, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ILabelTermContext is an interface to support dynamic dispatch.
type ILabelTermContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsLabelTermContext differentiates from other interfaces.
	IsLabelTermContext()
}

type LabelTermContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLabelTermContext() *LabelTermContext {
	var p = new(LabelTermContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_labelTerm
	return p
}

func InitEmptyLabelTermContext(p *LabelTermContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_labelTerm
}

func (*LabelTermContext) IsLabelTermContext() {}

func NewLabelTermContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LabelTermContext {
	var p = new(LabelTermContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_labelTerm

	return p
}

func (s *LabelTermContext) GetParser() antlr.Parser { return s.parser }

func (s *LabelTermContext) CopyAll(ctx *LabelTermContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *LabelTermContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LabelTermContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type LabelTermFactorContext struct {
	LabelTermContext
}

func NewLabelTermFactorContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *LabelTermFactorContext {
	var p = new(LabelTermFactorContext)

	InitEmptyLabelTermContext(&p.LabelTermContext)
	p.parser = parser
	p.CopyAll(ctx.(*LabelTermContext))

	return p
}

func (s *LabelTermFactorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LabelTermFactorContext) LabelFactor() ILabelFactorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILabelFactorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILabelFactorContext)
}

func (s *LabelTermFactorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterLabelTermFactor(s)
	}
}

func (s *LabelTermFactorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitLabelTermFactor(s)
	}
}

type LabelTermAndContext struct {
	LabelTermContext
}

func NewLabelTermAndContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *LabelTermAndContext {
	var p = new(LabelTermAndContext)

	InitEmptyLabelTermContext(&p.LabelTermContext)
	p.parser = parser
	p.CopyAll(ctx.(*LabelTermContext))

	return p
}

func (s *LabelTermAndContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LabelTermAndContext) LabelTerm() ILabelTermContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILabelTermContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILabelTermContext)
}

func (s *LabelTermAndContext) AMPERSAND() antlr.TerminalNode {
	return s.GetToken(PartiQLParserAMPERSAND, 0)
}

func (s *LabelTermAndContext) LabelFactor() ILabelFactorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILabelFactorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILabelFactorContext)
}

func (s *LabelTermAndContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterLabelTermAnd(s)
	}
}

func (s *LabelTermAndContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitLabelTermAnd(s)
	}
}

func (p *PartiQLParser) LabelTerm() (localctx ILabelTermContext) {
	return p.labelTerm(0)
}

func (p *PartiQLParser) labelTerm(_p int) (localctx ILabelTermContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewLabelTermContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx ILabelTermContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 164
	p.EnterRecursionRule(localctx, 164, PartiQLParserRULE_labelTerm, _p)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	localctx = NewLabelTermFactorContext(p, localctx)
	p.SetParserRuleContext(localctx)
	_prevctx = localctx

	{
		p.SetState(1010)
		p.LabelFactor()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(1017)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 110, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewLabelTermAndContext(p, NewLabelTermContext(p, _parentctx, _parentState))
			p.PushNewRecursionContext(localctx, _startState, PartiQLParserRULE_labelTerm)
			p.SetState(1012)

			if !(p.Precpred(p.GetParserRuleContext(), 2)) {
				p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				goto errorExit
			}
			{
				p.SetState(1013)
				p.Match(PartiQLParserAMPERSAND)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1014)
				p.LabelFactor()
			}

		}
		p.SetState(1019)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 110, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ILabelFactorContext is an interface to support dynamic dispatch.
type ILabelFactorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsLabelFactorContext differentiates from other interfaces.
	IsLabelFactorContext()
}

type LabelFactorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLabelFactorContext() *LabelFactorContext {
	var p = new(LabelFactorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_labelFactor
	return p
}

func InitEmptyLabelFactorContext(p *LabelFactorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_labelFactor
}

func (*LabelFactorContext) IsLabelFactorContext() {}

func NewLabelFactorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LabelFactorContext {
	var p = new(LabelFactorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_labelFactor

	return p
}

func (s *LabelFactorContext) GetParser() antlr.Parser { return s.parser }

func (s *LabelFactorContext) CopyAll(ctx *LabelFactorContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *LabelFactorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LabelFactorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type LabelFactorPrimaryContext struct {
	LabelFactorContext
}

func NewLabelFactorPrimaryContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *LabelFactorPrimaryContext {
	var p = new(LabelFactorPrimaryContext)

	InitEmptyLabelFactorContext(&p.LabelFactorContext)
	p.parser = parser
	p.CopyAll(ctx.(*LabelFactorContext))

	return p
}

func (s *LabelFactorPrimaryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LabelFactorPrimaryContext) LabelPrimary() ILabelPrimaryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILabelPrimaryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILabelPrimaryContext)
}

func (s *LabelFactorPrimaryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterLabelFactorPrimary(s)
	}
}

func (s *LabelFactorPrimaryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitLabelFactorPrimary(s)
	}
}

type LabelFactorNotContext struct {
	LabelFactorContext
}

func NewLabelFactorNotContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *LabelFactorNotContext {
	var p = new(LabelFactorNotContext)

	InitEmptyLabelFactorContext(&p.LabelFactorContext)
	p.parser = parser
	p.CopyAll(ctx.(*LabelFactorContext))

	return p
}

func (s *LabelFactorNotContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LabelFactorNotContext) BANG() antlr.TerminalNode {
	return s.GetToken(PartiQLParserBANG, 0)
}

func (s *LabelFactorNotContext) LabelPrimary() ILabelPrimaryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILabelPrimaryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILabelPrimaryContext)
}

func (s *LabelFactorNotContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterLabelFactorNot(s)
	}
}

func (s *LabelFactorNotContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitLabelFactorNot(s)
	}
}

func (p *PartiQLParser) LabelFactor() (localctx ILabelFactorContext) {
	localctx = NewLabelFactorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 166, PartiQLParserRULE_labelFactor)
	p.SetState(1023)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case PartiQLParserBANG:
		localctx = NewLabelFactorNotContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1020)
			p.Match(PartiQLParserBANG)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1021)
			p.LabelPrimary()
		}

	case PartiQLParserPERCENT, PartiQLParserPAREN_LEFT, PartiQLParserIDENTIFIER, PartiQLParserIDENTIFIER_QUOTED:
		localctx = NewLabelFactorPrimaryContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1022)
			p.LabelPrimary()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ILabelPrimaryContext is an interface to support dynamic dispatch.
type ILabelPrimaryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsLabelPrimaryContext differentiates from other interfaces.
	IsLabelPrimaryContext()
}

type LabelPrimaryContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLabelPrimaryContext() *LabelPrimaryContext {
	var p = new(LabelPrimaryContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_labelPrimary
	return p
}

func InitEmptyLabelPrimaryContext(p *LabelPrimaryContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_labelPrimary
}

func (*LabelPrimaryContext) IsLabelPrimaryContext() {}

func NewLabelPrimaryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LabelPrimaryContext {
	var p = new(LabelPrimaryContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_labelPrimary

	return p
}

func (s *LabelPrimaryContext) GetParser() antlr.Parser { return s.parser }

func (s *LabelPrimaryContext) CopyAll(ctx *LabelPrimaryContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *LabelPrimaryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LabelPrimaryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type LabelPrimaryParenContext struct {
	LabelPrimaryContext
}

func NewLabelPrimaryParenContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *LabelPrimaryParenContext {
	var p = new(LabelPrimaryParenContext)

	InitEmptyLabelPrimaryContext(&p.LabelPrimaryContext)
	p.parser = parser
	p.CopyAll(ctx.(*LabelPrimaryContext))

	return p
}

func (s *LabelPrimaryParenContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LabelPrimaryParenContext) PAREN_LEFT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserPAREN_LEFT, 0)
}

func (s *LabelPrimaryParenContext) LabelSpec() ILabelSpecContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILabelSpecContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILabelSpecContext)
}

func (s *LabelPrimaryParenContext) PAREN_RIGHT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserPAREN_RIGHT, 0)
}

func (s *LabelPrimaryParenContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterLabelPrimaryParen(s)
	}
}

func (s *LabelPrimaryParenContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitLabelPrimaryParen(s)
	}
}

type LabelPrimaryNameContext struct {
	LabelPrimaryContext
}

func NewLabelPrimaryNameContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *LabelPrimaryNameContext {
	var p = new(LabelPrimaryNameContext)

	InitEmptyLabelPrimaryContext(&p.LabelPrimaryContext)
	p.parser = parser
	p.CopyAll(ctx.(*LabelPrimaryContext))

	return p
}

func (s *LabelPrimaryNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LabelPrimaryNameContext) SymbolPrimitive() ISymbolPrimitiveContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISymbolPrimitiveContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISymbolPrimitiveContext)
}

func (s *LabelPrimaryNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterLabelPrimaryName(s)
	}
}

func (s *LabelPrimaryNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitLabelPrimaryName(s)
	}
}

type LabelPrimaryWildContext struct {
	LabelPrimaryContext
}

func NewLabelPrimaryWildContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *LabelPrimaryWildContext {
	var p = new(LabelPrimaryWildContext)

	InitEmptyLabelPrimaryContext(&p.LabelPrimaryContext)
	p.parser = parser
	p.CopyAll(ctx.(*LabelPrimaryContext))

	return p
}

func (s *LabelPrimaryWildContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LabelPrimaryWildContext) PERCENT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserPERCENT, 0)
}

func (s *LabelPrimaryWildContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterLabelPrimaryWild(s)
	}
}

func (s *LabelPrimaryWildContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitLabelPrimaryWild(s)
	}
}

func (p *PartiQLParser) LabelPrimary() (localctx ILabelPrimaryContext) {
	localctx = NewLabelPrimaryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 168, PartiQLParserRULE_labelPrimary)
	p.SetState(1031)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case PartiQLParserIDENTIFIER, PartiQLParserIDENTIFIER_QUOTED:
		localctx = NewLabelPrimaryNameContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1025)
			p.SymbolPrimitive()
		}

	case PartiQLParserPERCENT:
		localctx = NewLabelPrimaryWildContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1026)
			p.Match(PartiQLParserPERCENT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case PartiQLParserPAREN_LEFT:
		localctx = NewLabelPrimaryParenContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1027)
			p.Match(PartiQLParserPAREN_LEFT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1028)
			p.labelSpec(0)
		}
		{
			p.SetState(1029)
			p.Match(PartiQLParserPAREN_RIGHT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IEdgeAbbrevContext is an interface to support dynamic dispatch.
type IEdgeAbbrevContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	TILDE() antlr.TerminalNode
	ANGLE_RIGHT() antlr.TerminalNode
	ANGLE_LEFT() antlr.TerminalNode
	MINUS() antlr.TerminalNode

	// IsEdgeAbbrevContext differentiates from other interfaces.
	IsEdgeAbbrevContext()
}

type EdgeAbbrevContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEdgeAbbrevContext() *EdgeAbbrevContext {
	var p = new(EdgeAbbrevContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_edgeAbbrev
	return p
}

func InitEmptyEdgeAbbrevContext(p *EdgeAbbrevContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_edgeAbbrev
}

func (*EdgeAbbrevContext) IsEdgeAbbrevContext() {}

func NewEdgeAbbrevContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EdgeAbbrevContext {
	var p = new(EdgeAbbrevContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_edgeAbbrev

	return p
}

func (s *EdgeAbbrevContext) GetParser() antlr.Parser { return s.parser }

func (s *EdgeAbbrevContext) TILDE() antlr.TerminalNode {
	return s.GetToken(PartiQLParserTILDE, 0)
}

func (s *EdgeAbbrevContext) ANGLE_RIGHT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserANGLE_RIGHT, 0)
}

func (s *EdgeAbbrevContext) ANGLE_LEFT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserANGLE_LEFT, 0)
}

func (s *EdgeAbbrevContext) MINUS() antlr.TerminalNode {
	return s.GetToken(PartiQLParserMINUS, 0)
}

func (s *EdgeAbbrevContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EdgeAbbrevContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EdgeAbbrevContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterEdgeAbbrev(s)
	}
}

func (s *EdgeAbbrevContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitEdgeAbbrev(s)
	}
}

func (p *PartiQLParser) EdgeAbbrev() (localctx IEdgeAbbrevContext) {
	localctx = NewEdgeAbbrevContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 170, PartiQLParserRULE_edgeAbbrev)
	var _la int

	p.SetState(1045)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 115, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1033)
			p.Match(PartiQLParserTILDE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1034)
			p.Match(PartiQLParserTILDE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1035)
			p.Match(PartiQLParserANGLE_RIGHT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1036)
			p.Match(PartiQLParserANGLE_LEFT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1037)
			p.Match(PartiQLParserTILDE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		p.SetState(1039)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == PartiQLParserANGLE_LEFT {
			{
				p.SetState(1038)
				p.Match(PartiQLParserANGLE_LEFT)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(1041)
			p.Match(PartiQLParserMINUS)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1043)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 114, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1042)
				p.Match(PartiQLParserANGLE_RIGHT)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITableReferenceContext is an interface to support dynamic dispatch.
type ITableReferenceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsTableReferenceContext differentiates from other interfaces.
	IsTableReferenceContext()
}

type TableReferenceContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTableReferenceContext() *TableReferenceContext {
	var p = new(TableReferenceContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_tableReference
	return p
}

func InitEmptyTableReferenceContext(p *TableReferenceContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_tableReference
}

func (*TableReferenceContext) IsTableReferenceContext() {}

func NewTableReferenceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TableReferenceContext {
	var p = new(TableReferenceContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_tableReference

	return p
}

func (s *TableReferenceContext) GetParser() antlr.Parser { return s.parser }

func (s *TableReferenceContext) CopyAll(ctx *TableReferenceContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *TableReferenceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableReferenceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type TableWrappedContext struct {
	TableReferenceContext
}

func NewTableWrappedContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TableWrappedContext {
	var p = new(TableWrappedContext)

	InitEmptyTableReferenceContext(&p.TableReferenceContext)
	p.parser = parser
	p.CopyAll(ctx.(*TableReferenceContext))

	return p
}

func (s *TableWrappedContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableWrappedContext) PAREN_LEFT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserPAREN_LEFT, 0)
}

func (s *TableWrappedContext) TableReference() ITableReferenceContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITableReferenceContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITableReferenceContext)
}

func (s *TableWrappedContext) PAREN_RIGHT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserPAREN_RIGHT, 0)
}

func (s *TableWrappedContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterTableWrapped(s)
	}
}

func (s *TableWrappedContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitTableWrapped(s)
	}
}

type TableCrossJoinContext struct {
	TableReferenceContext
	lhs ITableReferenceContext
	rhs IJoinRhsContext
}

func NewTableCrossJoinContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TableCrossJoinContext {
	var p = new(TableCrossJoinContext)

	InitEmptyTableReferenceContext(&p.TableReferenceContext)
	p.parser = parser
	p.CopyAll(ctx.(*TableReferenceContext))

	return p
}

func (s *TableCrossJoinContext) GetLhs() ITableReferenceContext { return s.lhs }

func (s *TableCrossJoinContext) GetRhs() IJoinRhsContext { return s.rhs }

func (s *TableCrossJoinContext) SetLhs(v ITableReferenceContext) { s.lhs = v }

func (s *TableCrossJoinContext) SetRhs(v IJoinRhsContext) { s.rhs = v }

func (s *TableCrossJoinContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableCrossJoinContext) CROSS() antlr.TerminalNode {
	return s.GetToken(PartiQLParserCROSS, 0)
}

func (s *TableCrossJoinContext) JOIN() antlr.TerminalNode {
	return s.GetToken(PartiQLParserJOIN, 0)
}

func (s *TableCrossJoinContext) TableReference() ITableReferenceContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITableReferenceContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITableReferenceContext)
}

func (s *TableCrossJoinContext) JoinRhs() IJoinRhsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IJoinRhsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IJoinRhsContext)
}

func (s *TableCrossJoinContext) JoinType() IJoinTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IJoinTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IJoinTypeContext)
}

func (s *TableCrossJoinContext) COMMA() antlr.TerminalNode {
	return s.GetToken(PartiQLParserCOMMA, 0)
}

func (s *TableCrossJoinContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterTableCrossJoin(s)
	}
}

func (s *TableCrossJoinContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitTableCrossJoin(s)
	}
}

type TableQualifiedJoinContext struct {
	TableReferenceContext
	lhs ITableReferenceContext
	rhs IJoinRhsContext
}

func NewTableQualifiedJoinContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TableQualifiedJoinContext {
	var p = new(TableQualifiedJoinContext)

	InitEmptyTableReferenceContext(&p.TableReferenceContext)
	p.parser = parser
	p.CopyAll(ctx.(*TableReferenceContext))

	return p
}

func (s *TableQualifiedJoinContext) GetLhs() ITableReferenceContext { return s.lhs }

func (s *TableQualifiedJoinContext) GetRhs() IJoinRhsContext { return s.rhs }

func (s *TableQualifiedJoinContext) SetLhs(v ITableReferenceContext) { s.lhs = v }

func (s *TableQualifiedJoinContext) SetRhs(v IJoinRhsContext) { s.rhs = v }

func (s *TableQualifiedJoinContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableQualifiedJoinContext) JOIN() antlr.TerminalNode {
	return s.GetToken(PartiQLParserJOIN, 0)
}

func (s *TableQualifiedJoinContext) JoinSpec() IJoinSpecContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IJoinSpecContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IJoinSpecContext)
}

func (s *TableQualifiedJoinContext) TableReference() ITableReferenceContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITableReferenceContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITableReferenceContext)
}

func (s *TableQualifiedJoinContext) JoinRhs() IJoinRhsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IJoinRhsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IJoinRhsContext)
}

func (s *TableQualifiedJoinContext) JoinType() IJoinTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IJoinTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IJoinTypeContext)
}

func (s *TableQualifiedJoinContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterTableQualifiedJoin(s)
	}
}

func (s *TableQualifiedJoinContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitTableQualifiedJoin(s)
	}
}

type TableRefBaseContext struct {
	TableReferenceContext
}

func NewTableRefBaseContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TableRefBaseContext {
	var p = new(TableRefBaseContext)

	InitEmptyTableReferenceContext(&p.TableReferenceContext)
	p.parser = parser
	p.CopyAll(ctx.(*TableReferenceContext))

	return p
}

func (s *TableRefBaseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableRefBaseContext) TableNonJoin() ITableNonJoinContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITableNonJoinContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITableNonJoinContext)
}

func (s *TableRefBaseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterTableRefBase(s)
	}
}

func (s *TableRefBaseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitTableRefBase(s)
	}
}

func (p *PartiQLParser) TableReference() (localctx ITableReferenceContext) {
	return p.tableReference(0)
}

func (p *PartiQLParser) tableReference(_p int) (localctx ITableReferenceContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewTableReferenceContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx ITableReferenceContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 172
	p.EnterRecursionRule(localctx, 172, PartiQLParserRULE_tableReference, _p)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1053)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 116, p.GetParserRuleContext()) {
	case 1:
		localctx = NewTableRefBaseContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx

		{
			p.SetState(1048)
			p.TableNonJoin()
		}

	case 2:
		localctx = NewTableWrappedContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1049)
			p.Match(PartiQLParserPAREN_LEFT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1050)
			p.tableReference(0)
		}
		{
			p.SetState(1051)
			p.Match(PartiQLParserPAREN_RIGHT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(1075)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 120, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(1073)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}

			switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 119, p.GetParserRuleContext()) {
			case 1:
				localctx = NewTableCrossJoinContext(p, NewTableReferenceContext(p, _parentctx, _parentState))
				localctx.(*TableCrossJoinContext).lhs = _prevctx

				p.PushNewRecursionContext(localctx, _startState, PartiQLParserRULE_tableReference)
				p.SetState(1055)

				if !(p.Precpred(p.GetParserRuleContext(), 5)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 5)", ""))
					goto errorExit
				}
				p.SetState(1057)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)

				if ((int64((_la-96)) & ^0x3f) == 0 && ((int64(1)<<(_la-96))&144115188612734977) != 0) || _la == PartiQLParserRIGHT {
					{
						p.SetState(1056)
						p.JoinType()
					}

				}
				{
					p.SetState(1059)
					p.Match(PartiQLParserCROSS)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(1060)
					p.Match(PartiQLParserJOIN)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(1061)

					var _x = p.JoinRhs()

					localctx.(*TableCrossJoinContext).rhs = _x
				}

			case 2:
				localctx = NewTableCrossJoinContext(p, NewTableReferenceContext(p, _parentctx, _parentState))
				localctx.(*TableCrossJoinContext).lhs = _prevctx

				p.PushNewRecursionContext(localctx, _startState, PartiQLParserRULE_tableReference)
				p.SetState(1062)

				if !(p.Precpred(p.GetParserRuleContext(), 4)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 4)", ""))
					goto errorExit
				}
				{
					p.SetState(1063)
					p.Match(PartiQLParserCOMMA)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(1064)

					var _x = p.JoinRhs()

					localctx.(*TableCrossJoinContext).rhs = _x
				}

			case 3:
				localctx = NewTableQualifiedJoinContext(p, NewTableReferenceContext(p, _parentctx, _parentState))
				localctx.(*TableQualifiedJoinContext).lhs = _prevctx

				p.PushNewRecursionContext(localctx, _startState, PartiQLParserRULE_tableReference)
				p.SetState(1065)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
					goto errorExit
				}
				p.SetState(1067)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)

				if ((int64((_la-96)) & ^0x3f) == 0 && ((int64(1)<<(_la-96))&144115188612734977) != 0) || _la == PartiQLParserRIGHT {
					{
						p.SetState(1066)
						p.JoinType()
					}

				}
				{
					p.SetState(1069)
					p.Match(PartiQLParserJOIN)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(1070)

					var _x = p.JoinRhs()

					localctx.(*TableQualifiedJoinContext).rhs = _x
				}
				{
					p.SetState(1071)
					p.JoinSpec()
				}

			case antlr.ATNInvalidAltNumber:
				goto errorExit
			}

		}
		p.SetState(1077)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 120, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITableNonJoinContext is an interface to support dynamic dispatch.
type ITableNonJoinContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	TableBaseReference() ITableBaseReferenceContext
	TableUnpivot() ITableUnpivotContext

	// IsTableNonJoinContext differentiates from other interfaces.
	IsTableNonJoinContext()
}

type TableNonJoinContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTableNonJoinContext() *TableNonJoinContext {
	var p = new(TableNonJoinContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_tableNonJoin
	return p
}

func InitEmptyTableNonJoinContext(p *TableNonJoinContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_tableNonJoin
}

func (*TableNonJoinContext) IsTableNonJoinContext() {}

func NewTableNonJoinContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TableNonJoinContext {
	var p = new(TableNonJoinContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_tableNonJoin

	return p
}

func (s *TableNonJoinContext) GetParser() antlr.Parser { return s.parser }

func (s *TableNonJoinContext) TableBaseReference() ITableBaseReferenceContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITableBaseReferenceContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITableBaseReferenceContext)
}

func (s *TableNonJoinContext) TableUnpivot() ITableUnpivotContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITableUnpivotContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITableUnpivotContext)
}

func (s *TableNonJoinContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableNonJoinContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TableNonJoinContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterTableNonJoin(s)
	}
}

func (s *TableNonJoinContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitTableNonJoin(s)
	}
}

func (p *PartiQLParser) TableNonJoin() (localctx ITableNonJoinContext) {
	localctx = NewTableNonJoinContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 174, PartiQLParserRULE_tableNonJoin)
	p.SetState(1080)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case PartiQLParserANY, PartiQLParserAVG, PartiQLParserBIT_LENGTH, PartiQLParserCASE, PartiQLParserCAST, PartiQLParserCHARACTER_LENGTH, PartiQLParserCHAR_LENGTH, PartiQLParserCOALESCE, PartiQLParserCOUNT, PartiQLParserCURRENT_DATE, PartiQLParserCURRENT_USER, PartiQLParserDATE, PartiQLParserEVERY, PartiQLParserEXCLUDED, PartiQLParserEXISTS, PartiQLParserEXTRACT, PartiQLParserDATE_ADD, PartiQLParserDATE_DIFF, PartiQLParserFALSE, PartiQLParserLOWER, PartiQLParserMAX, PartiQLParserMIN, PartiQLParserNOT, PartiQLParserNULL, PartiQLParserNULLIF, PartiQLParserOCTET_LENGTH, PartiQLParserOVERLAY, PartiQLParserPOSITION, PartiQLParserSELECT, PartiQLParserSIZE, PartiQLParserSOME, PartiQLParserSUBSTRING, PartiQLParserSUM, PartiQLParserTIME, PartiQLParserTIMESTAMP, PartiQLParserTRIM, PartiQLParserTRUE, PartiQLParserUPPER, PartiQLParserVALUES, PartiQLParserLAG, PartiQLParserLEAD, PartiQLParserCAN_CAST, PartiQLParserCAN_LOSSLESS_CAST, PartiQLParserMISSING, PartiQLParserPIVOT, PartiQLParserLIST, PartiQLParserSEXP, PartiQLParserPLUS, PartiQLParserMINUS, PartiQLParserAT_SIGN, PartiQLParserANGLE_DOUBLE_LEFT, PartiQLParserBRACKET_LEFT, PartiQLParserBRACE_LEFT, PartiQLParserPAREN_LEFT, PartiQLParserQUESTION_MARK, PartiQLParserLITERAL_STRING, PartiQLParserLITERAL_INTEGER, PartiQLParserLITERAL_DECIMAL, PartiQLParserIDENTIFIER, PartiQLParserIDENTIFIER_QUOTED, PartiQLParserION_CLOSURE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1078)
			p.TableBaseReference()
		}

	case PartiQLParserUNPIVOT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1079)
			p.TableUnpivot()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITableBaseReferenceContext is an interface to support dynamic dispatch.
type ITableBaseReferenceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsTableBaseReferenceContext differentiates from other interfaces.
	IsTableBaseReferenceContext()
}

type TableBaseReferenceContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTableBaseReferenceContext() *TableBaseReferenceContext {
	var p = new(TableBaseReferenceContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_tableBaseReference
	return p
}

func InitEmptyTableBaseReferenceContext(p *TableBaseReferenceContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_tableBaseReference
}

func (*TableBaseReferenceContext) IsTableBaseReferenceContext() {}

func NewTableBaseReferenceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TableBaseReferenceContext {
	var p = new(TableBaseReferenceContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_tableBaseReference

	return p
}

func (s *TableBaseReferenceContext) GetParser() antlr.Parser { return s.parser }

func (s *TableBaseReferenceContext) CopyAll(ctx *TableBaseReferenceContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *TableBaseReferenceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableBaseReferenceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type TableBaseRefSymbolContext struct {
	TableBaseReferenceContext
	source IExprSelectContext
}

func NewTableBaseRefSymbolContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TableBaseRefSymbolContext {
	var p = new(TableBaseRefSymbolContext)

	InitEmptyTableBaseReferenceContext(&p.TableBaseReferenceContext)
	p.parser = parser
	p.CopyAll(ctx.(*TableBaseReferenceContext))

	return p
}

func (s *TableBaseRefSymbolContext) GetSource() IExprSelectContext { return s.source }

func (s *TableBaseRefSymbolContext) SetSource(v IExprSelectContext) { s.source = v }

func (s *TableBaseRefSymbolContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableBaseRefSymbolContext) SymbolPrimitive() ISymbolPrimitiveContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISymbolPrimitiveContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISymbolPrimitiveContext)
}

func (s *TableBaseRefSymbolContext) ExprSelect() IExprSelectContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprSelectContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprSelectContext)
}

func (s *TableBaseRefSymbolContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterTableBaseRefSymbol(s)
	}
}

func (s *TableBaseRefSymbolContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitTableBaseRefSymbol(s)
	}
}

type TableBaseRefClausesContext struct {
	TableBaseReferenceContext
	source IExprSelectContext
}

func NewTableBaseRefClausesContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TableBaseRefClausesContext {
	var p = new(TableBaseRefClausesContext)

	InitEmptyTableBaseReferenceContext(&p.TableBaseReferenceContext)
	p.parser = parser
	p.CopyAll(ctx.(*TableBaseReferenceContext))

	return p
}

func (s *TableBaseRefClausesContext) GetSource() IExprSelectContext { return s.source }

func (s *TableBaseRefClausesContext) SetSource(v IExprSelectContext) { s.source = v }

func (s *TableBaseRefClausesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableBaseRefClausesContext) ExprSelect() IExprSelectContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprSelectContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprSelectContext)
}

func (s *TableBaseRefClausesContext) AsIdent() IAsIdentContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAsIdentContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAsIdentContext)
}

func (s *TableBaseRefClausesContext) AtIdent() IAtIdentContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAtIdentContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAtIdentContext)
}

func (s *TableBaseRefClausesContext) ByIdent() IByIdentContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IByIdentContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IByIdentContext)
}

func (s *TableBaseRefClausesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterTableBaseRefClauses(s)
	}
}

func (s *TableBaseRefClausesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitTableBaseRefClauses(s)
	}
}

type TableBaseRefMatchContext struct {
	TableBaseReferenceContext
	source IExprGraphMatchOneContext
}

func NewTableBaseRefMatchContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TableBaseRefMatchContext {
	var p = new(TableBaseRefMatchContext)

	InitEmptyTableBaseReferenceContext(&p.TableBaseReferenceContext)
	p.parser = parser
	p.CopyAll(ctx.(*TableBaseReferenceContext))

	return p
}

func (s *TableBaseRefMatchContext) GetSource() IExprGraphMatchOneContext { return s.source }

func (s *TableBaseRefMatchContext) SetSource(v IExprGraphMatchOneContext) { s.source = v }

func (s *TableBaseRefMatchContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableBaseRefMatchContext) ExprGraphMatchOne() IExprGraphMatchOneContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprGraphMatchOneContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprGraphMatchOneContext)
}

func (s *TableBaseRefMatchContext) AsIdent() IAsIdentContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAsIdentContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAsIdentContext)
}

func (s *TableBaseRefMatchContext) AtIdent() IAtIdentContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAtIdentContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAtIdentContext)
}

func (s *TableBaseRefMatchContext) ByIdent() IByIdentContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IByIdentContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IByIdentContext)
}

func (s *TableBaseRefMatchContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterTableBaseRefMatch(s)
	}
}

func (s *TableBaseRefMatchContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitTableBaseRefMatch(s)
	}
}

func (p *PartiQLParser) TableBaseReference() (localctx ITableBaseReferenceContext) {
	localctx = NewTableBaseReferenceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 176, PartiQLParserRULE_tableBaseReference)
	p.SetState(1105)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 128, p.GetParserRuleContext()) {
	case 1:
		localctx = NewTableBaseRefSymbolContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1082)

			var _x = p.ExprSelect()

			localctx.(*TableBaseRefSymbolContext).source = _x
		}
		{
			p.SetState(1083)
			p.SymbolPrimitive()
		}

	case 2:
		localctx = NewTableBaseRefClausesContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1085)

			var _x = p.ExprSelect()

			localctx.(*TableBaseRefClausesContext).source = _x
		}
		p.SetState(1087)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 122, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1086)
				p.AsIdent()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(1090)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 123, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1089)
				p.AtIdent()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(1093)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 124, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1092)
				p.ByIdent()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case 3:
		localctx = NewTableBaseRefMatchContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1095)

			var _x = p.ExprGraphMatchOne()

			localctx.(*TableBaseRefMatchContext).source = _x
		}
		p.SetState(1097)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 125, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1096)
				p.AsIdent()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(1100)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 126, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1099)
				p.AtIdent()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(1103)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 127, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1102)
				p.ByIdent()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITableUnpivotContext is an interface to support dynamic dispatch.
type ITableUnpivotContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	UNPIVOT() antlr.TerminalNode
	Expr() IExprContext
	AsIdent() IAsIdentContext
	AtIdent() IAtIdentContext
	ByIdent() IByIdentContext

	// IsTableUnpivotContext differentiates from other interfaces.
	IsTableUnpivotContext()
}

type TableUnpivotContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTableUnpivotContext() *TableUnpivotContext {
	var p = new(TableUnpivotContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_tableUnpivot
	return p
}

func InitEmptyTableUnpivotContext(p *TableUnpivotContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_tableUnpivot
}

func (*TableUnpivotContext) IsTableUnpivotContext() {}

func NewTableUnpivotContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TableUnpivotContext {
	var p = new(TableUnpivotContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_tableUnpivot

	return p
}

func (s *TableUnpivotContext) GetParser() antlr.Parser { return s.parser }

func (s *TableUnpivotContext) UNPIVOT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserUNPIVOT, 0)
}

func (s *TableUnpivotContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *TableUnpivotContext) AsIdent() IAsIdentContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAsIdentContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAsIdentContext)
}

func (s *TableUnpivotContext) AtIdent() IAtIdentContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAtIdentContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAtIdentContext)
}

func (s *TableUnpivotContext) ByIdent() IByIdentContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IByIdentContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IByIdentContext)
}

func (s *TableUnpivotContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableUnpivotContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TableUnpivotContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterTableUnpivot(s)
	}
}

func (s *TableUnpivotContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitTableUnpivot(s)
	}
}

func (p *PartiQLParser) TableUnpivot() (localctx ITableUnpivotContext) {
	localctx = NewTableUnpivotContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 178, PartiQLParserRULE_tableUnpivot)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1107)
		p.Match(PartiQLParserUNPIVOT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1108)
		p.Expr()
	}
	p.SetState(1110)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 129, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1109)
			p.AsIdent()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(1113)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 130, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1112)
			p.AtIdent()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(1116)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 131, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1115)
			p.ByIdent()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IJoinRhsContext is an interface to support dynamic dispatch.
type IJoinRhsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsJoinRhsContext differentiates from other interfaces.
	IsJoinRhsContext()
}

type JoinRhsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyJoinRhsContext() *JoinRhsContext {
	var p = new(JoinRhsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_joinRhs
	return p
}

func InitEmptyJoinRhsContext(p *JoinRhsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_joinRhs
}

func (*JoinRhsContext) IsJoinRhsContext() {}

func NewJoinRhsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *JoinRhsContext {
	var p = new(JoinRhsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_joinRhs

	return p
}

func (s *JoinRhsContext) GetParser() antlr.Parser { return s.parser }

func (s *JoinRhsContext) CopyAll(ctx *JoinRhsContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *JoinRhsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *JoinRhsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type JoinRhsBaseContext struct {
	JoinRhsContext
}

func NewJoinRhsBaseContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *JoinRhsBaseContext {
	var p = new(JoinRhsBaseContext)

	InitEmptyJoinRhsContext(&p.JoinRhsContext)
	p.parser = parser
	p.CopyAll(ctx.(*JoinRhsContext))

	return p
}

func (s *JoinRhsBaseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *JoinRhsBaseContext) TableNonJoin() ITableNonJoinContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITableNonJoinContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITableNonJoinContext)
}

func (s *JoinRhsBaseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterJoinRhsBase(s)
	}
}

func (s *JoinRhsBaseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitJoinRhsBase(s)
	}
}

type JoinRhsTableJoinedContext struct {
	JoinRhsContext
}

func NewJoinRhsTableJoinedContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *JoinRhsTableJoinedContext {
	var p = new(JoinRhsTableJoinedContext)

	InitEmptyJoinRhsContext(&p.JoinRhsContext)
	p.parser = parser
	p.CopyAll(ctx.(*JoinRhsContext))

	return p
}

func (s *JoinRhsTableJoinedContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *JoinRhsTableJoinedContext) PAREN_LEFT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserPAREN_LEFT, 0)
}

func (s *JoinRhsTableJoinedContext) TableReference() ITableReferenceContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITableReferenceContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITableReferenceContext)
}

func (s *JoinRhsTableJoinedContext) PAREN_RIGHT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserPAREN_RIGHT, 0)
}

func (s *JoinRhsTableJoinedContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterJoinRhsTableJoined(s)
	}
}

func (s *JoinRhsTableJoinedContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitJoinRhsTableJoined(s)
	}
}

func (p *PartiQLParser) JoinRhs() (localctx IJoinRhsContext) {
	localctx = NewJoinRhsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 180, PartiQLParserRULE_joinRhs)
	p.SetState(1123)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 132, p.GetParserRuleContext()) {
	case 1:
		localctx = NewJoinRhsBaseContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1118)
			p.TableNonJoin()
		}

	case 2:
		localctx = NewJoinRhsTableJoinedContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1119)
			p.Match(PartiQLParserPAREN_LEFT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1120)
			p.tableReference(0)
		}
		{
			p.SetState(1121)
			p.Match(PartiQLParserPAREN_RIGHT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IJoinSpecContext is an interface to support dynamic dispatch.
type IJoinSpecContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ON() antlr.TerminalNode
	Expr() IExprContext

	// IsJoinSpecContext differentiates from other interfaces.
	IsJoinSpecContext()
}

type JoinSpecContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyJoinSpecContext() *JoinSpecContext {
	var p = new(JoinSpecContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_joinSpec
	return p
}

func InitEmptyJoinSpecContext(p *JoinSpecContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_joinSpec
}

func (*JoinSpecContext) IsJoinSpecContext() {}

func NewJoinSpecContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *JoinSpecContext {
	var p = new(JoinSpecContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_joinSpec

	return p
}

func (s *JoinSpecContext) GetParser() antlr.Parser { return s.parser }

func (s *JoinSpecContext) ON() antlr.TerminalNode {
	return s.GetToken(PartiQLParserON, 0)
}

func (s *JoinSpecContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *JoinSpecContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *JoinSpecContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *JoinSpecContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterJoinSpec(s)
	}
}

func (s *JoinSpecContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitJoinSpec(s)
	}
}

func (p *PartiQLParser) JoinSpec() (localctx IJoinSpecContext) {
	localctx = NewJoinSpecContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 182, PartiQLParserRULE_joinSpec)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1125)
		p.Match(PartiQLParserON)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1126)
		p.Expr()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IJoinTypeContext is an interface to support dynamic dispatch.
type IJoinTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetMod returns the mod token.
	GetMod() antlr.Token

	// SetMod sets the mod token.
	SetMod(antlr.Token)

	// Getter signatures
	INNER() antlr.TerminalNode
	LEFT() antlr.TerminalNode
	OUTER() antlr.TerminalNode
	RIGHT() antlr.TerminalNode
	FULL() antlr.TerminalNode

	// IsJoinTypeContext differentiates from other interfaces.
	IsJoinTypeContext()
}

type JoinTypeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	mod    antlr.Token
}

func NewEmptyJoinTypeContext() *JoinTypeContext {
	var p = new(JoinTypeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_joinType
	return p
}

func InitEmptyJoinTypeContext(p *JoinTypeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_joinType
}

func (*JoinTypeContext) IsJoinTypeContext() {}

func NewJoinTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *JoinTypeContext {
	var p = new(JoinTypeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_joinType

	return p
}

func (s *JoinTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *JoinTypeContext) GetMod() antlr.Token { return s.mod }

func (s *JoinTypeContext) SetMod(v antlr.Token) { s.mod = v }

func (s *JoinTypeContext) INNER() antlr.TerminalNode {
	return s.GetToken(PartiQLParserINNER, 0)
}

func (s *JoinTypeContext) LEFT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserLEFT, 0)
}

func (s *JoinTypeContext) OUTER() antlr.TerminalNode {
	return s.GetToken(PartiQLParserOUTER, 0)
}

func (s *JoinTypeContext) RIGHT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserRIGHT, 0)
}

func (s *JoinTypeContext) FULL() antlr.TerminalNode {
	return s.GetToken(PartiQLParserFULL, 0)
}

func (s *JoinTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *JoinTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *JoinTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterJoinType(s)
	}
}

func (s *JoinTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitJoinType(s)
	}
}

func (p *PartiQLParser) JoinType() (localctx IJoinTypeContext) {
	localctx = NewJoinTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 184, PartiQLParserRULE_joinType)
	var _la int

	p.SetState(1142)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case PartiQLParserINNER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1128)

			var _m = p.Match(PartiQLParserINNER)

			localctx.(*JoinTypeContext).mod = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case PartiQLParserLEFT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1129)

			var _m = p.Match(PartiQLParserLEFT)

			localctx.(*JoinTypeContext).mod = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1131)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == PartiQLParserOUTER {
			{
				p.SetState(1130)
				p.Match(PartiQLParserOUTER)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}

	case PartiQLParserRIGHT:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1133)

			var _m = p.Match(PartiQLParserRIGHT)

			localctx.(*JoinTypeContext).mod = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1135)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == PartiQLParserOUTER {
			{
				p.SetState(1134)
				p.Match(PartiQLParserOUTER)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}

	case PartiQLParserFULL:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1137)

			var _m = p.Match(PartiQLParserFULL)

			localctx.(*JoinTypeContext).mod = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1139)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == PartiQLParserOUTER {
			{
				p.SetState(1138)
				p.Match(PartiQLParserOUTER)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}

	case PartiQLParserOUTER:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1141)

			var _m = p.Match(PartiQLParserOUTER)

			localctx.(*JoinTypeContext).mod = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExprContext is an interface to support dynamic dispatch.
type IExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ExprBagOp() IExprBagOpContext

	// IsExprContext differentiates from other interfaces.
	IsExprContext()
}

type ExprContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExprContext() *ExprContext {
	var p = new(ExprContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_expr
	return p
}

func InitEmptyExprContext(p *ExprContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_expr
}

func (*ExprContext) IsExprContext() {}

func NewExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExprContext {
	var p = new(ExprContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_expr

	return p
}

func (s *ExprContext) GetParser() antlr.Parser { return s.parser }

func (s *ExprContext) ExprBagOp() IExprBagOpContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprBagOpContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprBagOpContext)
}

func (s *ExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterExpr(s)
	}
}

func (s *ExprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitExpr(s)
	}
}

func (p *PartiQLParser) Expr() (localctx IExprContext) {
	localctx = NewExprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 186, PartiQLParserRULE_expr)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1144)
		p.exprBagOp(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExprBagOpContext is an interface to support dynamic dispatch.
type IExprBagOpContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsExprBagOpContext differentiates from other interfaces.
	IsExprBagOpContext()
}

type ExprBagOpContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExprBagOpContext() *ExprBagOpContext {
	var p = new(ExprBagOpContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_exprBagOp
	return p
}

func InitEmptyExprBagOpContext(p *ExprBagOpContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_exprBagOp
}

func (*ExprBagOpContext) IsExprBagOpContext() {}

func NewExprBagOpContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExprBagOpContext {
	var p = new(ExprBagOpContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_exprBagOp

	return p
}

func (s *ExprBagOpContext) GetParser() antlr.Parser { return s.parser }

func (s *ExprBagOpContext) CopyAll(ctx *ExprBagOpContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *ExprBagOpContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExprBagOpContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type IntersectContext struct {
	ExprBagOpContext
	lhs IExprBagOpContext
	rhs IExprSelectContext
}

func NewIntersectContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *IntersectContext {
	var p = new(IntersectContext)

	InitEmptyExprBagOpContext(&p.ExprBagOpContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprBagOpContext))

	return p
}

func (s *IntersectContext) GetLhs() IExprBagOpContext { return s.lhs }

func (s *IntersectContext) GetRhs() IExprSelectContext { return s.rhs }

func (s *IntersectContext) SetLhs(v IExprBagOpContext) { s.lhs = v }

func (s *IntersectContext) SetRhs(v IExprSelectContext) { s.rhs = v }

func (s *IntersectContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IntersectContext) INTERSECT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserINTERSECT, 0)
}

func (s *IntersectContext) ExprBagOp() IExprBagOpContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprBagOpContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprBagOpContext)
}

func (s *IntersectContext) ExprSelect() IExprSelectContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprSelectContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprSelectContext)
}

func (s *IntersectContext) OUTER() antlr.TerminalNode {
	return s.GetToken(PartiQLParserOUTER, 0)
}

func (s *IntersectContext) DISTINCT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserDISTINCT, 0)
}

func (s *IntersectContext) ALL() antlr.TerminalNode {
	return s.GetToken(PartiQLParserALL, 0)
}

func (s *IntersectContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterIntersect(s)
	}
}

func (s *IntersectContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitIntersect(s)
	}
}

type QueryBaseContext struct {
	ExprBagOpContext
}

func NewQueryBaseContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *QueryBaseContext {
	var p = new(QueryBaseContext)

	InitEmptyExprBagOpContext(&p.ExprBagOpContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprBagOpContext))

	return p
}

func (s *QueryBaseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *QueryBaseContext) ExprSelect() IExprSelectContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprSelectContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprSelectContext)
}

func (s *QueryBaseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterQueryBase(s)
	}
}

func (s *QueryBaseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitQueryBase(s)
	}
}

type ExceptContext struct {
	ExprBagOpContext
	lhs IExprBagOpContext
	rhs IExprSelectContext
}

func NewExceptContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExceptContext {
	var p = new(ExceptContext)

	InitEmptyExprBagOpContext(&p.ExprBagOpContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprBagOpContext))

	return p
}

func (s *ExceptContext) GetLhs() IExprBagOpContext { return s.lhs }

func (s *ExceptContext) GetRhs() IExprSelectContext { return s.rhs }

func (s *ExceptContext) SetLhs(v IExprBagOpContext) { s.lhs = v }

func (s *ExceptContext) SetRhs(v IExprSelectContext) { s.rhs = v }

func (s *ExceptContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExceptContext) EXCEPT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserEXCEPT, 0)
}

func (s *ExceptContext) ExprBagOp() IExprBagOpContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprBagOpContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprBagOpContext)
}

func (s *ExceptContext) ExprSelect() IExprSelectContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprSelectContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprSelectContext)
}

func (s *ExceptContext) OUTER() antlr.TerminalNode {
	return s.GetToken(PartiQLParserOUTER, 0)
}

func (s *ExceptContext) DISTINCT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserDISTINCT, 0)
}

func (s *ExceptContext) ALL() antlr.TerminalNode {
	return s.GetToken(PartiQLParserALL, 0)
}

func (s *ExceptContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterExcept(s)
	}
}

func (s *ExceptContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitExcept(s)
	}
}

type UnionContext struct {
	ExprBagOpContext
	lhs IExprBagOpContext
	rhs IExprSelectContext
}

func NewUnionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *UnionContext {
	var p = new(UnionContext)

	InitEmptyExprBagOpContext(&p.ExprBagOpContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprBagOpContext))

	return p
}

func (s *UnionContext) GetLhs() IExprBagOpContext { return s.lhs }

func (s *UnionContext) GetRhs() IExprSelectContext { return s.rhs }

func (s *UnionContext) SetLhs(v IExprBagOpContext) { s.lhs = v }

func (s *UnionContext) SetRhs(v IExprSelectContext) { s.rhs = v }

func (s *UnionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnionContext) UNION() antlr.TerminalNode {
	return s.GetToken(PartiQLParserUNION, 0)
}

func (s *UnionContext) ExprBagOp() IExprBagOpContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprBagOpContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprBagOpContext)
}

func (s *UnionContext) ExprSelect() IExprSelectContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprSelectContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprSelectContext)
}

func (s *UnionContext) OUTER() antlr.TerminalNode {
	return s.GetToken(PartiQLParserOUTER, 0)
}

func (s *UnionContext) DISTINCT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserDISTINCT, 0)
}

func (s *UnionContext) ALL() antlr.TerminalNode {
	return s.GetToken(PartiQLParserALL, 0)
}

func (s *UnionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterUnion(s)
	}
}

func (s *UnionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitUnion(s)
	}
}

func (p *PartiQLParser) ExprBagOp() (localctx IExprBagOpContext) {
	return p.exprBagOp(0)
}

func (p *PartiQLParser) exprBagOp(_p int) (localctx IExprBagOpContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewExprBagOpContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IExprBagOpContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 188
	p.EnterRecursionRule(localctx, 188, PartiQLParserRULE_exprBagOp, _p)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	localctx = NewQueryBaseContext(p, localctx)
	p.SetParserRuleContext(localctx)
	_prevctx = localctx

	{
		p.SetState(1147)
		p.ExprSelect()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(1178)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 144, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(1176)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}

			switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 143, p.GetParserRuleContext()) {
			case 1:
				localctx = NewExceptContext(p, NewExprBagOpContext(p, _parentctx, _parentState))
				localctx.(*ExceptContext).lhs = _prevctx

				p.PushNewRecursionContext(localctx, _startState, PartiQLParserRULE_exprBagOp)
				p.SetState(1149)

				if !(p.Precpred(p.GetParserRuleContext(), 4)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 4)", ""))
					goto errorExit
				}
				p.SetState(1151)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)

				if _la == PartiQLParserOUTER {
					{
						p.SetState(1150)
						p.Match(PartiQLParserOUTER)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				}
				{
					p.SetState(1153)
					p.Match(PartiQLParserEXCEPT)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				p.SetState(1155)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)

				if _la == PartiQLParserALL || _la == PartiQLParserDISTINCT {
					{
						p.SetState(1154)
						_la = p.GetTokenStream().LA(1)

						if !(_la == PartiQLParserALL || _la == PartiQLParserDISTINCT) {
							p.GetErrorHandler().RecoverInline(p)
						} else {
							p.GetErrorHandler().ReportMatch(p)
							p.Consume()
						}
					}

				}
				{
					p.SetState(1157)

					var _x = p.ExprSelect()

					localctx.(*ExceptContext).rhs = _x
				}

			case 2:
				localctx = NewUnionContext(p, NewExprBagOpContext(p, _parentctx, _parentState))
				localctx.(*UnionContext).lhs = _prevctx

				p.PushNewRecursionContext(localctx, _startState, PartiQLParserRULE_exprBagOp)
				p.SetState(1158)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
					goto errorExit
				}
				p.SetState(1160)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)

				if _la == PartiQLParserOUTER {
					{
						p.SetState(1159)
						p.Match(PartiQLParserOUTER)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				}
				{
					p.SetState(1162)
					p.Match(PartiQLParserUNION)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				p.SetState(1164)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)

				if _la == PartiQLParserALL || _la == PartiQLParserDISTINCT {
					{
						p.SetState(1163)
						_la = p.GetTokenStream().LA(1)

						if !(_la == PartiQLParserALL || _la == PartiQLParserDISTINCT) {
							p.GetErrorHandler().RecoverInline(p)
						} else {
							p.GetErrorHandler().ReportMatch(p)
							p.Consume()
						}
					}

				}
				{
					p.SetState(1166)

					var _x = p.ExprSelect()

					localctx.(*UnionContext).rhs = _x
				}

			case 3:
				localctx = NewIntersectContext(p, NewExprBagOpContext(p, _parentctx, _parentState))
				localctx.(*IntersectContext).lhs = _prevctx

				p.PushNewRecursionContext(localctx, _startState, PartiQLParserRULE_exprBagOp)
				p.SetState(1167)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
					goto errorExit
				}
				p.SetState(1169)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)

				if _la == PartiQLParserOUTER {
					{
						p.SetState(1168)
						p.Match(PartiQLParserOUTER)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				}
				{
					p.SetState(1171)
					p.Match(PartiQLParserINTERSECT)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				p.SetState(1173)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)

				if _la == PartiQLParserALL || _la == PartiQLParserDISTINCT {
					{
						p.SetState(1172)
						_la = p.GetTokenStream().LA(1)

						if !(_la == PartiQLParserALL || _la == PartiQLParserDISTINCT) {
							p.GetErrorHandler().RecoverInline(p)
						} else {
							p.GetErrorHandler().ReportMatch(p)
							p.Consume()
						}
					}

				}
				{
					p.SetState(1175)

					var _x = p.ExprSelect()

					localctx.(*IntersectContext).rhs = _x
				}

			case antlr.ATNInvalidAltNumber:
				goto errorExit
			}

		}
		p.SetState(1180)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 144, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExprSelectContext is an interface to support dynamic dispatch.
type IExprSelectContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsExprSelectContext differentiates from other interfaces.
	IsExprSelectContext()
}

type ExprSelectContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExprSelectContext() *ExprSelectContext {
	var p = new(ExprSelectContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_exprSelect
	return p
}

func InitEmptyExprSelectContext(p *ExprSelectContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_exprSelect
}

func (*ExprSelectContext) IsExprSelectContext() {}

func NewExprSelectContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExprSelectContext {
	var p = new(ExprSelectContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_exprSelect

	return p
}

func (s *ExprSelectContext) GetParser() antlr.Parser { return s.parser }

func (s *ExprSelectContext) CopyAll(ctx *ExprSelectContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *ExprSelectContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExprSelectContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type SfwBaseContext struct {
	ExprSelectContext
}

func NewSfwBaseContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SfwBaseContext {
	var p = new(SfwBaseContext)

	InitEmptyExprSelectContext(&p.ExprSelectContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprSelectContext))

	return p
}

func (s *SfwBaseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SfwBaseContext) ExprOr() IExprOrContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprOrContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprOrContext)
}

func (s *SfwBaseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterSfwBase(s)
	}
}

func (s *SfwBaseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitSfwBase(s)
	}
}

type SfwQueryContext struct {
	ExprSelectContext
	select_ ISelectClauseContext
	exclude IExcludeClauseContext
	from    IFromClauseContext
	let     ILetClauseContext
	where   IWhereClauseSelectContext
	group   IGroupClauseContext
	having  IHavingClauseContext
	order   IOrderByClauseContext
	limit   ILimitClauseContext
	offset  IOffsetByClauseContext
}

func NewSfwQueryContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SfwQueryContext {
	var p = new(SfwQueryContext)

	InitEmptyExprSelectContext(&p.ExprSelectContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprSelectContext))

	return p
}

func (s *SfwQueryContext) GetSelect_() ISelectClauseContext { return s.select_ }

func (s *SfwQueryContext) GetExclude() IExcludeClauseContext { return s.exclude }

func (s *SfwQueryContext) GetFrom() IFromClauseContext { return s.from }

func (s *SfwQueryContext) GetLet() ILetClauseContext { return s.let }

func (s *SfwQueryContext) GetWhere() IWhereClauseSelectContext { return s.where }

func (s *SfwQueryContext) GetGroup() IGroupClauseContext { return s.group }

func (s *SfwQueryContext) GetHaving() IHavingClauseContext { return s.having }

func (s *SfwQueryContext) GetOrder() IOrderByClauseContext { return s.order }

func (s *SfwQueryContext) GetLimit() ILimitClauseContext { return s.limit }

func (s *SfwQueryContext) GetOffset() IOffsetByClauseContext { return s.offset }

func (s *SfwQueryContext) SetSelect_(v ISelectClauseContext) { s.select_ = v }

func (s *SfwQueryContext) SetExclude(v IExcludeClauseContext) { s.exclude = v }

func (s *SfwQueryContext) SetFrom(v IFromClauseContext) { s.from = v }

func (s *SfwQueryContext) SetLet(v ILetClauseContext) { s.let = v }

func (s *SfwQueryContext) SetWhere(v IWhereClauseSelectContext) { s.where = v }

func (s *SfwQueryContext) SetGroup(v IGroupClauseContext) { s.group = v }

func (s *SfwQueryContext) SetHaving(v IHavingClauseContext) { s.having = v }

func (s *SfwQueryContext) SetOrder(v IOrderByClauseContext) { s.order = v }

func (s *SfwQueryContext) SetLimit(v ILimitClauseContext) { s.limit = v }

func (s *SfwQueryContext) SetOffset(v IOffsetByClauseContext) { s.offset = v }

func (s *SfwQueryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SfwQueryContext) SelectClause() ISelectClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelectClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelectClauseContext)
}

func (s *SfwQueryContext) FromClause() IFromClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFromClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFromClauseContext)
}

func (s *SfwQueryContext) ExcludeClause() IExcludeClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExcludeClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExcludeClauseContext)
}

func (s *SfwQueryContext) LetClause() ILetClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILetClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILetClauseContext)
}

func (s *SfwQueryContext) WhereClauseSelect() IWhereClauseSelectContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWhereClauseSelectContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWhereClauseSelectContext)
}

func (s *SfwQueryContext) GroupClause() IGroupClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGroupClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGroupClauseContext)
}

func (s *SfwQueryContext) HavingClause() IHavingClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IHavingClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IHavingClauseContext)
}

func (s *SfwQueryContext) OrderByClause() IOrderByClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOrderByClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOrderByClauseContext)
}

func (s *SfwQueryContext) LimitClause() ILimitClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILimitClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILimitClauseContext)
}

func (s *SfwQueryContext) OffsetByClause() IOffsetByClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOffsetByClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOffsetByClauseContext)
}

func (s *SfwQueryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterSfwQuery(s)
	}
}

func (s *SfwQueryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitSfwQuery(s)
	}
}

func (p *PartiQLParser) ExprSelect() (localctx IExprSelectContext) {
	localctx = NewExprSelectContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 190, PartiQLParserRULE_exprSelect)
	var _la int

	p.SetState(1208)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case PartiQLParserSELECT, PartiQLParserPIVOT:
		localctx = NewSfwQueryContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1181)

			var _x = p.SelectClause()

			localctx.(*SfwQueryContext).select_ = _x
		}
		p.SetState(1183)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == PartiQLParserEXCLUDE {
			{
				p.SetState(1182)

				var _x = p.ExcludeClause()

				localctx.(*SfwQueryContext).exclude = _x
			}

		}
		{
			p.SetState(1185)

			var _x = p.FromClause()

			localctx.(*SfwQueryContext).from = _x
		}
		p.SetState(1187)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 146, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1186)

				var _x = p.LetClause()

				localctx.(*SfwQueryContext).let = _x
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(1190)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 147, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1189)

				var _x = p.WhereClauseSelect()

				localctx.(*SfwQueryContext).where = _x
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(1193)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 148, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1192)

				var _x = p.GroupClause()

				localctx.(*SfwQueryContext).group = _x
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(1196)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 149, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1195)

				var _x = p.HavingClause()

				localctx.(*SfwQueryContext).having = _x
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(1199)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 150, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1198)

				var _x = p.OrderByClause()

				localctx.(*SfwQueryContext).order = _x
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(1202)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 151, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1201)

				var _x = p.LimitClause()

				localctx.(*SfwQueryContext).limit = _x
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(1205)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 152, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1204)

				var _x = p.OffsetByClause()

				localctx.(*SfwQueryContext).offset = _x
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case PartiQLParserANY, PartiQLParserAVG, PartiQLParserBIT_LENGTH, PartiQLParserCASE, PartiQLParserCAST, PartiQLParserCHARACTER_LENGTH, PartiQLParserCHAR_LENGTH, PartiQLParserCOALESCE, PartiQLParserCOUNT, PartiQLParserCURRENT_DATE, PartiQLParserCURRENT_USER, PartiQLParserDATE, PartiQLParserEVERY, PartiQLParserEXCLUDED, PartiQLParserEXISTS, PartiQLParserEXTRACT, PartiQLParserDATE_ADD, PartiQLParserDATE_DIFF, PartiQLParserFALSE, PartiQLParserLOWER, PartiQLParserMAX, PartiQLParserMIN, PartiQLParserNOT, PartiQLParserNULL, PartiQLParserNULLIF, PartiQLParserOCTET_LENGTH, PartiQLParserOVERLAY, PartiQLParserPOSITION, PartiQLParserSIZE, PartiQLParserSOME, PartiQLParserSUBSTRING, PartiQLParserSUM, PartiQLParserTIME, PartiQLParserTIMESTAMP, PartiQLParserTRIM, PartiQLParserTRUE, PartiQLParserUPPER, PartiQLParserVALUES, PartiQLParserLAG, PartiQLParserLEAD, PartiQLParserCAN_CAST, PartiQLParserCAN_LOSSLESS_CAST, PartiQLParserMISSING, PartiQLParserLIST, PartiQLParserSEXP, PartiQLParserPLUS, PartiQLParserMINUS, PartiQLParserAT_SIGN, PartiQLParserANGLE_DOUBLE_LEFT, PartiQLParserBRACKET_LEFT, PartiQLParserBRACE_LEFT, PartiQLParserPAREN_LEFT, PartiQLParserQUESTION_MARK, PartiQLParserLITERAL_STRING, PartiQLParserLITERAL_INTEGER, PartiQLParserLITERAL_DECIMAL, PartiQLParserIDENTIFIER, PartiQLParserIDENTIFIER_QUOTED, PartiQLParserION_CLOSURE:
		localctx = NewSfwBaseContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1207)
			p.exprOr(0)
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExprOrContext is an interface to support dynamic dispatch.
type IExprOrContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsExprOrContext differentiates from other interfaces.
	IsExprOrContext()
}

type ExprOrContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExprOrContext() *ExprOrContext {
	var p = new(ExprOrContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_exprOr
	return p
}

func InitEmptyExprOrContext(p *ExprOrContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_exprOr
}

func (*ExprOrContext) IsExprOrContext() {}

func NewExprOrContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExprOrContext {
	var p = new(ExprOrContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_exprOr

	return p
}

func (s *ExprOrContext) GetParser() antlr.Parser { return s.parser }

func (s *ExprOrContext) CopyAll(ctx *ExprOrContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *ExprOrContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExprOrContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type OrContext struct {
	ExprOrContext
	lhs IExprOrContext
	rhs IExprAndContext
}

func NewOrContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *OrContext {
	var p = new(OrContext)

	InitEmptyExprOrContext(&p.ExprOrContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprOrContext))

	return p
}

func (s *OrContext) GetLhs() IExprOrContext { return s.lhs }

func (s *OrContext) GetRhs() IExprAndContext { return s.rhs }

func (s *OrContext) SetLhs(v IExprOrContext) { s.lhs = v }

func (s *OrContext) SetRhs(v IExprAndContext) { s.rhs = v }

func (s *OrContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OrContext) OR() antlr.TerminalNode {
	return s.GetToken(PartiQLParserOR, 0)
}

func (s *OrContext) ExprOr() IExprOrContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprOrContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprOrContext)
}

func (s *OrContext) ExprAnd() IExprAndContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprAndContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprAndContext)
}

func (s *OrContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterOr(s)
	}
}

func (s *OrContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitOr(s)
	}
}

type ExprOrBaseContext struct {
	ExprOrContext
	parent_ IExprAndContext
}

func NewExprOrBaseContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExprOrBaseContext {
	var p = new(ExprOrBaseContext)

	InitEmptyExprOrContext(&p.ExprOrContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprOrContext))

	return p
}

func (s *ExprOrBaseContext) GetParent_() IExprAndContext { return s.parent_ }

func (s *ExprOrBaseContext) SetParent_(v IExprAndContext) { s.parent_ = v }

func (s *ExprOrBaseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExprOrBaseContext) ExprAnd() IExprAndContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprAndContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprAndContext)
}

func (s *ExprOrBaseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterExprOrBase(s)
	}
}

func (s *ExprOrBaseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitExprOrBase(s)
	}
}

func (p *PartiQLParser) ExprOr() (localctx IExprOrContext) {
	return p.exprOr(0)
}

func (p *PartiQLParser) exprOr(_p int) (localctx IExprOrContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewExprOrContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IExprOrContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 192
	p.EnterRecursionRule(localctx, 192, PartiQLParserRULE_exprOr, _p)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	localctx = NewExprOrBaseContext(p, localctx)
	p.SetParserRuleContext(localctx)
	_prevctx = localctx

	{
		p.SetState(1211)

		var _x = p.exprAnd(0)

		localctx.(*ExprOrBaseContext).parent_ = _x
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(1218)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 154, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewOrContext(p, NewExprOrContext(p, _parentctx, _parentState))
			localctx.(*OrContext).lhs = _prevctx

			p.PushNewRecursionContext(localctx, _startState, PartiQLParserRULE_exprOr)
			p.SetState(1213)

			if !(p.Precpred(p.GetParserRuleContext(), 2)) {
				p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				goto errorExit
			}
			{
				p.SetState(1214)
				p.Match(PartiQLParserOR)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1215)

				var _x = p.exprAnd(0)

				localctx.(*OrContext).rhs = _x
			}

		}
		p.SetState(1220)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 154, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExprAndContext is an interface to support dynamic dispatch.
type IExprAndContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsExprAndContext differentiates from other interfaces.
	IsExprAndContext()
}

type ExprAndContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExprAndContext() *ExprAndContext {
	var p = new(ExprAndContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_exprAnd
	return p
}

func InitEmptyExprAndContext(p *ExprAndContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_exprAnd
}

func (*ExprAndContext) IsExprAndContext() {}

func NewExprAndContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExprAndContext {
	var p = new(ExprAndContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_exprAnd

	return p
}

func (s *ExprAndContext) GetParser() antlr.Parser { return s.parser }

func (s *ExprAndContext) CopyAll(ctx *ExprAndContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *ExprAndContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExprAndContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type ExprAndBaseContext struct {
	ExprAndContext
	parent_ IExprNotContext
}

func NewExprAndBaseContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExprAndBaseContext {
	var p = new(ExprAndBaseContext)

	InitEmptyExprAndContext(&p.ExprAndContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprAndContext))

	return p
}

func (s *ExprAndBaseContext) GetParent_() IExprNotContext { return s.parent_ }

func (s *ExprAndBaseContext) SetParent_(v IExprNotContext) { s.parent_ = v }

func (s *ExprAndBaseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExprAndBaseContext) ExprNot() IExprNotContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprNotContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprNotContext)
}

func (s *ExprAndBaseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterExprAndBase(s)
	}
}

func (s *ExprAndBaseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitExprAndBase(s)
	}
}

type AndContext struct {
	ExprAndContext
	lhs IExprAndContext
	op  antlr.Token
	rhs IExprNotContext
}

func NewAndContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AndContext {
	var p = new(AndContext)

	InitEmptyExprAndContext(&p.ExprAndContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprAndContext))

	return p
}

func (s *AndContext) GetOp() antlr.Token { return s.op }

func (s *AndContext) SetOp(v antlr.Token) { s.op = v }

func (s *AndContext) GetLhs() IExprAndContext { return s.lhs }

func (s *AndContext) GetRhs() IExprNotContext { return s.rhs }

func (s *AndContext) SetLhs(v IExprAndContext) { s.lhs = v }

func (s *AndContext) SetRhs(v IExprNotContext) { s.rhs = v }

func (s *AndContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AndContext) ExprAnd() IExprAndContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprAndContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprAndContext)
}

func (s *AndContext) AND() antlr.TerminalNode {
	return s.GetToken(PartiQLParserAND, 0)
}

func (s *AndContext) ExprNot() IExprNotContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprNotContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprNotContext)
}

func (s *AndContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterAnd(s)
	}
}

func (s *AndContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitAnd(s)
	}
}

func (p *PartiQLParser) ExprAnd() (localctx IExprAndContext) {
	return p.exprAnd(0)
}

func (p *PartiQLParser) exprAnd(_p int) (localctx IExprAndContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewExprAndContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IExprAndContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 194
	p.EnterRecursionRule(localctx, 194, PartiQLParserRULE_exprAnd, _p)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	localctx = NewExprAndBaseContext(p, localctx)
	p.SetParserRuleContext(localctx)
	_prevctx = localctx

	{
		p.SetState(1222)

		var _x = p.ExprNot()

		localctx.(*ExprAndBaseContext).parent_ = _x
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(1229)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 155, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewAndContext(p, NewExprAndContext(p, _parentctx, _parentState))
			localctx.(*AndContext).lhs = _prevctx

			p.PushNewRecursionContext(localctx, _startState, PartiQLParserRULE_exprAnd)
			p.SetState(1224)

			if !(p.Precpred(p.GetParserRuleContext(), 2)) {
				p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				goto errorExit
			}
			{
				p.SetState(1225)

				var _m = p.Match(PartiQLParserAND)

				localctx.(*AndContext).op = _m
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1226)

				var _x = p.ExprNot()

				localctx.(*AndContext).rhs = _x
			}

		}
		p.SetState(1231)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 155, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExprNotContext is an interface to support dynamic dispatch.
type IExprNotContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsExprNotContext differentiates from other interfaces.
	IsExprNotContext()
}

type ExprNotContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExprNotContext() *ExprNotContext {
	var p = new(ExprNotContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_exprNot
	return p
}

func InitEmptyExprNotContext(p *ExprNotContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_exprNot
}

func (*ExprNotContext) IsExprNotContext() {}

func NewExprNotContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExprNotContext {
	var p = new(ExprNotContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_exprNot

	return p
}

func (s *ExprNotContext) GetParser() antlr.Parser { return s.parser }

func (s *ExprNotContext) CopyAll(ctx *ExprNotContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *ExprNotContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExprNotContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type NotContext struct {
	ExprNotContext
	op  antlr.Token
	rhs IExprNotContext
}

func NewNotContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *NotContext {
	var p = new(NotContext)

	InitEmptyExprNotContext(&p.ExprNotContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprNotContext))

	return p
}

func (s *NotContext) GetOp() antlr.Token { return s.op }

func (s *NotContext) SetOp(v antlr.Token) { s.op = v }

func (s *NotContext) GetRhs() IExprNotContext { return s.rhs }

func (s *NotContext) SetRhs(v IExprNotContext) { s.rhs = v }

func (s *NotContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NotContext) NOT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserNOT, 0)
}

func (s *NotContext) ExprNot() IExprNotContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprNotContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprNotContext)
}

func (s *NotContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterNot(s)
	}
}

func (s *NotContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitNot(s)
	}
}

type ExprNotBaseContext struct {
	ExprNotContext
	parent_ IExprPredicateContext
}

func NewExprNotBaseContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExprNotBaseContext {
	var p = new(ExprNotBaseContext)

	InitEmptyExprNotContext(&p.ExprNotContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprNotContext))

	return p
}

func (s *ExprNotBaseContext) GetParent_() IExprPredicateContext { return s.parent_ }

func (s *ExprNotBaseContext) SetParent_(v IExprPredicateContext) { s.parent_ = v }

func (s *ExprNotBaseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExprNotBaseContext) ExprPredicate() IExprPredicateContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprPredicateContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprPredicateContext)
}

func (s *ExprNotBaseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterExprNotBase(s)
	}
}

func (s *ExprNotBaseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitExprNotBase(s)
	}
}

func (p *PartiQLParser) ExprNot() (localctx IExprNotContext) {
	localctx = NewExprNotContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 196, PartiQLParserRULE_exprNot)
	p.SetState(1235)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case PartiQLParserNOT:
		localctx = NewNotContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1232)

			var _m = p.Match(PartiQLParserNOT)

			localctx.(*NotContext).op = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1233)

			var _x = p.ExprNot()

			localctx.(*NotContext).rhs = _x
		}

	case PartiQLParserANY, PartiQLParserAVG, PartiQLParserBIT_LENGTH, PartiQLParserCASE, PartiQLParserCAST, PartiQLParserCHARACTER_LENGTH, PartiQLParserCHAR_LENGTH, PartiQLParserCOALESCE, PartiQLParserCOUNT, PartiQLParserCURRENT_DATE, PartiQLParserCURRENT_USER, PartiQLParserDATE, PartiQLParserEVERY, PartiQLParserEXCLUDED, PartiQLParserEXISTS, PartiQLParserEXTRACT, PartiQLParserDATE_ADD, PartiQLParserDATE_DIFF, PartiQLParserFALSE, PartiQLParserLOWER, PartiQLParserMAX, PartiQLParserMIN, PartiQLParserNULL, PartiQLParserNULLIF, PartiQLParserOCTET_LENGTH, PartiQLParserOVERLAY, PartiQLParserPOSITION, PartiQLParserSIZE, PartiQLParserSOME, PartiQLParserSUBSTRING, PartiQLParserSUM, PartiQLParserTIME, PartiQLParserTIMESTAMP, PartiQLParserTRIM, PartiQLParserTRUE, PartiQLParserUPPER, PartiQLParserVALUES, PartiQLParserLAG, PartiQLParserLEAD, PartiQLParserCAN_CAST, PartiQLParserCAN_LOSSLESS_CAST, PartiQLParserMISSING, PartiQLParserLIST, PartiQLParserSEXP, PartiQLParserPLUS, PartiQLParserMINUS, PartiQLParserAT_SIGN, PartiQLParserANGLE_DOUBLE_LEFT, PartiQLParserBRACKET_LEFT, PartiQLParserBRACE_LEFT, PartiQLParserPAREN_LEFT, PartiQLParserQUESTION_MARK, PartiQLParserLITERAL_STRING, PartiQLParserLITERAL_INTEGER, PartiQLParserLITERAL_DECIMAL, PartiQLParserIDENTIFIER, PartiQLParserIDENTIFIER_QUOTED, PartiQLParserION_CLOSURE:
		localctx = NewExprNotBaseContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1234)

			var _x = p.exprPredicate(0)

			localctx.(*ExprNotBaseContext).parent_ = _x
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExprPredicateContext is an interface to support dynamic dispatch.
type IExprPredicateContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsExprPredicateContext differentiates from other interfaces.
	IsExprPredicateContext()
}

type ExprPredicateContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExprPredicateContext() *ExprPredicateContext {
	var p = new(ExprPredicateContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_exprPredicate
	return p
}

func InitEmptyExprPredicateContext(p *ExprPredicateContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_exprPredicate
}

func (*ExprPredicateContext) IsExprPredicateContext() {}

func NewExprPredicateContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExprPredicateContext {
	var p = new(ExprPredicateContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_exprPredicate

	return p
}

func (s *ExprPredicateContext) GetParser() antlr.Parser { return s.parser }

func (s *ExprPredicateContext) CopyAll(ctx *ExprPredicateContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *ExprPredicateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExprPredicateContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type PredicateInContext struct {
	ExprPredicateContext
	lhs IExprPredicateContext
	rhs IMathOp00Context
}

func NewPredicateInContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PredicateInContext {
	var p = new(PredicateInContext)

	InitEmptyExprPredicateContext(&p.ExprPredicateContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprPredicateContext))

	return p
}

func (s *PredicateInContext) GetLhs() IExprPredicateContext { return s.lhs }

func (s *PredicateInContext) GetRhs() IMathOp00Context { return s.rhs }

func (s *PredicateInContext) SetLhs(v IExprPredicateContext) { s.lhs = v }

func (s *PredicateInContext) SetRhs(v IMathOp00Context) { s.rhs = v }

func (s *PredicateInContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PredicateInContext) IN() antlr.TerminalNode {
	return s.GetToken(PartiQLParserIN, 0)
}

func (s *PredicateInContext) PAREN_LEFT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserPAREN_LEFT, 0)
}

func (s *PredicateInContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *PredicateInContext) PAREN_RIGHT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserPAREN_RIGHT, 0)
}

func (s *PredicateInContext) ExprPredicate() IExprPredicateContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprPredicateContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprPredicateContext)
}

func (s *PredicateInContext) NOT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserNOT, 0)
}

func (s *PredicateInContext) MathOp00() IMathOp00Context {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMathOp00Context); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMathOp00Context)
}

func (s *PredicateInContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterPredicateIn(s)
	}
}

func (s *PredicateInContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitPredicateIn(s)
	}
}

type PredicateBetweenContext struct {
	ExprPredicateContext
	lhs   IExprPredicateContext
	lower IMathOp00Context
	upper IMathOp00Context
}

func NewPredicateBetweenContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PredicateBetweenContext {
	var p = new(PredicateBetweenContext)

	InitEmptyExprPredicateContext(&p.ExprPredicateContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprPredicateContext))

	return p
}

func (s *PredicateBetweenContext) GetLhs() IExprPredicateContext { return s.lhs }

func (s *PredicateBetweenContext) GetLower() IMathOp00Context { return s.lower }

func (s *PredicateBetweenContext) GetUpper() IMathOp00Context { return s.upper }

func (s *PredicateBetweenContext) SetLhs(v IExprPredicateContext) { s.lhs = v }

func (s *PredicateBetweenContext) SetLower(v IMathOp00Context) { s.lower = v }

func (s *PredicateBetweenContext) SetUpper(v IMathOp00Context) { s.upper = v }

func (s *PredicateBetweenContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PredicateBetweenContext) BETWEEN() antlr.TerminalNode {
	return s.GetToken(PartiQLParserBETWEEN, 0)
}

func (s *PredicateBetweenContext) AND() antlr.TerminalNode {
	return s.GetToken(PartiQLParserAND, 0)
}

func (s *PredicateBetweenContext) ExprPredicate() IExprPredicateContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprPredicateContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprPredicateContext)
}

func (s *PredicateBetweenContext) AllMathOp00() []IMathOp00Context {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IMathOp00Context); ok {
			len++
		}
	}

	tst := make([]IMathOp00Context, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IMathOp00Context); ok {
			tst[i] = t.(IMathOp00Context)
			i++
		}
	}

	return tst
}

func (s *PredicateBetweenContext) MathOp00(i int) IMathOp00Context {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMathOp00Context); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMathOp00Context)
}

func (s *PredicateBetweenContext) NOT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserNOT, 0)
}

func (s *PredicateBetweenContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterPredicateBetween(s)
	}
}

func (s *PredicateBetweenContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitPredicateBetween(s)
	}
}

type PredicateBaseContext struct {
	ExprPredicateContext
	parent_ IMathOp00Context
}

func NewPredicateBaseContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PredicateBaseContext {
	var p = new(PredicateBaseContext)

	InitEmptyExprPredicateContext(&p.ExprPredicateContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprPredicateContext))

	return p
}

func (s *PredicateBaseContext) GetParent_() IMathOp00Context { return s.parent_ }

func (s *PredicateBaseContext) SetParent_(v IMathOp00Context) { s.parent_ = v }

func (s *PredicateBaseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PredicateBaseContext) MathOp00() IMathOp00Context {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMathOp00Context); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMathOp00Context)
}

func (s *PredicateBaseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterPredicateBase(s)
	}
}

func (s *PredicateBaseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitPredicateBase(s)
	}
}

type PredicateComparisonContext struct {
	ExprPredicateContext
	lhs IExprPredicateContext
	op  antlr.Token
	rhs IMathOp00Context
}

func NewPredicateComparisonContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PredicateComparisonContext {
	var p = new(PredicateComparisonContext)

	InitEmptyExprPredicateContext(&p.ExprPredicateContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprPredicateContext))

	return p
}

func (s *PredicateComparisonContext) GetOp() antlr.Token { return s.op }

func (s *PredicateComparisonContext) SetOp(v antlr.Token) { s.op = v }

func (s *PredicateComparisonContext) GetLhs() IExprPredicateContext { return s.lhs }

func (s *PredicateComparisonContext) GetRhs() IMathOp00Context { return s.rhs }

func (s *PredicateComparisonContext) SetLhs(v IExprPredicateContext) { s.lhs = v }

func (s *PredicateComparisonContext) SetRhs(v IMathOp00Context) { s.rhs = v }

func (s *PredicateComparisonContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PredicateComparisonContext) ExprPredicate() IExprPredicateContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprPredicateContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprPredicateContext)
}

func (s *PredicateComparisonContext) MathOp00() IMathOp00Context {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMathOp00Context); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMathOp00Context)
}

func (s *PredicateComparisonContext) LT_EQ() antlr.TerminalNode {
	return s.GetToken(PartiQLParserLT_EQ, 0)
}

func (s *PredicateComparisonContext) GT_EQ() antlr.TerminalNode {
	return s.GetToken(PartiQLParserGT_EQ, 0)
}

func (s *PredicateComparisonContext) ANGLE_LEFT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserANGLE_LEFT, 0)
}

func (s *PredicateComparisonContext) ANGLE_RIGHT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserANGLE_RIGHT, 0)
}

func (s *PredicateComparisonContext) NEQ() antlr.TerminalNode {
	return s.GetToken(PartiQLParserNEQ, 0)
}

func (s *PredicateComparisonContext) EQ() antlr.TerminalNode {
	return s.GetToken(PartiQLParserEQ, 0)
}

func (s *PredicateComparisonContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterPredicateComparison(s)
	}
}

func (s *PredicateComparisonContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitPredicateComparison(s)
	}
}

type PredicateIsContext struct {
	ExprPredicateContext
	lhs IExprPredicateContext
}

func NewPredicateIsContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PredicateIsContext {
	var p = new(PredicateIsContext)

	InitEmptyExprPredicateContext(&p.ExprPredicateContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprPredicateContext))

	return p
}

func (s *PredicateIsContext) GetLhs() IExprPredicateContext { return s.lhs }

func (s *PredicateIsContext) SetLhs(v IExprPredicateContext) { s.lhs = v }

func (s *PredicateIsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PredicateIsContext) IS() antlr.TerminalNode {
	return s.GetToken(PartiQLParserIS, 0)
}

func (s *PredicateIsContext) Type_() ITypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeContext)
}

func (s *PredicateIsContext) ExprPredicate() IExprPredicateContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprPredicateContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprPredicateContext)
}

func (s *PredicateIsContext) NOT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserNOT, 0)
}

func (s *PredicateIsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterPredicateIs(s)
	}
}

func (s *PredicateIsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitPredicateIs(s)
	}
}

type PredicateLikeContext struct {
	ExprPredicateContext
	lhs    IExprPredicateContext
	rhs    IMathOp00Context
	escape IExprContext
}

func NewPredicateLikeContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PredicateLikeContext {
	var p = new(PredicateLikeContext)

	InitEmptyExprPredicateContext(&p.ExprPredicateContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprPredicateContext))

	return p
}

func (s *PredicateLikeContext) GetLhs() IExprPredicateContext { return s.lhs }

func (s *PredicateLikeContext) GetRhs() IMathOp00Context { return s.rhs }

func (s *PredicateLikeContext) GetEscape() IExprContext { return s.escape }

func (s *PredicateLikeContext) SetLhs(v IExprPredicateContext) { s.lhs = v }

func (s *PredicateLikeContext) SetRhs(v IMathOp00Context) { s.rhs = v }

func (s *PredicateLikeContext) SetEscape(v IExprContext) { s.escape = v }

func (s *PredicateLikeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PredicateLikeContext) LIKE() antlr.TerminalNode {
	return s.GetToken(PartiQLParserLIKE, 0)
}

func (s *PredicateLikeContext) ExprPredicate() IExprPredicateContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprPredicateContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprPredicateContext)
}

func (s *PredicateLikeContext) MathOp00() IMathOp00Context {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMathOp00Context); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMathOp00Context)
}

func (s *PredicateLikeContext) NOT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserNOT, 0)
}

func (s *PredicateLikeContext) ESCAPE() antlr.TerminalNode {
	return s.GetToken(PartiQLParserESCAPE, 0)
}

func (s *PredicateLikeContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *PredicateLikeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterPredicateLike(s)
	}
}

func (s *PredicateLikeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitPredicateLike(s)
	}
}

func (p *PartiQLParser) ExprPredicate() (localctx IExprPredicateContext) {
	return p.exprPredicate(0)
}

func (p *PartiQLParser) exprPredicate(_p int) (localctx IExprPredicateContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewExprPredicateContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IExprPredicateContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 198
	p.EnterRecursionRule(localctx, 198, PartiQLParserRULE_exprPredicate, _p)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	localctx = NewPredicateBaseContext(p, localctx)
	p.SetParserRuleContext(localctx)
	_prevctx = localctx

	{
		p.SetState(1238)

		var _x = p.mathOp00(0)

		localctx.(*PredicateBaseContext).parent_ = _x
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(1285)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 164, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(1283)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}

			switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 163, p.GetParserRuleContext()) {
			case 1:
				localctx = NewPredicateComparisonContext(p, NewExprPredicateContext(p, _parentctx, _parentState))
				localctx.(*PredicateComparisonContext).lhs = _prevctx

				p.PushNewRecursionContext(localctx, _startState, PartiQLParserRULE_exprPredicate)
				p.SetState(1240)

				if !(p.Precpred(p.GetParserRuleContext(), 7)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 7)", ""))
					goto errorExit
				}
				{
					p.SetState(1241)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*PredicateComparisonContext).op = _lt

					_la = p.GetTokenStream().LA(1)

					if !((int64((_la-281)) & ^0x3f) == 0 && ((int64(1)<<(_la-281))&111) != 0) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*PredicateComparisonContext).op = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(1242)

					var _x = p.mathOp00(0)

					localctx.(*PredicateComparisonContext).rhs = _x
				}

			case 2:
				localctx = NewPredicateIsContext(p, NewExprPredicateContext(p, _parentctx, _parentState))
				localctx.(*PredicateIsContext).lhs = _prevctx

				p.PushNewRecursionContext(localctx, _startState, PartiQLParserRULE_exprPredicate)
				p.SetState(1243)

				if !(p.Precpred(p.GetParserRuleContext(), 6)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 6)", ""))
					goto errorExit
				}
				{
					p.SetState(1244)
					p.Match(PartiQLParserIS)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				p.SetState(1246)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)

				if _la == PartiQLParserNOT {
					{
						p.SetState(1245)
						p.Match(PartiQLParserNOT)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				}
				{
					p.SetState(1248)
					p.Type_()
				}

			case 3:
				localctx = NewPredicateInContext(p, NewExprPredicateContext(p, _parentctx, _parentState))
				localctx.(*PredicateInContext).lhs = _prevctx

				p.PushNewRecursionContext(localctx, _startState, PartiQLParserRULE_exprPredicate)
				p.SetState(1249)

				if !(p.Precpred(p.GetParserRuleContext(), 5)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 5)", ""))
					goto errorExit
				}
				p.SetState(1251)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)

				if _la == PartiQLParserNOT {
					{
						p.SetState(1250)
						p.Match(PartiQLParserNOT)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				}
				{
					p.SetState(1253)
					p.Match(PartiQLParserIN)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(1254)
					p.Match(PartiQLParserPAREN_LEFT)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(1255)
					p.Expr()
				}
				{
					p.SetState(1256)
					p.Match(PartiQLParserPAREN_RIGHT)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			case 4:
				localctx = NewPredicateInContext(p, NewExprPredicateContext(p, _parentctx, _parentState))
				localctx.(*PredicateInContext).lhs = _prevctx

				p.PushNewRecursionContext(localctx, _startState, PartiQLParserRULE_exprPredicate)
				p.SetState(1258)

				if !(p.Precpred(p.GetParserRuleContext(), 4)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 4)", ""))
					goto errorExit
				}
				p.SetState(1260)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)

				if _la == PartiQLParserNOT {
					{
						p.SetState(1259)
						p.Match(PartiQLParserNOT)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				}
				{
					p.SetState(1262)
					p.Match(PartiQLParserIN)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(1263)

					var _x = p.mathOp00(0)

					localctx.(*PredicateInContext).rhs = _x
				}

			case 5:
				localctx = NewPredicateLikeContext(p, NewExprPredicateContext(p, _parentctx, _parentState))
				localctx.(*PredicateLikeContext).lhs = _prevctx

				p.PushNewRecursionContext(localctx, _startState, PartiQLParserRULE_exprPredicate)
				p.SetState(1264)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
					goto errorExit
				}
				p.SetState(1266)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)

				if _la == PartiQLParserNOT {
					{
						p.SetState(1265)
						p.Match(PartiQLParserNOT)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				}
				{
					p.SetState(1268)
					p.Match(PartiQLParserLIKE)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(1269)

					var _x = p.mathOp00(0)

					localctx.(*PredicateLikeContext).rhs = _x
				}
				p.SetState(1272)
				p.GetErrorHandler().Sync(p)

				if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 161, p.GetParserRuleContext()) == 1 {
					{
						p.SetState(1270)
						p.Match(PartiQLParserESCAPE)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}
					{
						p.SetState(1271)

						var _x = p.Expr()

						localctx.(*PredicateLikeContext).escape = _x
					}

				} else if p.HasError() { // JIM
					goto errorExit
				}

			case 6:
				localctx = NewPredicateBetweenContext(p, NewExprPredicateContext(p, _parentctx, _parentState))
				localctx.(*PredicateBetweenContext).lhs = _prevctx

				p.PushNewRecursionContext(localctx, _startState, PartiQLParserRULE_exprPredicate)
				p.SetState(1274)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
					goto errorExit
				}
				p.SetState(1276)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)

				if _la == PartiQLParserNOT {
					{
						p.SetState(1275)
						p.Match(PartiQLParserNOT)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				}
				{
					p.SetState(1278)
					p.Match(PartiQLParserBETWEEN)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(1279)

					var _x = p.mathOp00(0)

					localctx.(*PredicateBetweenContext).lower = _x
				}
				{
					p.SetState(1280)
					p.Match(PartiQLParserAND)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(1281)

					var _x = p.mathOp00(0)

					localctx.(*PredicateBetweenContext).upper = _x
				}

			case antlr.ATNInvalidAltNumber:
				goto errorExit
			}

		}
		p.SetState(1287)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 164, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IMathOp00Context is an interface to support dynamic dispatch.
type IMathOp00Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOp returns the op token.
	GetOp() antlr.Token

	// SetOp sets the op token.
	SetOp(antlr.Token)

	// GetLhs returns the lhs rule contexts.
	GetLhs() IMathOp00Context

	// GetParent_ returns the parent_ rule contexts.
	GetParent_() IMathOp01Context

	// GetRhs returns the rhs rule contexts.
	GetRhs() IMathOp01Context

	// SetLhs sets the lhs rule contexts.
	SetLhs(IMathOp00Context)

	// SetParent_ sets the parent_ rule contexts.
	SetParent_(IMathOp01Context)

	// SetRhs sets the rhs rule contexts.
	SetRhs(IMathOp01Context)

	// Getter signatures
	MathOp01() IMathOp01Context
	MathOp00() IMathOp00Context
	AMPERSAND() antlr.TerminalNode
	CONCAT() antlr.TerminalNode

	// IsMathOp00Context differentiates from other interfaces.
	IsMathOp00Context()
}

type MathOp00Context struct {
	antlr.BaseParserRuleContext
	parser  antlr.Parser
	lhs     IMathOp00Context
	parent_ IMathOp01Context
	op      antlr.Token
	rhs     IMathOp01Context
}

func NewEmptyMathOp00Context() *MathOp00Context {
	var p = new(MathOp00Context)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_mathOp00
	return p
}

func InitEmptyMathOp00Context(p *MathOp00Context) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_mathOp00
}

func (*MathOp00Context) IsMathOp00Context() {}

func NewMathOp00Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MathOp00Context {
	var p = new(MathOp00Context)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_mathOp00

	return p
}

func (s *MathOp00Context) GetParser() antlr.Parser { return s.parser }

func (s *MathOp00Context) GetOp() antlr.Token { return s.op }

func (s *MathOp00Context) SetOp(v antlr.Token) { s.op = v }

func (s *MathOp00Context) GetLhs() IMathOp00Context { return s.lhs }

func (s *MathOp00Context) GetParent_() IMathOp01Context { return s.parent_ }

func (s *MathOp00Context) GetRhs() IMathOp01Context { return s.rhs }

func (s *MathOp00Context) SetLhs(v IMathOp00Context) { s.lhs = v }

func (s *MathOp00Context) SetParent_(v IMathOp01Context) { s.parent_ = v }

func (s *MathOp00Context) SetRhs(v IMathOp01Context) { s.rhs = v }

func (s *MathOp00Context) MathOp01() IMathOp01Context {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMathOp01Context); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMathOp01Context)
}

func (s *MathOp00Context) MathOp00() IMathOp00Context {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMathOp00Context); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMathOp00Context)
}

func (s *MathOp00Context) AMPERSAND() antlr.TerminalNode {
	return s.GetToken(PartiQLParserAMPERSAND, 0)
}

func (s *MathOp00Context) CONCAT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserCONCAT, 0)
}

func (s *MathOp00Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MathOp00Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MathOp00Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterMathOp00(s)
	}
}

func (s *MathOp00Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitMathOp00(s)
	}
}

func (p *PartiQLParser) MathOp00() (localctx IMathOp00Context) {
	return p.mathOp00(0)
}

func (p *PartiQLParser) mathOp00(_p int) (localctx IMathOp00Context) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewMathOp00Context(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IMathOp00Context = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 200
	p.EnterRecursionRule(localctx, 200, PartiQLParserRULE_mathOp00, _p)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1289)

		var _x = p.mathOp01(0)

		localctx.(*MathOp00Context).parent_ = _x
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(1296)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 165, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewMathOp00Context(p, _parentctx, _parentState)
			localctx.(*MathOp00Context).lhs = _prevctx
			p.PushNewRecursionContext(localctx, _startState, PartiQLParserRULE_mathOp00)
			p.SetState(1291)

			if !(p.Precpred(p.GetParserRuleContext(), 2)) {
				p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				goto errorExit
			}
			{
				p.SetState(1292)

				var _lt = p.GetTokenStream().LT(1)

				localctx.(*MathOp00Context).op = _lt

				_la = p.GetTokenStream().LA(1)

				if !(_la == PartiQLParserAMPERSAND || _la == PartiQLParserCONCAT) {
					var _ri = p.GetErrorHandler().RecoverInline(p)

					localctx.(*MathOp00Context).op = _ri
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}
			{
				p.SetState(1293)

				var _x = p.mathOp01(0)

				localctx.(*MathOp00Context).rhs = _x
			}

		}
		p.SetState(1298)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 165, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IMathOp01Context is an interface to support dynamic dispatch.
type IMathOp01Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOp returns the op token.
	GetOp() antlr.Token

	// SetOp sets the op token.
	SetOp(antlr.Token)

	// GetLhs returns the lhs rule contexts.
	GetLhs() IMathOp01Context

	// GetParent_ returns the parent_ rule contexts.
	GetParent_() IMathOp02Context

	// GetRhs returns the rhs rule contexts.
	GetRhs() IMathOp02Context

	// SetLhs sets the lhs rule contexts.
	SetLhs(IMathOp01Context)

	// SetParent_ sets the parent_ rule contexts.
	SetParent_(IMathOp02Context)

	// SetRhs sets the rhs rule contexts.
	SetRhs(IMathOp02Context)

	// Getter signatures
	MathOp02() IMathOp02Context
	MathOp01() IMathOp01Context
	PLUS() antlr.TerminalNode
	MINUS() antlr.TerminalNode

	// IsMathOp01Context differentiates from other interfaces.
	IsMathOp01Context()
}

type MathOp01Context struct {
	antlr.BaseParserRuleContext
	parser  antlr.Parser
	lhs     IMathOp01Context
	parent_ IMathOp02Context
	op      antlr.Token
	rhs     IMathOp02Context
}

func NewEmptyMathOp01Context() *MathOp01Context {
	var p = new(MathOp01Context)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_mathOp01
	return p
}

func InitEmptyMathOp01Context(p *MathOp01Context) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_mathOp01
}

func (*MathOp01Context) IsMathOp01Context() {}

func NewMathOp01Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MathOp01Context {
	var p = new(MathOp01Context)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_mathOp01

	return p
}

func (s *MathOp01Context) GetParser() antlr.Parser { return s.parser }

func (s *MathOp01Context) GetOp() antlr.Token { return s.op }

func (s *MathOp01Context) SetOp(v antlr.Token) { s.op = v }

func (s *MathOp01Context) GetLhs() IMathOp01Context { return s.lhs }

func (s *MathOp01Context) GetParent_() IMathOp02Context { return s.parent_ }

func (s *MathOp01Context) GetRhs() IMathOp02Context { return s.rhs }

func (s *MathOp01Context) SetLhs(v IMathOp01Context) { s.lhs = v }

func (s *MathOp01Context) SetParent_(v IMathOp02Context) { s.parent_ = v }

func (s *MathOp01Context) SetRhs(v IMathOp02Context) { s.rhs = v }

func (s *MathOp01Context) MathOp02() IMathOp02Context {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMathOp02Context); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMathOp02Context)
}

func (s *MathOp01Context) MathOp01() IMathOp01Context {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMathOp01Context); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMathOp01Context)
}

func (s *MathOp01Context) PLUS() antlr.TerminalNode {
	return s.GetToken(PartiQLParserPLUS, 0)
}

func (s *MathOp01Context) MINUS() antlr.TerminalNode {
	return s.GetToken(PartiQLParserMINUS, 0)
}

func (s *MathOp01Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MathOp01Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MathOp01Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterMathOp01(s)
	}
}

func (s *MathOp01Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitMathOp01(s)
	}
}

func (p *PartiQLParser) MathOp01() (localctx IMathOp01Context) {
	return p.mathOp01(0)
}

func (p *PartiQLParser) mathOp01(_p int) (localctx IMathOp01Context) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewMathOp01Context(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IMathOp01Context = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 202
	p.EnterRecursionRule(localctx, 202, PartiQLParserRULE_mathOp01, _p)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1300)

		var _x = p.mathOp02(0)

		localctx.(*MathOp01Context).parent_ = _x
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(1307)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 166, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewMathOp01Context(p, _parentctx, _parentState)
			localctx.(*MathOp01Context).lhs = _prevctx
			p.PushNewRecursionContext(localctx, _startState, PartiQLParserRULE_mathOp01)
			p.SetState(1302)

			if !(p.Precpred(p.GetParserRuleContext(), 2)) {
				p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				goto errorExit
			}
			{
				p.SetState(1303)

				var _lt = p.GetTokenStream().LT(1)

				localctx.(*MathOp01Context).op = _lt

				_la = p.GetTokenStream().LA(1)

				if !(_la == PartiQLParserPLUS || _la == PartiQLParserMINUS) {
					var _ri = p.GetErrorHandler().RecoverInline(p)

					localctx.(*MathOp01Context).op = _ri
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}
			{
				p.SetState(1304)

				var _x = p.mathOp02(0)

				localctx.(*MathOp01Context).rhs = _x
			}

		}
		p.SetState(1309)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 166, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IMathOp02Context is an interface to support dynamic dispatch.
type IMathOp02Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOp returns the op token.
	GetOp() antlr.Token

	// SetOp sets the op token.
	SetOp(antlr.Token)

	// GetLhs returns the lhs rule contexts.
	GetLhs() IMathOp02Context

	// GetParent_ returns the parent_ rule contexts.
	GetParent_() IValueExprContext

	// GetRhs returns the rhs rule contexts.
	GetRhs() IValueExprContext

	// SetLhs sets the lhs rule contexts.
	SetLhs(IMathOp02Context)

	// SetParent_ sets the parent_ rule contexts.
	SetParent_(IValueExprContext)

	// SetRhs sets the rhs rule contexts.
	SetRhs(IValueExprContext)

	// Getter signatures
	ValueExpr() IValueExprContext
	MathOp02() IMathOp02Context
	PERCENT() antlr.TerminalNode
	ASTERISK() antlr.TerminalNode
	SLASH_FORWARD() antlr.TerminalNode

	// IsMathOp02Context differentiates from other interfaces.
	IsMathOp02Context()
}

type MathOp02Context struct {
	antlr.BaseParserRuleContext
	parser  antlr.Parser
	lhs     IMathOp02Context
	parent_ IValueExprContext
	op      antlr.Token
	rhs     IValueExprContext
}

func NewEmptyMathOp02Context() *MathOp02Context {
	var p = new(MathOp02Context)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_mathOp02
	return p
}

func InitEmptyMathOp02Context(p *MathOp02Context) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_mathOp02
}

func (*MathOp02Context) IsMathOp02Context() {}

func NewMathOp02Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MathOp02Context {
	var p = new(MathOp02Context)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_mathOp02

	return p
}

func (s *MathOp02Context) GetParser() antlr.Parser { return s.parser }

func (s *MathOp02Context) GetOp() antlr.Token { return s.op }

func (s *MathOp02Context) SetOp(v antlr.Token) { s.op = v }

func (s *MathOp02Context) GetLhs() IMathOp02Context { return s.lhs }

func (s *MathOp02Context) GetParent_() IValueExprContext { return s.parent_ }

func (s *MathOp02Context) GetRhs() IValueExprContext { return s.rhs }

func (s *MathOp02Context) SetLhs(v IMathOp02Context) { s.lhs = v }

func (s *MathOp02Context) SetParent_(v IValueExprContext) { s.parent_ = v }

func (s *MathOp02Context) SetRhs(v IValueExprContext) { s.rhs = v }

func (s *MathOp02Context) ValueExpr() IValueExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IValueExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IValueExprContext)
}

func (s *MathOp02Context) MathOp02() IMathOp02Context {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMathOp02Context); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMathOp02Context)
}

func (s *MathOp02Context) PERCENT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserPERCENT, 0)
}

func (s *MathOp02Context) ASTERISK() antlr.TerminalNode {
	return s.GetToken(PartiQLParserASTERISK, 0)
}

func (s *MathOp02Context) SLASH_FORWARD() antlr.TerminalNode {
	return s.GetToken(PartiQLParserSLASH_FORWARD, 0)
}

func (s *MathOp02Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MathOp02Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MathOp02Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterMathOp02(s)
	}
}

func (s *MathOp02Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitMathOp02(s)
	}
}

func (p *PartiQLParser) MathOp02() (localctx IMathOp02Context) {
	return p.mathOp02(0)
}

func (p *PartiQLParser) mathOp02(_p int) (localctx IMathOp02Context) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewMathOp02Context(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IMathOp02Context = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 204
	p.EnterRecursionRule(localctx, 204, PartiQLParserRULE_mathOp02, _p)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1311)

		var _x = p.ValueExpr()

		localctx.(*MathOp02Context).parent_ = _x
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(1318)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 167, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewMathOp02Context(p, _parentctx, _parentState)
			localctx.(*MathOp02Context).lhs = _prevctx
			p.PushNewRecursionContext(localctx, _startState, PartiQLParserRULE_mathOp02)
			p.SetState(1313)

			if !(p.Precpred(p.GetParserRuleContext(), 2)) {
				p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				goto errorExit
			}
			{
				p.SetState(1314)

				var _lt = p.GetTokenStream().LT(1)

				localctx.(*MathOp02Context).op = _lt

				_la = p.GetTokenStream().LA(1)

				if !((int64((_la-273)) & ^0x3f) == 0 && ((int64(1)<<(_la-273))&19) != 0) {
					var _ri = p.GetErrorHandler().RecoverInline(p)

					localctx.(*MathOp02Context).op = _ri
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}
			{
				p.SetState(1315)

				var _x = p.ValueExpr()

				localctx.(*MathOp02Context).rhs = _x
			}

		}
		p.SetState(1320)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 167, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IValueExprContext is an interface to support dynamic dispatch.
type IValueExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetSign returns the sign token.
	GetSign() antlr.Token

	// SetSign sets the sign token.
	SetSign(antlr.Token)

	// GetRhs returns the rhs rule contexts.
	GetRhs() IValueExprContext

	// GetParent_ returns the parent_ rule contexts.
	GetParent_() IExprPrimaryContext

	// SetRhs sets the rhs rule contexts.
	SetRhs(IValueExprContext)

	// SetParent_ sets the parent_ rule contexts.
	SetParent_(IExprPrimaryContext)

	// Getter signatures
	ValueExpr() IValueExprContext
	PLUS() antlr.TerminalNode
	MINUS() antlr.TerminalNode
	ExprPrimary() IExprPrimaryContext

	// IsValueExprContext differentiates from other interfaces.
	IsValueExprContext()
}

type ValueExprContext struct {
	antlr.BaseParserRuleContext
	parser  antlr.Parser
	sign    antlr.Token
	rhs     IValueExprContext
	parent_ IExprPrimaryContext
}

func NewEmptyValueExprContext() *ValueExprContext {
	var p = new(ValueExprContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_valueExpr
	return p
}

func InitEmptyValueExprContext(p *ValueExprContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_valueExpr
}

func (*ValueExprContext) IsValueExprContext() {}

func NewValueExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ValueExprContext {
	var p = new(ValueExprContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_valueExpr

	return p
}

func (s *ValueExprContext) GetParser() antlr.Parser { return s.parser }

func (s *ValueExprContext) GetSign() antlr.Token { return s.sign }

func (s *ValueExprContext) SetSign(v antlr.Token) { s.sign = v }

func (s *ValueExprContext) GetRhs() IValueExprContext { return s.rhs }

func (s *ValueExprContext) GetParent_() IExprPrimaryContext { return s.parent_ }

func (s *ValueExprContext) SetRhs(v IValueExprContext) { s.rhs = v }

func (s *ValueExprContext) SetParent_(v IExprPrimaryContext) { s.parent_ = v }

func (s *ValueExprContext) ValueExpr() IValueExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IValueExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IValueExprContext)
}

func (s *ValueExprContext) PLUS() antlr.TerminalNode {
	return s.GetToken(PartiQLParserPLUS, 0)
}

func (s *ValueExprContext) MINUS() antlr.TerminalNode {
	return s.GetToken(PartiQLParserMINUS, 0)
}

func (s *ValueExprContext) ExprPrimary() IExprPrimaryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprPrimaryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprPrimaryContext)
}

func (s *ValueExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ValueExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ValueExprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterValueExpr(s)
	}
}

func (s *ValueExprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitValueExpr(s)
	}
}

func (p *PartiQLParser) ValueExpr() (localctx IValueExprContext) {
	localctx = NewValueExprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 206, PartiQLParserRULE_valueExpr)
	var _la int

	p.SetState(1324)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case PartiQLParserPLUS, PartiQLParserMINUS:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1321)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*ValueExprContext).sign = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == PartiQLParserPLUS || _la == PartiQLParserMINUS) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*ValueExprContext).sign = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(1322)

			var _x = p.ValueExpr()

			localctx.(*ValueExprContext).rhs = _x
		}

	case PartiQLParserANY, PartiQLParserAVG, PartiQLParserBIT_LENGTH, PartiQLParserCASE, PartiQLParserCAST, PartiQLParserCHARACTER_LENGTH, PartiQLParserCHAR_LENGTH, PartiQLParserCOALESCE, PartiQLParserCOUNT, PartiQLParserCURRENT_DATE, PartiQLParserCURRENT_USER, PartiQLParserDATE, PartiQLParserEVERY, PartiQLParserEXCLUDED, PartiQLParserEXISTS, PartiQLParserEXTRACT, PartiQLParserDATE_ADD, PartiQLParserDATE_DIFF, PartiQLParserFALSE, PartiQLParserLOWER, PartiQLParserMAX, PartiQLParserMIN, PartiQLParserNULL, PartiQLParserNULLIF, PartiQLParserOCTET_LENGTH, PartiQLParserOVERLAY, PartiQLParserPOSITION, PartiQLParserSIZE, PartiQLParserSOME, PartiQLParserSUBSTRING, PartiQLParserSUM, PartiQLParserTIME, PartiQLParserTIMESTAMP, PartiQLParserTRIM, PartiQLParserTRUE, PartiQLParserUPPER, PartiQLParserVALUES, PartiQLParserLAG, PartiQLParserLEAD, PartiQLParserCAN_CAST, PartiQLParserCAN_LOSSLESS_CAST, PartiQLParserMISSING, PartiQLParserLIST, PartiQLParserSEXP, PartiQLParserAT_SIGN, PartiQLParserANGLE_DOUBLE_LEFT, PartiQLParserBRACKET_LEFT, PartiQLParserBRACE_LEFT, PartiQLParserPAREN_LEFT, PartiQLParserQUESTION_MARK, PartiQLParserLITERAL_STRING, PartiQLParserLITERAL_INTEGER, PartiQLParserLITERAL_DECIMAL, PartiQLParserIDENTIFIER, PartiQLParserIDENTIFIER_QUOTED, PartiQLParserION_CLOSURE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1323)

			var _x = p.exprPrimary(0)

			localctx.(*ValueExprContext).parent_ = _x
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExprPrimaryContext is an interface to support dynamic dispatch.
type IExprPrimaryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsExprPrimaryContext differentiates from other interfaces.
	IsExprPrimaryContext()
}

type ExprPrimaryContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExprPrimaryContext() *ExprPrimaryContext {
	var p = new(ExprPrimaryContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_exprPrimary
	return p
}

func InitEmptyExprPrimaryContext(p *ExprPrimaryContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_exprPrimary
}

func (*ExprPrimaryContext) IsExprPrimaryContext() {}

func NewExprPrimaryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExprPrimaryContext {
	var p = new(ExprPrimaryContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_exprPrimary

	return p
}

func (s *ExprPrimaryContext) GetParser() antlr.Parser { return s.parser }

func (s *ExprPrimaryContext) CopyAll(ctx *ExprPrimaryContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *ExprPrimaryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExprPrimaryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type ExprPrimaryPathContext struct {
	ExprPrimaryContext
}

func NewExprPrimaryPathContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExprPrimaryPathContext {
	var p = new(ExprPrimaryPathContext)

	InitEmptyExprPrimaryContext(&p.ExprPrimaryContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprPrimaryContext))

	return p
}

func (s *ExprPrimaryPathContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExprPrimaryPathContext) ExprPrimary() IExprPrimaryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprPrimaryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprPrimaryContext)
}

func (s *ExprPrimaryPathContext) AllPathStep() []IPathStepContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IPathStepContext); ok {
			len++
		}
	}

	tst := make([]IPathStepContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IPathStepContext); ok {
			tst[i] = t.(IPathStepContext)
			i++
		}
	}

	return tst
}

func (s *ExprPrimaryPathContext) PathStep(i int) IPathStepContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPathStepContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPathStepContext)
}

func (s *ExprPrimaryPathContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterExprPrimaryPath(s)
	}
}

func (s *ExprPrimaryPathContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitExprPrimaryPath(s)
	}
}

type ExprPrimaryBaseContext struct {
	ExprPrimaryContext
}

func NewExprPrimaryBaseContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExprPrimaryBaseContext {
	var p = new(ExprPrimaryBaseContext)

	InitEmptyExprPrimaryContext(&p.ExprPrimaryContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprPrimaryContext))

	return p
}

func (s *ExprPrimaryBaseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExprPrimaryBaseContext) ExprTerm() IExprTermContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprTermContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprTermContext)
}

func (s *ExprPrimaryBaseContext) Cast() ICastContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICastContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICastContext)
}

func (s *ExprPrimaryBaseContext) SequenceConstructor() ISequenceConstructorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISequenceConstructorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISequenceConstructorContext)
}

func (s *ExprPrimaryBaseContext) Substring() ISubstringContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISubstringContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISubstringContext)
}

func (s *ExprPrimaryBaseContext) Position() IPositionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPositionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPositionContext)
}

func (s *ExprPrimaryBaseContext) Overlay() IOverlayContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOverlayContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOverlayContext)
}

func (s *ExprPrimaryBaseContext) CanCast() ICanCastContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICanCastContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICanCastContext)
}

func (s *ExprPrimaryBaseContext) CanLosslessCast() ICanLosslessCastContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICanLosslessCastContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICanLosslessCastContext)
}

func (s *ExprPrimaryBaseContext) Extract() IExtractContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExtractContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExtractContext)
}

func (s *ExprPrimaryBaseContext) Coalesce() ICoalesceContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICoalesceContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICoalesceContext)
}

func (s *ExprPrimaryBaseContext) DateFunction() IDateFunctionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDateFunctionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDateFunctionContext)
}

func (s *ExprPrimaryBaseContext) Aggregate() IAggregateContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAggregateContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAggregateContext)
}

func (s *ExprPrimaryBaseContext) TrimFunction() ITrimFunctionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITrimFunctionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITrimFunctionContext)
}

func (s *ExprPrimaryBaseContext) FunctionCall() IFunctionCallContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunctionCallContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunctionCallContext)
}

func (s *ExprPrimaryBaseContext) NullIf() INullIfContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INullIfContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INullIfContext)
}

func (s *ExprPrimaryBaseContext) ExprGraphMatchMany() IExprGraphMatchManyContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprGraphMatchManyContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprGraphMatchManyContext)
}

func (s *ExprPrimaryBaseContext) CaseExpr() ICaseExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICaseExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICaseExprContext)
}

func (s *ExprPrimaryBaseContext) ValueList() IValueListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IValueListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IValueListContext)
}

func (s *ExprPrimaryBaseContext) Values() IValuesContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IValuesContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IValuesContext)
}

func (s *ExprPrimaryBaseContext) WindowFunction() IWindowFunctionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWindowFunctionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWindowFunctionContext)
}

func (s *ExprPrimaryBaseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterExprPrimaryBase(s)
	}
}

func (s *ExprPrimaryBaseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitExprPrimaryBase(s)
	}
}

func (p *PartiQLParser) ExprPrimary() (localctx IExprPrimaryContext) {
	return p.exprPrimary(0)
}

func (p *PartiQLParser) exprPrimary(_p int) (localctx IExprPrimaryContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewExprPrimaryContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IExprPrimaryContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 208
	p.EnterRecursionRule(localctx, 208, PartiQLParserRULE_exprPrimary, _p)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1347)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 169, p.GetParserRuleContext()) {
	case 1:
		localctx = NewExprPrimaryBaseContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx

		{
			p.SetState(1327)
			p.ExprTerm()
		}

	case 2:
		localctx = NewExprPrimaryBaseContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1328)
			p.Cast()
		}

	case 3:
		localctx = NewExprPrimaryBaseContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1329)
			p.SequenceConstructor()
		}

	case 4:
		localctx = NewExprPrimaryBaseContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1330)
			p.Substring()
		}

	case 5:
		localctx = NewExprPrimaryBaseContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1331)
			p.Position()
		}

	case 6:
		localctx = NewExprPrimaryBaseContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1332)
			p.Overlay()
		}

	case 7:
		localctx = NewExprPrimaryBaseContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1333)
			p.CanCast()
		}

	case 8:
		localctx = NewExprPrimaryBaseContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1334)
			p.CanLosslessCast()
		}

	case 9:
		localctx = NewExprPrimaryBaseContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1335)
			p.Extract()
		}

	case 10:
		localctx = NewExprPrimaryBaseContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1336)
			p.Coalesce()
		}

	case 11:
		localctx = NewExprPrimaryBaseContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1337)
			p.DateFunction()
		}

	case 12:
		localctx = NewExprPrimaryBaseContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1338)
			p.Aggregate()
		}

	case 13:
		localctx = NewExprPrimaryBaseContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1339)
			p.TrimFunction()
		}

	case 14:
		localctx = NewExprPrimaryBaseContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1340)
			p.FunctionCall()
		}

	case 15:
		localctx = NewExprPrimaryBaseContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1341)
			p.NullIf()
		}

	case 16:
		localctx = NewExprPrimaryBaseContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1342)
			p.ExprGraphMatchMany()
		}

	case 17:
		localctx = NewExprPrimaryBaseContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1343)
			p.CaseExpr()
		}

	case 18:
		localctx = NewExprPrimaryBaseContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1344)
			p.ValueList()
		}

	case 19:
		localctx = NewExprPrimaryBaseContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1345)
			p.Values()
		}

	case 20:
		localctx = NewExprPrimaryBaseContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(1346)
			p.WindowFunction()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(1357)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 171, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewExprPrimaryPathContext(p, NewExprPrimaryContext(p, _parentctx, _parentState))
			p.PushNewRecursionContext(localctx, _startState, PartiQLParserRULE_exprPrimary)
			p.SetState(1349)

			if !(p.Precpred(p.GetParserRuleContext(), 6)) {
				p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 6)", ""))
				goto errorExit
			}
			p.SetState(1351)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = 1
			for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
				switch _alt {
				case 1:
					{
						p.SetState(1350)
						p.PathStep()
					}

				default:
					p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
					goto errorExit
				}

				p.SetState(1353)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 170, p.GetParserRuleContext())
				if p.HasError() {
					goto errorExit
				}
			}

		}
		p.SetState(1359)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 171, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExprTermContext is an interface to support dynamic dispatch.
type IExprTermContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsExprTermContext differentiates from other interfaces.
	IsExprTermContext()
}

type ExprTermContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExprTermContext() *ExprTermContext {
	var p = new(ExprTermContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_exprTerm
	return p
}

func InitEmptyExprTermContext(p *ExprTermContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_exprTerm
}

func (*ExprTermContext) IsExprTermContext() {}

func NewExprTermContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExprTermContext {
	var p = new(ExprTermContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_exprTerm

	return p
}

func (s *ExprTermContext) GetParser() antlr.Parser { return s.parser }

func (s *ExprTermContext) CopyAll(ctx *ExprTermContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *ExprTermContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExprTermContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type ExprTermWrappedQueryContext struct {
	ExprTermContext
}

func NewExprTermWrappedQueryContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExprTermWrappedQueryContext {
	var p = new(ExprTermWrappedQueryContext)

	InitEmptyExprTermContext(&p.ExprTermContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprTermContext))

	return p
}

func (s *ExprTermWrappedQueryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExprTermWrappedQueryContext) PAREN_LEFT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserPAREN_LEFT, 0)
}

func (s *ExprTermWrappedQueryContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *ExprTermWrappedQueryContext) PAREN_RIGHT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserPAREN_RIGHT, 0)
}

func (s *ExprTermWrappedQueryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterExprTermWrappedQuery(s)
	}
}

func (s *ExprTermWrappedQueryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitExprTermWrappedQuery(s)
	}
}

type ExprTermBaseContext struct {
	ExprTermContext
}

func NewExprTermBaseContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExprTermBaseContext {
	var p = new(ExprTermBaseContext)

	InitEmptyExprTermContext(&p.ExprTermContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprTermContext))

	return p
}

func (s *ExprTermBaseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExprTermBaseContext) Parameter() IParameterContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IParameterContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IParameterContext)
}

func (s *ExprTermBaseContext) VarRefExpr() IVarRefExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVarRefExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVarRefExprContext)
}

func (s *ExprTermBaseContext) Literal() ILiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILiteralContext)
}

func (s *ExprTermBaseContext) Collection() ICollectionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICollectionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICollectionContext)
}

func (s *ExprTermBaseContext) Tuple() ITupleContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITupleContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITupleContext)
}

func (s *ExprTermBaseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterExprTermBase(s)
	}
}

func (s *ExprTermBaseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitExprTermBase(s)
	}
}

type ExprTermCurrentUserContext struct {
	ExprTermContext
}

func NewExprTermCurrentUserContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExprTermCurrentUserContext {
	var p = new(ExprTermCurrentUserContext)

	InitEmptyExprTermContext(&p.ExprTermContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprTermContext))

	return p
}

func (s *ExprTermCurrentUserContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExprTermCurrentUserContext) CURRENT_USER() antlr.TerminalNode {
	return s.GetToken(PartiQLParserCURRENT_USER, 0)
}

func (s *ExprTermCurrentUserContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterExprTermCurrentUser(s)
	}
}

func (s *ExprTermCurrentUserContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitExprTermCurrentUser(s)
	}
}

type ExprTermCurrentDateContext struct {
	ExprTermContext
}

func NewExprTermCurrentDateContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExprTermCurrentDateContext {
	var p = new(ExprTermCurrentDateContext)

	InitEmptyExprTermContext(&p.ExprTermContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprTermContext))

	return p
}

func (s *ExprTermCurrentDateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExprTermCurrentDateContext) CURRENT_DATE() antlr.TerminalNode {
	return s.GetToken(PartiQLParserCURRENT_DATE, 0)
}

func (s *ExprTermCurrentDateContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterExprTermCurrentDate(s)
	}
}

func (s *ExprTermCurrentDateContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitExprTermCurrentDate(s)
	}
}

func (p *PartiQLParser) ExprTerm() (localctx IExprTermContext) {
	localctx = NewExprTermContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 210, PartiQLParserRULE_exprTerm)
	p.SetState(1371)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case PartiQLParserPAREN_LEFT:
		localctx = NewExprTermWrappedQueryContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1360)
			p.Match(PartiQLParserPAREN_LEFT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1361)
			p.Expr()
		}
		{
			p.SetState(1362)
			p.Match(PartiQLParserPAREN_RIGHT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case PartiQLParserCURRENT_USER:
		localctx = NewExprTermCurrentUserContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1364)
			p.Match(PartiQLParserCURRENT_USER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case PartiQLParserCURRENT_DATE:
		localctx = NewExprTermCurrentDateContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1365)
			p.Match(PartiQLParserCURRENT_DATE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case PartiQLParserQUESTION_MARK:
		localctx = NewExprTermBaseContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1366)
			p.Parameter()
		}

	case PartiQLParserEXCLUDED, PartiQLParserAT_SIGN, PartiQLParserIDENTIFIER, PartiQLParserIDENTIFIER_QUOTED:
		localctx = NewExprTermBaseContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1367)
			p.VarRefExpr()
		}

	case PartiQLParserDATE, PartiQLParserFALSE, PartiQLParserNULL, PartiQLParserTIME, PartiQLParserTIMESTAMP, PartiQLParserTRUE, PartiQLParserMISSING, PartiQLParserLITERAL_STRING, PartiQLParserLITERAL_INTEGER, PartiQLParserLITERAL_DECIMAL, PartiQLParserION_CLOSURE:
		localctx = NewExprTermBaseContext(p, localctx)
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1368)
			p.Literal()
		}

	case PartiQLParserANGLE_DOUBLE_LEFT, PartiQLParserBRACKET_LEFT:
		localctx = NewExprTermBaseContext(p, localctx)
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1369)
			p.Collection()
		}

	case PartiQLParserBRACE_LEFT:
		localctx = NewExprTermBaseContext(p, localctx)
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(1370)
			p.Tuple()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INullIfContext is an interface to support dynamic dispatch.
type INullIfContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	NULLIF() antlr.TerminalNode
	PAREN_LEFT() antlr.TerminalNode
	AllExpr() []IExprContext
	Expr(i int) IExprContext
	COMMA() antlr.TerminalNode
	PAREN_RIGHT() antlr.TerminalNode

	// IsNullIfContext differentiates from other interfaces.
	IsNullIfContext()
}

type NullIfContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNullIfContext() *NullIfContext {
	var p = new(NullIfContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_nullIf
	return p
}

func InitEmptyNullIfContext(p *NullIfContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_nullIf
}

func (*NullIfContext) IsNullIfContext() {}

func NewNullIfContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NullIfContext {
	var p = new(NullIfContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_nullIf

	return p
}

func (s *NullIfContext) GetParser() antlr.Parser { return s.parser }

func (s *NullIfContext) NULLIF() antlr.TerminalNode {
	return s.GetToken(PartiQLParserNULLIF, 0)
}

func (s *NullIfContext) PAREN_LEFT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserPAREN_LEFT, 0)
}

func (s *NullIfContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *NullIfContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *NullIfContext) COMMA() antlr.TerminalNode {
	return s.GetToken(PartiQLParserCOMMA, 0)
}

func (s *NullIfContext) PAREN_RIGHT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserPAREN_RIGHT, 0)
}

func (s *NullIfContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NullIfContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NullIfContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterNullIf(s)
	}
}

func (s *NullIfContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitNullIf(s)
	}
}

func (p *PartiQLParser) NullIf() (localctx INullIfContext) {
	localctx = NewNullIfContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 212, PartiQLParserRULE_nullIf)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1373)
		p.Match(PartiQLParserNULLIF)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1374)
		p.Match(PartiQLParserPAREN_LEFT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1375)
		p.Expr()
	}
	{
		p.SetState(1376)
		p.Match(PartiQLParserCOMMA)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1377)
		p.Expr()
	}
	{
		p.SetState(1378)
		p.Match(PartiQLParserPAREN_RIGHT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICoalesceContext is an interface to support dynamic dispatch.
type ICoalesceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	COALESCE() antlr.TerminalNode
	PAREN_LEFT() antlr.TerminalNode
	AllExpr() []IExprContext
	Expr(i int) IExprContext
	PAREN_RIGHT() antlr.TerminalNode
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsCoalesceContext differentiates from other interfaces.
	IsCoalesceContext()
}

type CoalesceContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCoalesceContext() *CoalesceContext {
	var p = new(CoalesceContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_coalesce
	return p
}

func InitEmptyCoalesceContext(p *CoalesceContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_coalesce
}

func (*CoalesceContext) IsCoalesceContext() {}

func NewCoalesceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CoalesceContext {
	var p = new(CoalesceContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_coalesce

	return p
}

func (s *CoalesceContext) GetParser() antlr.Parser { return s.parser }

func (s *CoalesceContext) COALESCE() antlr.TerminalNode {
	return s.GetToken(PartiQLParserCOALESCE, 0)
}

func (s *CoalesceContext) PAREN_LEFT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserPAREN_LEFT, 0)
}

func (s *CoalesceContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *CoalesceContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *CoalesceContext) PAREN_RIGHT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserPAREN_RIGHT, 0)
}

func (s *CoalesceContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PartiQLParserCOMMA)
}

func (s *CoalesceContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PartiQLParserCOMMA, i)
}

func (s *CoalesceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CoalesceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CoalesceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterCoalesce(s)
	}
}

func (s *CoalesceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitCoalesce(s)
	}
}

func (p *PartiQLParser) Coalesce() (localctx ICoalesceContext) {
	localctx = NewCoalesceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 214, PartiQLParserRULE_coalesce)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1380)
		p.Match(PartiQLParserCOALESCE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1381)
		p.Match(PartiQLParserPAREN_LEFT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1382)
		p.Expr()
	}
	p.SetState(1387)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == PartiQLParserCOMMA {
		{
			p.SetState(1383)
			p.Match(PartiQLParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1384)
			p.Expr()
		}

		p.SetState(1389)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1390)
		p.Match(PartiQLParserPAREN_RIGHT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICaseExprContext is an interface to support dynamic dispatch.
type ICaseExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetCase_ returns the case_ rule contexts.
	GetCase_() IExprContext

	// Get_expr returns the _expr rule contexts.
	Get_expr() IExprContext

	// GetElse_ returns the else_ rule contexts.
	GetElse_() IExprContext

	// SetCase_ sets the case_ rule contexts.
	SetCase_(IExprContext)

	// Set_expr sets the _expr rule contexts.
	Set_expr(IExprContext)

	// SetElse_ sets the else_ rule contexts.
	SetElse_(IExprContext)

	// GetWhens returns the whens rule context list.
	GetWhens() []IExprContext

	// GetThens returns the thens rule context list.
	GetThens() []IExprContext

	// SetWhens sets the whens rule context list.
	SetWhens([]IExprContext)

	// SetThens sets the thens rule context list.
	SetThens([]IExprContext)

	// Getter signatures
	CASE() antlr.TerminalNode
	END() antlr.TerminalNode
	AllWHEN() []antlr.TerminalNode
	WHEN(i int) antlr.TerminalNode
	AllTHEN() []antlr.TerminalNode
	THEN(i int) antlr.TerminalNode
	ELSE() antlr.TerminalNode
	AllExpr() []IExprContext
	Expr(i int) IExprContext

	// IsCaseExprContext differentiates from other interfaces.
	IsCaseExprContext()
}

type CaseExprContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	case_  IExprContext
	_expr  IExprContext
	whens  []IExprContext
	thens  []IExprContext
	else_  IExprContext
}

func NewEmptyCaseExprContext() *CaseExprContext {
	var p = new(CaseExprContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_caseExpr
	return p
}

func InitEmptyCaseExprContext(p *CaseExprContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_caseExpr
}

func (*CaseExprContext) IsCaseExprContext() {}

func NewCaseExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CaseExprContext {
	var p = new(CaseExprContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_caseExpr

	return p
}

func (s *CaseExprContext) GetParser() antlr.Parser { return s.parser }

func (s *CaseExprContext) GetCase_() IExprContext { return s.case_ }

func (s *CaseExprContext) Get_expr() IExprContext { return s._expr }

func (s *CaseExprContext) GetElse_() IExprContext { return s.else_ }

func (s *CaseExprContext) SetCase_(v IExprContext) { s.case_ = v }

func (s *CaseExprContext) Set_expr(v IExprContext) { s._expr = v }

func (s *CaseExprContext) SetElse_(v IExprContext) { s.else_ = v }

func (s *CaseExprContext) GetWhens() []IExprContext { return s.whens }

func (s *CaseExprContext) GetThens() []IExprContext { return s.thens }

func (s *CaseExprContext) SetWhens(v []IExprContext) { s.whens = v }

func (s *CaseExprContext) SetThens(v []IExprContext) { s.thens = v }

func (s *CaseExprContext) CASE() antlr.TerminalNode {
	return s.GetToken(PartiQLParserCASE, 0)
}

func (s *CaseExprContext) END() antlr.TerminalNode {
	return s.GetToken(PartiQLParserEND, 0)
}

func (s *CaseExprContext) AllWHEN() []antlr.TerminalNode {
	return s.GetTokens(PartiQLParserWHEN)
}

func (s *CaseExprContext) WHEN(i int) antlr.TerminalNode {
	return s.GetToken(PartiQLParserWHEN, i)
}

func (s *CaseExprContext) AllTHEN() []antlr.TerminalNode {
	return s.GetTokens(PartiQLParserTHEN)
}

func (s *CaseExprContext) THEN(i int) antlr.TerminalNode {
	return s.GetToken(PartiQLParserTHEN, i)
}

func (s *CaseExprContext) ELSE() antlr.TerminalNode {
	return s.GetToken(PartiQLParserELSE, 0)
}

func (s *CaseExprContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *CaseExprContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *CaseExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CaseExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CaseExprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterCaseExpr(s)
	}
}

func (s *CaseExprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitCaseExpr(s)
	}
}

func (p *PartiQLParser) CaseExpr() (localctx ICaseExprContext) {
	localctx = NewCaseExprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 216, PartiQLParserRULE_caseExpr)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1392)
		p.Match(PartiQLParserCASE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1394)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&11558071357178112) != 0) || ((int64((_la-75)) & ^0x3f) == 0 && ((int64(1)<<(_la-75))&234187180623281297) != 0) || ((int64((_la-140)) & ^0x3f) == 0 && ((int64(1)<<(_la-140))&7026323504187375659) != 0) || ((int64((_la-207)) & ^0x3f) == 0 && ((int64(1)<<(_la-207))&1729382258948706371) != 0) || ((int64((_la-271)) & ^0x3f) == 0 && ((int64(1)<<(_la-271))&291666264083) != 0) {
		{
			p.SetState(1393)

			var _x = p.Expr()

			localctx.(*CaseExprContext).case_ = _x
		}

	}
	p.SetState(1401)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == PartiQLParserWHEN {
		{
			p.SetState(1396)
			p.Match(PartiQLParserWHEN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1397)

			var _x = p.Expr()

			localctx.(*CaseExprContext)._expr = _x
		}
		localctx.(*CaseExprContext).whens = append(localctx.(*CaseExprContext).whens, localctx.(*CaseExprContext)._expr)
		{
			p.SetState(1398)
			p.Match(PartiQLParserTHEN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1399)

			var _x = p.Expr()

			localctx.(*CaseExprContext)._expr = _x
		}
		localctx.(*CaseExprContext).thens = append(localctx.(*CaseExprContext).thens, localctx.(*CaseExprContext)._expr)

		p.SetState(1403)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(1407)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == PartiQLParserELSE {
		{
			p.SetState(1405)
			p.Match(PartiQLParserELSE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1406)

			var _x = p.Expr()

			localctx.(*CaseExprContext).else_ = _x
		}

	}
	{
		p.SetState(1409)
		p.Match(PartiQLParserEND)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IValuesContext is an interface to support dynamic dispatch.
type IValuesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	VALUES() antlr.TerminalNode
	AllValueRow() []IValueRowContext
	ValueRow(i int) IValueRowContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsValuesContext differentiates from other interfaces.
	IsValuesContext()
}

type ValuesContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyValuesContext() *ValuesContext {
	var p = new(ValuesContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_values
	return p
}

func InitEmptyValuesContext(p *ValuesContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_values
}

func (*ValuesContext) IsValuesContext() {}

func NewValuesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ValuesContext {
	var p = new(ValuesContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_values

	return p
}

func (s *ValuesContext) GetParser() antlr.Parser { return s.parser }

func (s *ValuesContext) VALUES() antlr.TerminalNode {
	return s.GetToken(PartiQLParserVALUES, 0)
}

func (s *ValuesContext) AllValueRow() []IValueRowContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IValueRowContext); ok {
			len++
		}
	}

	tst := make([]IValueRowContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IValueRowContext); ok {
			tst[i] = t.(IValueRowContext)
			i++
		}
	}

	return tst
}

func (s *ValuesContext) ValueRow(i int) IValueRowContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IValueRowContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IValueRowContext)
}

func (s *ValuesContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PartiQLParserCOMMA)
}

func (s *ValuesContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PartiQLParserCOMMA, i)
}

func (s *ValuesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ValuesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ValuesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterValues(s)
	}
}

func (s *ValuesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitValues(s)
	}
}

func (p *PartiQLParser) Values() (localctx IValuesContext) {
	localctx = NewValuesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 218, PartiQLParserRULE_values)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1411)
		p.Match(PartiQLParserVALUES)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1412)
		p.ValueRow()
	}
	p.SetState(1417)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 177, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1413)
				p.Match(PartiQLParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1414)
				p.ValueRow()
			}

		}
		p.SetState(1419)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 177, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IValueRowContext is an interface to support dynamic dispatch.
type IValueRowContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	PAREN_LEFT() antlr.TerminalNode
	AllExpr() []IExprContext
	Expr(i int) IExprContext
	PAREN_RIGHT() antlr.TerminalNode
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsValueRowContext differentiates from other interfaces.
	IsValueRowContext()
}

type ValueRowContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyValueRowContext() *ValueRowContext {
	var p = new(ValueRowContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_valueRow
	return p
}

func InitEmptyValueRowContext(p *ValueRowContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_valueRow
}

func (*ValueRowContext) IsValueRowContext() {}

func NewValueRowContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ValueRowContext {
	var p = new(ValueRowContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_valueRow

	return p
}

func (s *ValueRowContext) GetParser() antlr.Parser { return s.parser }

func (s *ValueRowContext) PAREN_LEFT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserPAREN_LEFT, 0)
}

func (s *ValueRowContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *ValueRowContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *ValueRowContext) PAREN_RIGHT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserPAREN_RIGHT, 0)
}

func (s *ValueRowContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PartiQLParserCOMMA)
}

func (s *ValueRowContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PartiQLParserCOMMA, i)
}

func (s *ValueRowContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ValueRowContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ValueRowContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterValueRow(s)
	}
}

func (s *ValueRowContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitValueRow(s)
	}
}

func (p *PartiQLParser) ValueRow() (localctx IValueRowContext) {
	localctx = NewValueRowContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 220, PartiQLParserRULE_valueRow)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1420)
		p.Match(PartiQLParserPAREN_LEFT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1421)
		p.Expr()
	}
	p.SetState(1426)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == PartiQLParserCOMMA {
		{
			p.SetState(1422)
			p.Match(PartiQLParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1423)
			p.Expr()
		}

		p.SetState(1428)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1429)
		p.Match(PartiQLParserPAREN_RIGHT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IValueListContext is an interface to support dynamic dispatch.
type IValueListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	PAREN_LEFT() antlr.TerminalNode
	AllExpr() []IExprContext
	Expr(i int) IExprContext
	PAREN_RIGHT() antlr.TerminalNode
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsValueListContext differentiates from other interfaces.
	IsValueListContext()
}

type ValueListContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyValueListContext() *ValueListContext {
	var p = new(ValueListContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_valueList
	return p
}

func InitEmptyValueListContext(p *ValueListContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_valueList
}

func (*ValueListContext) IsValueListContext() {}

func NewValueListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ValueListContext {
	var p = new(ValueListContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_valueList

	return p
}

func (s *ValueListContext) GetParser() antlr.Parser { return s.parser }

func (s *ValueListContext) PAREN_LEFT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserPAREN_LEFT, 0)
}

func (s *ValueListContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *ValueListContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *ValueListContext) PAREN_RIGHT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserPAREN_RIGHT, 0)
}

func (s *ValueListContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PartiQLParserCOMMA)
}

func (s *ValueListContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PartiQLParserCOMMA, i)
}

func (s *ValueListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ValueListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ValueListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterValueList(s)
	}
}

func (s *ValueListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitValueList(s)
	}
}

func (p *PartiQLParser) ValueList() (localctx IValueListContext) {
	localctx = NewValueListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 222, PartiQLParserRULE_valueList)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1431)
		p.Match(PartiQLParserPAREN_LEFT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1432)
		p.Expr()
	}
	p.SetState(1435)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == PartiQLParserCOMMA {
		{
			p.SetState(1433)
			p.Match(PartiQLParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1434)
			p.Expr()
		}

		p.SetState(1437)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1439)
		p.Match(PartiQLParserPAREN_RIGHT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISequenceConstructorContext is an interface to support dynamic dispatch.
type ISequenceConstructorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetDatatype returns the datatype token.
	GetDatatype() antlr.Token

	// SetDatatype sets the datatype token.
	SetDatatype(antlr.Token)

	// Getter signatures
	PAREN_LEFT() antlr.TerminalNode
	PAREN_RIGHT() antlr.TerminalNode
	LIST() antlr.TerminalNode
	SEXP() antlr.TerminalNode
	AllExpr() []IExprContext
	Expr(i int) IExprContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsSequenceConstructorContext differentiates from other interfaces.
	IsSequenceConstructorContext()
}

type SequenceConstructorContext struct {
	antlr.BaseParserRuleContext
	parser   antlr.Parser
	datatype antlr.Token
}

func NewEmptySequenceConstructorContext() *SequenceConstructorContext {
	var p = new(SequenceConstructorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_sequenceConstructor
	return p
}

func InitEmptySequenceConstructorContext(p *SequenceConstructorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_sequenceConstructor
}

func (*SequenceConstructorContext) IsSequenceConstructorContext() {}

func NewSequenceConstructorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SequenceConstructorContext {
	var p = new(SequenceConstructorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_sequenceConstructor

	return p
}

func (s *SequenceConstructorContext) GetParser() antlr.Parser { return s.parser }

func (s *SequenceConstructorContext) GetDatatype() antlr.Token { return s.datatype }

func (s *SequenceConstructorContext) SetDatatype(v antlr.Token) { s.datatype = v }

func (s *SequenceConstructorContext) PAREN_LEFT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserPAREN_LEFT, 0)
}

func (s *SequenceConstructorContext) PAREN_RIGHT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserPAREN_RIGHT, 0)
}

func (s *SequenceConstructorContext) LIST() antlr.TerminalNode {
	return s.GetToken(PartiQLParserLIST, 0)
}

func (s *SequenceConstructorContext) SEXP() antlr.TerminalNode {
	return s.GetToken(PartiQLParserSEXP, 0)
}

func (s *SequenceConstructorContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *SequenceConstructorContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *SequenceConstructorContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PartiQLParserCOMMA)
}

func (s *SequenceConstructorContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PartiQLParserCOMMA, i)
}

func (s *SequenceConstructorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SequenceConstructorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SequenceConstructorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterSequenceConstructor(s)
	}
}

func (s *SequenceConstructorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitSequenceConstructor(s)
	}
}

func (p *PartiQLParser) SequenceConstructor() (localctx ISequenceConstructorContext) {
	localctx = NewSequenceConstructorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 224, PartiQLParserRULE_sequenceConstructor)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1441)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*SequenceConstructorContext).datatype = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == PartiQLParserLIST || _la == PartiQLParserSEXP) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*SequenceConstructorContext).datatype = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(1442)
		p.Match(PartiQLParserPAREN_LEFT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1451)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&11558071357178112) != 0) || ((int64((_la-75)) & ^0x3f) == 0 && ((int64(1)<<(_la-75))&234187180623281297) != 0) || ((int64((_la-140)) & ^0x3f) == 0 && ((int64(1)<<(_la-140))&7026323504187375659) != 0) || ((int64((_la-207)) & ^0x3f) == 0 && ((int64(1)<<(_la-207))&1729382258948706371) != 0) || ((int64((_la-271)) & ^0x3f) == 0 && ((int64(1)<<(_la-271))&291666264083) != 0) {
		{
			p.SetState(1443)
			p.Expr()
		}
		p.SetState(1448)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == PartiQLParserCOMMA {
			{
				p.SetState(1444)
				p.Match(PartiQLParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1445)
				p.Expr()
			}

			p.SetState(1450)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}

	}
	{
		p.SetState(1453)
		p.Match(PartiQLParserPAREN_RIGHT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISubstringContext is an interface to support dynamic dispatch.
type ISubstringContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SUBSTRING() antlr.TerminalNode
	PAREN_LEFT() antlr.TerminalNode
	AllExpr() []IExprContext
	Expr(i int) IExprContext
	PAREN_RIGHT() antlr.TerminalNode
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode
	FROM() antlr.TerminalNode
	FOR() antlr.TerminalNode

	// IsSubstringContext differentiates from other interfaces.
	IsSubstringContext()
}

type SubstringContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySubstringContext() *SubstringContext {
	var p = new(SubstringContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_substring
	return p
}

func InitEmptySubstringContext(p *SubstringContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_substring
}

func (*SubstringContext) IsSubstringContext() {}

func NewSubstringContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SubstringContext {
	var p = new(SubstringContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_substring

	return p
}

func (s *SubstringContext) GetParser() antlr.Parser { return s.parser }

func (s *SubstringContext) SUBSTRING() antlr.TerminalNode {
	return s.GetToken(PartiQLParserSUBSTRING, 0)
}

func (s *SubstringContext) PAREN_LEFT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserPAREN_LEFT, 0)
}

func (s *SubstringContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *SubstringContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *SubstringContext) PAREN_RIGHT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserPAREN_RIGHT, 0)
}

func (s *SubstringContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PartiQLParserCOMMA)
}

func (s *SubstringContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PartiQLParserCOMMA, i)
}

func (s *SubstringContext) FROM() antlr.TerminalNode {
	return s.GetToken(PartiQLParserFROM, 0)
}

func (s *SubstringContext) FOR() antlr.TerminalNode {
	return s.GetToken(PartiQLParserFOR, 0)
}

func (s *SubstringContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SubstringContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SubstringContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterSubstring(s)
	}
}

func (s *SubstringContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitSubstring(s)
	}
}

func (p *PartiQLParser) Substring() (localctx ISubstringContext) {
	localctx = NewSubstringContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 226, PartiQLParserRULE_substring)
	var _la int

	p.SetState(1481)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 186, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1455)
			p.Match(PartiQLParserSUBSTRING)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1456)
			p.Match(PartiQLParserPAREN_LEFT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1457)
			p.Expr()
		}
		p.SetState(1464)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == PartiQLParserCOMMA {
			{
				p.SetState(1458)
				p.Match(PartiQLParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1459)
				p.Expr()
			}
			p.SetState(1462)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			if _la == PartiQLParserCOMMA {
				{
					p.SetState(1460)
					p.Match(PartiQLParserCOMMA)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(1461)
					p.Expr()
				}

			}

		}
		{
			p.SetState(1466)
			p.Match(PartiQLParserPAREN_RIGHT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1468)
			p.Match(PartiQLParserSUBSTRING)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1469)
			p.Match(PartiQLParserPAREN_LEFT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1470)
			p.Expr()
		}
		p.SetState(1477)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == PartiQLParserFROM {
			{
				p.SetState(1471)
				p.Match(PartiQLParserFROM)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1472)
				p.Expr()
			}
			p.SetState(1475)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			if _la == PartiQLParserFOR {
				{
					p.SetState(1473)
					p.Match(PartiQLParserFOR)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(1474)
					p.Expr()
				}

			}

		}
		{
			p.SetState(1479)
			p.Match(PartiQLParserPAREN_RIGHT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPositionContext is an interface to support dynamic dispatch.
type IPositionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	POSITION() antlr.TerminalNode
	PAREN_LEFT() antlr.TerminalNode
	AllExpr() []IExprContext
	Expr(i int) IExprContext
	COMMA() antlr.TerminalNode
	PAREN_RIGHT() antlr.TerminalNode
	IN() antlr.TerminalNode

	// IsPositionContext differentiates from other interfaces.
	IsPositionContext()
}

type PositionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPositionContext() *PositionContext {
	var p = new(PositionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_position
	return p
}

func InitEmptyPositionContext(p *PositionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_position
}

func (*PositionContext) IsPositionContext() {}

func NewPositionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PositionContext {
	var p = new(PositionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_position

	return p
}

func (s *PositionContext) GetParser() antlr.Parser { return s.parser }

func (s *PositionContext) POSITION() antlr.TerminalNode {
	return s.GetToken(PartiQLParserPOSITION, 0)
}

func (s *PositionContext) PAREN_LEFT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserPAREN_LEFT, 0)
}

func (s *PositionContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *PositionContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *PositionContext) COMMA() antlr.TerminalNode {
	return s.GetToken(PartiQLParserCOMMA, 0)
}

func (s *PositionContext) PAREN_RIGHT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserPAREN_RIGHT, 0)
}

func (s *PositionContext) IN() antlr.TerminalNode {
	return s.GetToken(PartiQLParserIN, 0)
}

func (s *PositionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PositionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PositionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterPosition(s)
	}
}

func (s *PositionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitPosition(s)
	}
}

func (p *PartiQLParser) Position() (localctx IPositionContext) {
	localctx = NewPositionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 228, PartiQLParserRULE_position)
	p.SetState(1497)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 187, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1483)
			p.Match(PartiQLParserPOSITION)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1484)
			p.Match(PartiQLParserPAREN_LEFT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1485)
			p.Expr()
		}
		{
			p.SetState(1486)
			p.Match(PartiQLParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1487)
			p.Expr()
		}
		{
			p.SetState(1488)
			p.Match(PartiQLParserPAREN_RIGHT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1490)
			p.Match(PartiQLParserPOSITION)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1491)
			p.Match(PartiQLParserPAREN_LEFT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1492)
			p.Expr()
		}
		{
			p.SetState(1493)
			p.Match(PartiQLParserIN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1494)
			p.Expr()
		}
		{
			p.SetState(1495)
			p.Match(PartiQLParserPAREN_RIGHT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOverlayContext is an interface to support dynamic dispatch.
type IOverlayContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	OVERLAY() antlr.TerminalNode
	PAREN_LEFT() antlr.TerminalNode
	AllExpr() []IExprContext
	Expr(i int) IExprContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode
	PAREN_RIGHT() antlr.TerminalNode
	PLACING() antlr.TerminalNode
	FROM() antlr.TerminalNode
	FOR() antlr.TerminalNode

	// IsOverlayContext differentiates from other interfaces.
	IsOverlayContext()
}

type OverlayContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOverlayContext() *OverlayContext {
	var p = new(OverlayContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_overlay
	return p
}

func InitEmptyOverlayContext(p *OverlayContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_overlay
}

func (*OverlayContext) IsOverlayContext() {}

func NewOverlayContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OverlayContext {
	var p = new(OverlayContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_overlay

	return p
}

func (s *OverlayContext) GetParser() antlr.Parser { return s.parser }

func (s *OverlayContext) OVERLAY() antlr.TerminalNode {
	return s.GetToken(PartiQLParserOVERLAY, 0)
}

func (s *OverlayContext) PAREN_LEFT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserPAREN_LEFT, 0)
}

func (s *OverlayContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *OverlayContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *OverlayContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PartiQLParserCOMMA)
}

func (s *OverlayContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PartiQLParserCOMMA, i)
}

func (s *OverlayContext) PAREN_RIGHT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserPAREN_RIGHT, 0)
}

func (s *OverlayContext) PLACING() antlr.TerminalNode {
	return s.GetToken(PartiQLParserPLACING, 0)
}

func (s *OverlayContext) FROM() antlr.TerminalNode {
	return s.GetToken(PartiQLParserFROM, 0)
}

func (s *OverlayContext) FOR() antlr.TerminalNode {
	return s.GetToken(PartiQLParserFOR, 0)
}

func (s *OverlayContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OverlayContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OverlayContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterOverlay(s)
	}
}

func (s *OverlayContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitOverlay(s)
	}
}

func (p *PartiQLParser) Overlay() (localctx IOverlayContext) {
	localctx = NewOverlayContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 230, PartiQLParserRULE_overlay)
	var _la int

	p.SetState(1525)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 190, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1499)
			p.Match(PartiQLParserOVERLAY)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1500)
			p.Match(PartiQLParserPAREN_LEFT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1501)
			p.Expr()
		}
		{
			p.SetState(1502)
			p.Match(PartiQLParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1503)
			p.Expr()
		}
		{
			p.SetState(1504)
			p.Match(PartiQLParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1505)
			p.Expr()
		}
		p.SetState(1508)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == PartiQLParserCOMMA {
			{
				p.SetState(1506)
				p.Match(PartiQLParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1507)
				p.Expr()
			}

		}
		{
			p.SetState(1510)
			p.Match(PartiQLParserPAREN_RIGHT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1512)
			p.Match(PartiQLParserOVERLAY)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1513)
			p.Match(PartiQLParserPAREN_LEFT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1514)
			p.Expr()
		}
		{
			p.SetState(1515)
			p.Match(PartiQLParserPLACING)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1516)
			p.Expr()
		}
		{
			p.SetState(1517)
			p.Match(PartiQLParserFROM)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1518)
			p.Expr()
		}
		p.SetState(1521)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == PartiQLParserFOR {
			{
				p.SetState(1519)
				p.Match(PartiQLParserFOR)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1520)
				p.Expr()
			}

		}
		{
			p.SetState(1523)
			p.Match(PartiQLParserPAREN_RIGHT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAggregateContext is an interface to support dynamic dispatch.
type IAggregateContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsAggregateContext differentiates from other interfaces.
	IsAggregateContext()
}

type AggregateContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAggregateContext() *AggregateContext {
	var p = new(AggregateContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_aggregate
	return p
}

func InitEmptyAggregateContext(p *AggregateContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_aggregate
}

func (*AggregateContext) IsAggregateContext() {}

func NewAggregateContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AggregateContext {
	var p = new(AggregateContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_aggregate

	return p
}

func (s *AggregateContext) GetParser() antlr.Parser { return s.parser }

func (s *AggregateContext) CopyAll(ctx *AggregateContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *AggregateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AggregateContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type AggregateBaseContext struct {
	AggregateContext
	func_ antlr.Token
}

func NewAggregateBaseContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AggregateBaseContext {
	var p = new(AggregateBaseContext)

	InitEmptyAggregateContext(&p.AggregateContext)
	p.parser = parser
	p.CopyAll(ctx.(*AggregateContext))

	return p
}

func (s *AggregateBaseContext) GetFunc_() antlr.Token { return s.func_ }

func (s *AggregateBaseContext) SetFunc_(v antlr.Token) { s.func_ = v }

func (s *AggregateBaseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AggregateBaseContext) PAREN_LEFT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserPAREN_LEFT, 0)
}

func (s *AggregateBaseContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *AggregateBaseContext) PAREN_RIGHT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserPAREN_RIGHT, 0)
}

func (s *AggregateBaseContext) COUNT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserCOUNT, 0)
}

func (s *AggregateBaseContext) MAX() antlr.TerminalNode {
	return s.GetToken(PartiQLParserMAX, 0)
}

func (s *AggregateBaseContext) MIN() antlr.TerminalNode {
	return s.GetToken(PartiQLParserMIN, 0)
}

func (s *AggregateBaseContext) SUM() antlr.TerminalNode {
	return s.GetToken(PartiQLParserSUM, 0)
}

func (s *AggregateBaseContext) AVG() antlr.TerminalNode {
	return s.GetToken(PartiQLParserAVG, 0)
}

func (s *AggregateBaseContext) EVERY() antlr.TerminalNode {
	return s.GetToken(PartiQLParserEVERY, 0)
}

func (s *AggregateBaseContext) ANY() antlr.TerminalNode {
	return s.GetToken(PartiQLParserANY, 0)
}

func (s *AggregateBaseContext) SOME() antlr.TerminalNode {
	return s.GetToken(PartiQLParserSOME, 0)
}

func (s *AggregateBaseContext) SetQuantifierStrategy() ISetQuantifierStrategyContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISetQuantifierStrategyContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISetQuantifierStrategyContext)
}

func (s *AggregateBaseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterAggregateBase(s)
	}
}

func (s *AggregateBaseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitAggregateBase(s)
	}
}

type CountAllContext struct {
	AggregateContext
	func_ antlr.Token
}

func NewCountAllContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CountAllContext {
	var p = new(CountAllContext)

	InitEmptyAggregateContext(&p.AggregateContext)
	p.parser = parser
	p.CopyAll(ctx.(*AggregateContext))

	return p
}

func (s *CountAllContext) GetFunc_() antlr.Token { return s.func_ }

func (s *CountAllContext) SetFunc_(v antlr.Token) { s.func_ = v }

func (s *CountAllContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CountAllContext) PAREN_LEFT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserPAREN_LEFT, 0)
}

func (s *CountAllContext) ASTERISK() antlr.TerminalNode {
	return s.GetToken(PartiQLParserASTERISK, 0)
}

func (s *CountAllContext) PAREN_RIGHT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserPAREN_RIGHT, 0)
}

func (s *CountAllContext) COUNT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserCOUNT, 0)
}

func (s *CountAllContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterCountAll(s)
	}
}

func (s *CountAllContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitCountAll(s)
	}
}

func (p *PartiQLParser) Aggregate() (localctx IAggregateContext) {
	localctx = NewAggregateContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 232, PartiQLParserRULE_aggregate)
	var _la int

	p.SetState(1539)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 192, p.GetParserRuleContext()) {
	case 1:
		localctx = NewCountAllContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1527)

			var _m = p.Match(PartiQLParserCOUNT)

			localctx.(*CountAllContext).func_ = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1528)
			p.Match(PartiQLParserPAREN_LEFT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1529)
			p.Match(PartiQLParserASTERISK)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1530)
			p.Match(PartiQLParserPAREN_RIGHT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		localctx = NewAggregateBaseContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1531)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*AggregateBaseContext).func_ = _lt

			_la = p.GetTokenStream().LA(1)

			if !(((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&17592186077440) != 0) || ((int64((_la-75)) & ^0x3f) == 0 && ((int64(1)<<(_la-75))&216172782113783809) != 0) || _la == PartiQLParserSOME || _la == PartiQLParserSUM) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*AggregateBaseContext).func_ = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(1532)
			p.Match(PartiQLParserPAREN_LEFT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1534)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == PartiQLParserALL || _la == PartiQLParserDISTINCT {
			{
				p.SetState(1533)
				p.SetQuantifierStrategy()
			}

		}
		{
			p.SetState(1536)
			p.Expr()
		}
		{
			p.SetState(1537)
			p.Match(PartiQLParserPAREN_RIGHT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IWindowFunctionContext is an interface to support dynamic dispatch.
type IWindowFunctionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsWindowFunctionContext differentiates from other interfaces.
	IsWindowFunctionContext()
}

type WindowFunctionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWindowFunctionContext() *WindowFunctionContext {
	var p = new(WindowFunctionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_windowFunction
	return p
}

func InitEmptyWindowFunctionContext(p *WindowFunctionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_windowFunction
}

func (*WindowFunctionContext) IsWindowFunctionContext() {}

func NewWindowFunctionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WindowFunctionContext {
	var p = new(WindowFunctionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_windowFunction

	return p
}

func (s *WindowFunctionContext) GetParser() antlr.Parser { return s.parser }

func (s *WindowFunctionContext) CopyAll(ctx *WindowFunctionContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *WindowFunctionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WindowFunctionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type LagLeadFunctionContext struct {
	WindowFunctionContext
	func_ antlr.Token
}

func NewLagLeadFunctionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *LagLeadFunctionContext {
	var p = new(LagLeadFunctionContext)

	InitEmptyWindowFunctionContext(&p.WindowFunctionContext)
	p.parser = parser
	p.CopyAll(ctx.(*WindowFunctionContext))

	return p
}

func (s *LagLeadFunctionContext) GetFunc_() antlr.Token { return s.func_ }

func (s *LagLeadFunctionContext) SetFunc_(v antlr.Token) { s.func_ = v }

func (s *LagLeadFunctionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LagLeadFunctionContext) PAREN_LEFT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserPAREN_LEFT, 0)
}

func (s *LagLeadFunctionContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *LagLeadFunctionContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *LagLeadFunctionContext) PAREN_RIGHT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserPAREN_RIGHT, 0)
}

func (s *LagLeadFunctionContext) Over() IOverContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOverContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOverContext)
}

func (s *LagLeadFunctionContext) LAG() antlr.TerminalNode {
	return s.GetToken(PartiQLParserLAG, 0)
}

func (s *LagLeadFunctionContext) LEAD() antlr.TerminalNode {
	return s.GetToken(PartiQLParserLEAD, 0)
}

func (s *LagLeadFunctionContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PartiQLParserCOMMA)
}

func (s *LagLeadFunctionContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PartiQLParserCOMMA, i)
}

func (s *LagLeadFunctionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterLagLeadFunction(s)
	}
}

func (s *LagLeadFunctionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitLagLeadFunction(s)
	}
}

func (p *PartiQLParser) WindowFunction() (localctx IWindowFunctionContext) {
	localctx = NewWindowFunctionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 234, PartiQLParserRULE_windowFunction)
	var _la int

	localctx = NewLagLeadFunctionContext(p, localctx)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1541)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*LagLeadFunctionContext).func_ = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == PartiQLParserLAG || _la == PartiQLParserLEAD) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*LagLeadFunctionContext).func_ = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(1542)
		p.Match(PartiQLParserPAREN_LEFT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1543)
		p.Expr()
	}
	p.SetState(1550)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == PartiQLParserCOMMA {
		{
			p.SetState(1544)
			p.Match(PartiQLParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1545)
			p.Expr()
		}
		p.SetState(1548)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == PartiQLParserCOMMA {
			{
				p.SetState(1546)
				p.Match(PartiQLParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1547)
				p.Expr()
			}

		}

	}
	{
		p.SetState(1552)
		p.Match(PartiQLParserPAREN_RIGHT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1553)
		p.Over()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICastContext is an interface to support dynamic dispatch.
type ICastContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CAST() antlr.TerminalNode
	PAREN_LEFT() antlr.TerminalNode
	Expr() IExprContext
	AS() antlr.TerminalNode
	Type_() ITypeContext
	PAREN_RIGHT() antlr.TerminalNode

	// IsCastContext differentiates from other interfaces.
	IsCastContext()
}

type CastContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCastContext() *CastContext {
	var p = new(CastContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_cast
	return p
}

func InitEmptyCastContext(p *CastContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_cast
}

func (*CastContext) IsCastContext() {}

func NewCastContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CastContext {
	var p = new(CastContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_cast

	return p
}

func (s *CastContext) GetParser() antlr.Parser { return s.parser }

func (s *CastContext) CAST() antlr.TerminalNode {
	return s.GetToken(PartiQLParserCAST, 0)
}

func (s *CastContext) PAREN_LEFT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserPAREN_LEFT, 0)
}

func (s *CastContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *CastContext) AS() antlr.TerminalNode {
	return s.GetToken(PartiQLParserAS, 0)
}

func (s *CastContext) Type_() ITypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeContext)
}

func (s *CastContext) PAREN_RIGHT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserPAREN_RIGHT, 0)
}

func (s *CastContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CastContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CastContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterCast(s)
	}
}

func (s *CastContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitCast(s)
	}
}

func (p *PartiQLParser) Cast() (localctx ICastContext) {
	localctx = NewCastContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 236, PartiQLParserRULE_cast)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1555)
		p.Match(PartiQLParserCAST)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1556)
		p.Match(PartiQLParserPAREN_LEFT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1557)
		p.Expr()
	}
	{
		p.SetState(1558)
		p.Match(PartiQLParserAS)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1559)
		p.Type_()
	}
	{
		p.SetState(1560)
		p.Match(PartiQLParserPAREN_RIGHT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICanLosslessCastContext is an interface to support dynamic dispatch.
type ICanLosslessCastContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CAN_LOSSLESS_CAST() antlr.TerminalNode
	PAREN_LEFT() antlr.TerminalNode
	Expr() IExprContext
	AS() antlr.TerminalNode
	Type_() ITypeContext
	PAREN_RIGHT() antlr.TerminalNode

	// IsCanLosslessCastContext differentiates from other interfaces.
	IsCanLosslessCastContext()
}

type CanLosslessCastContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCanLosslessCastContext() *CanLosslessCastContext {
	var p = new(CanLosslessCastContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_canLosslessCast
	return p
}

func InitEmptyCanLosslessCastContext(p *CanLosslessCastContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_canLosslessCast
}

func (*CanLosslessCastContext) IsCanLosslessCastContext() {}

func NewCanLosslessCastContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CanLosslessCastContext {
	var p = new(CanLosslessCastContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_canLosslessCast

	return p
}

func (s *CanLosslessCastContext) GetParser() antlr.Parser { return s.parser }

func (s *CanLosslessCastContext) CAN_LOSSLESS_CAST() antlr.TerminalNode {
	return s.GetToken(PartiQLParserCAN_LOSSLESS_CAST, 0)
}

func (s *CanLosslessCastContext) PAREN_LEFT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserPAREN_LEFT, 0)
}

func (s *CanLosslessCastContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *CanLosslessCastContext) AS() antlr.TerminalNode {
	return s.GetToken(PartiQLParserAS, 0)
}

func (s *CanLosslessCastContext) Type_() ITypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeContext)
}

func (s *CanLosslessCastContext) PAREN_RIGHT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserPAREN_RIGHT, 0)
}

func (s *CanLosslessCastContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CanLosslessCastContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CanLosslessCastContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterCanLosslessCast(s)
	}
}

func (s *CanLosslessCastContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitCanLosslessCast(s)
	}
}

func (p *PartiQLParser) CanLosslessCast() (localctx ICanLosslessCastContext) {
	localctx = NewCanLosslessCastContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 238, PartiQLParserRULE_canLosslessCast)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1562)
		p.Match(PartiQLParserCAN_LOSSLESS_CAST)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1563)
		p.Match(PartiQLParserPAREN_LEFT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1564)
		p.Expr()
	}
	{
		p.SetState(1565)
		p.Match(PartiQLParserAS)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1566)
		p.Type_()
	}
	{
		p.SetState(1567)
		p.Match(PartiQLParserPAREN_RIGHT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICanCastContext is an interface to support dynamic dispatch.
type ICanCastContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CAN_CAST() antlr.TerminalNode
	PAREN_LEFT() antlr.TerminalNode
	Expr() IExprContext
	AS() antlr.TerminalNode
	Type_() ITypeContext
	PAREN_RIGHT() antlr.TerminalNode

	// IsCanCastContext differentiates from other interfaces.
	IsCanCastContext()
}

type CanCastContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCanCastContext() *CanCastContext {
	var p = new(CanCastContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_canCast
	return p
}

func InitEmptyCanCastContext(p *CanCastContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_canCast
}

func (*CanCastContext) IsCanCastContext() {}

func NewCanCastContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CanCastContext {
	var p = new(CanCastContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_canCast

	return p
}

func (s *CanCastContext) GetParser() antlr.Parser { return s.parser }

func (s *CanCastContext) CAN_CAST() antlr.TerminalNode {
	return s.GetToken(PartiQLParserCAN_CAST, 0)
}

func (s *CanCastContext) PAREN_LEFT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserPAREN_LEFT, 0)
}

func (s *CanCastContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *CanCastContext) AS() antlr.TerminalNode {
	return s.GetToken(PartiQLParserAS, 0)
}

func (s *CanCastContext) Type_() ITypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeContext)
}

func (s *CanCastContext) PAREN_RIGHT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserPAREN_RIGHT, 0)
}

func (s *CanCastContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CanCastContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CanCastContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterCanCast(s)
	}
}

func (s *CanCastContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitCanCast(s)
	}
}

func (p *PartiQLParser) CanCast() (localctx ICanCastContext) {
	localctx = NewCanCastContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 240, PartiQLParserRULE_canCast)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1569)
		p.Match(PartiQLParserCAN_CAST)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1570)
		p.Match(PartiQLParserPAREN_LEFT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1571)
		p.Expr()
	}
	{
		p.SetState(1572)
		p.Match(PartiQLParserAS)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1573)
		p.Type_()
	}
	{
		p.SetState(1574)
		p.Match(PartiQLParserPAREN_RIGHT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExtractContext is an interface to support dynamic dispatch.
type IExtractContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetRhs returns the rhs rule contexts.
	GetRhs() IExprContext

	// SetRhs sets the rhs rule contexts.
	SetRhs(IExprContext)

	// Getter signatures
	EXTRACT() antlr.TerminalNode
	PAREN_LEFT() antlr.TerminalNode
	IDENTIFIER() antlr.TerminalNode
	FROM() antlr.TerminalNode
	PAREN_RIGHT() antlr.TerminalNode
	Expr() IExprContext

	// IsExtractContext differentiates from other interfaces.
	IsExtractContext()
}

type ExtractContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	rhs    IExprContext
}

func NewEmptyExtractContext() *ExtractContext {
	var p = new(ExtractContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_extract
	return p
}

func InitEmptyExtractContext(p *ExtractContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_extract
}

func (*ExtractContext) IsExtractContext() {}

func NewExtractContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExtractContext {
	var p = new(ExtractContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_extract

	return p
}

func (s *ExtractContext) GetParser() antlr.Parser { return s.parser }

func (s *ExtractContext) GetRhs() IExprContext { return s.rhs }

func (s *ExtractContext) SetRhs(v IExprContext) { s.rhs = v }

func (s *ExtractContext) EXTRACT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserEXTRACT, 0)
}

func (s *ExtractContext) PAREN_LEFT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserPAREN_LEFT, 0)
}

func (s *ExtractContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(PartiQLParserIDENTIFIER, 0)
}

func (s *ExtractContext) FROM() antlr.TerminalNode {
	return s.GetToken(PartiQLParserFROM, 0)
}

func (s *ExtractContext) PAREN_RIGHT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserPAREN_RIGHT, 0)
}

func (s *ExtractContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *ExtractContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExtractContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExtractContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterExtract(s)
	}
}

func (s *ExtractContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitExtract(s)
	}
}

func (p *PartiQLParser) Extract() (localctx IExtractContext) {
	localctx = NewExtractContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 242, PartiQLParserRULE_extract)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1576)
		p.Match(PartiQLParserEXTRACT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1577)
		p.Match(PartiQLParserPAREN_LEFT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1578)
		p.Match(PartiQLParserIDENTIFIER)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1579)
		p.Match(PartiQLParserFROM)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1580)

		var _x = p.Expr()

		localctx.(*ExtractContext).rhs = _x
	}
	{
		p.SetState(1581)
		p.Match(PartiQLParserPAREN_RIGHT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITrimFunctionContext is an interface to support dynamic dispatch.
type ITrimFunctionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetFunc_ returns the func_ token.
	GetFunc_() antlr.Token

	// GetMod returns the mod token.
	GetMod() antlr.Token

	// SetFunc_ sets the func_ token.
	SetFunc_(antlr.Token)

	// SetMod sets the mod token.
	SetMod(antlr.Token)

	// GetSub returns the sub rule contexts.
	GetSub() IExprContext

	// GetTarget returns the target rule contexts.
	GetTarget() IExprContext

	// SetSub sets the sub rule contexts.
	SetSub(IExprContext)

	// SetTarget sets the target rule contexts.
	SetTarget(IExprContext)

	// Getter signatures
	PAREN_LEFT() antlr.TerminalNode
	PAREN_RIGHT() antlr.TerminalNode
	TRIM() antlr.TerminalNode
	AllExpr() []IExprContext
	Expr(i int) IExprContext
	FROM() antlr.TerminalNode
	IDENTIFIER() antlr.TerminalNode

	// IsTrimFunctionContext differentiates from other interfaces.
	IsTrimFunctionContext()
}

type TrimFunctionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	func_  antlr.Token
	mod    antlr.Token
	sub    IExprContext
	target IExprContext
}

func NewEmptyTrimFunctionContext() *TrimFunctionContext {
	var p = new(TrimFunctionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_trimFunction
	return p
}

func InitEmptyTrimFunctionContext(p *TrimFunctionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_trimFunction
}

func (*TrimFunctionContext) IsTrimFunctionContext() {}

func NewTrimFunctionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TrimFunctionContext {
	var p = new(TrimFunctionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_trimFunction

	return p
}

func (s *TrimFunctionContext) GetParser() antlr.Parser { return s.parser }

func (s *TrimFunctionContext) GetFunc_() antlr.Token { return s.func_ }

func (s *TrimFunctionContext) GetMod() antlr.Token { return s.mod }

func (s *TrimFunctionContext) SetFunc_(v antlr.Token) { s.func_ = v }

func (s *TrimFunctionContext) SetMod(v antlr.Token) { s.mod = v }

func (s *TrimFunctionContext) GetSub() IExprContext { return s.sub }

func (s *TrimFunctionContext) GetTarget() IExprContext { return s.target }

func (s *TrimFunctionContext) SetSub(v IExprContext) { s.sub = v }

func (s *TrimFunctionContext) SetTarget(v IExprContext) { s.target = v }

func (s *TrimFunctionContext) PAREN_LEFT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserPAREN_LEFT, 0)
}

func (s *TrimFunctionContext) PAREN_RIGHT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserPAREN_RIGHT, 0)
}

func (s *TrimFunctionContext) TRIM() antlr.TerminalNode {
	return s.GetToken(PartiQLParserTRIM, 0)
}

func (s *TrimFunctionContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *TrimFunctionContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *TrimFunctionContext) FROM() antlr.TerminalNode {
	return s.GetToken(PartiQLParserFROM, 0)
}

func (s *TrimFunctionContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(PartiQLParserIDENTIFIER, 0)
}

func (s *TrimFunctionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TrimFunctionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TrimFunctionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterTrimFunction(s)
	}
}

func (s *TrimFunctionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitTrimFunction(s)
	}
}

func (p *PartiQLParser) TrimFunction() (localctx ITrimFunctionContext) {
	localctx = NewTrimFunctionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 244, PartiQLParserRULE_trimFunction)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1583)

		var _m = p.Match(PartiQLParserTRIM)

		localctx.(*TrimFunctionContext).func_ = _m
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1584)
		p.Match(PartiQLParserPAREN_LEFT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1592)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 197, p.GetParserRuleContext()) == 1 {
		p.SetState(1586)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 195, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1585)

				var _m = p.Match(PartiQLParserIDENTIFIER)

				localctx.(*TrimFunctionContext).mod = _m
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(1589)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&11558071357178112) != 0) || ((int64((_la-75)) & ^0x3f) == 0 && ((int64(1)<<(_la-75))&234187180623281297) != 0) || ((int64((_la-140)) & ^0x3f) == 0 && ((int64(1)<<(_la-140))&7026323504187375659) != 0) || ((int64((_la-207)) & ^0x3f) == 0 && ((int64(1)<<(_la-207))&1729382258948706371) != 0) || ((int64((_la-271)) & ^0x3f) == 0 && ((int64(1)<<(_la-271))&291666264083) != 0) {
			{
				p.SetState(1588)

				var _x = p.Expr()

				localctx.(*TrimFunctionContext).sub = _x
			}

		}
		{
			p.SetState(1591)
			p.Match(PartiQLParserFROM)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	{
		p.SetState(1594)

		var _x = p.Expr()

		localctx.(*TrimFunctionContext).target = _x
	}
	{
		p.SetState(1595)
		p.Match(PartiQLParserPAREN_RIGHT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDateFunctionContext is an interface to support dynamic dispatch.
type IDateFunctionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetFunc_ returns the func_ token.
	GetFunc_() antlr.Token

	// GetDt returns the dt token.
	GetDt() antlr.Token

	// SetFunc_ sets the func_ token.
	SetFunc_(antlr.Token)

	// SetDt sets the dt token.
	SetDt(antlr.Token)

	// Getter signatures
	PAREN_LEFT() antlr.TerminalNode
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode
	AllExpr() []IExprContext
	Expr(i int) IExprContext
	PAREN_RIGHT() antlr.TerminalNode
	IDENTIFIER() antlr.TerminalNode
	DATE_ADD() antlr.TerminalNode
	DATE_DIFF() antlr.TerminalNode

	// IsDateFunctionContext differentiates from other interfaces.
	IsDateFunctionContext()
}

type DateFunctionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	func_  antlr.Token
	dt     antlr.Token
}

func NewEmptyDateFunctionContext() *DateFunctionContext {
	var p = new(DateFunctionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_dateFunction
	return p
}

func InitEmptyDateFunctionContext(p *DateFunctionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_dateFunction
}

func (*DateFunctionContext) IsDateFunctionContext() {}

func NewDateFunctionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DateFunctionContext {
	var p = new(DateFunctionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_dateFunction

	return p
}

func (s *DateFunctionContext) GetParser() antlr.Parser { return s.parser }

func (s *DateFunctionContext) GetFunc_() antlr.Token { return s.func_ }

func (s *DateFunctionContext) GetDt() antlr.Token { return s.dt }

func (s *DateFunctionContext) SetFunc_(v antlr.Token) { s.func_ = v }

func (s *DateFunctionContext) SetDt(v antlr.Token) { s.dt = v }

func (s *DateFunctionContext) PAREN_LEFT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserPAREN_LEFT, 0)
}

func (s *DateFunctionContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PartiQLParserCOMMA)
}

func (s *DateFunctionContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PartiQLParserCOMMA, i)
}

func (s *DateFunctionContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *DateFunctionContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *DateFunctionContext) PAREN_RIGHT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserPAREN_RIGHT, 0)
}

func (s *DateFunctionContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(PartiQLParserIDENTIFIER, 0)
}

func (s *DateFunctionContext) DATE_ADD() antlr.TerminalNode {
	return s.GetToken(PartiQLParserDATE_ADD, 0)
}

func (s *DateFunctionContext) DATE_DIFF() antlr.TerminalNode {
	return s.GetToken(PartiQLParserDATE_DIFF, 0)
}

func (s *DateFunctionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DateFunctionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DateFunctionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterDateFunction(s)
	}
}

func (s *DateFunctionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitDateFunction(s)
	}
}

func (p *PartiQLParser) DateFunction() (localctx IDateFunctionContext) {
	localctx = NewDateFunctionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 246, PartiQLParserRULE_dateFunction)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1597)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*DateFunctionContext).func_ = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == PartiQLParserDATE_ADD || _la == PartiQLParserDATE_DIFF) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*DateFunctionContext).func_ = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(1598)
		p.Match(PartiQLParserPAREN_LEFT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1599)

		var _m = p.Match(PartiQLParserIDENTIFIER)

		localctx.(*DateFunctionContext).dt = _m
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1600)
		p.Match(PartiQLParserCOMMA)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1601)
		p.Expr()
	}
	{
		p.SetState(1602)
		p.Match(PartiQLParserCOMMA)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1603)
		p.Expr()
	}
	{
		p.SetState(1604)
		p.Match(PartiQLParserPAREN_RIGHT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFunctionCallContext is an interface to support dynamic dispatch.
type IFunctionCallContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	FunctionName() IFunctionNameContext
	PAREN_LEFT() antlr.TerminalNode
	PAREN_RIGHT() antlr.TerminalNode
	AllExpr() []IExprContext
	Expr(i int) IExprContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsFunctionCallContext differentiates from other interfaces.
	IsFunctionCallContext()
}

type FunctionCallContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionCallContext() *FunctionCallContext {
	var p = new(FunctionCallContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_functionCall
	return p
}

func InitEmptyFunctionCallContext(p *FunctionCallContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_functionCall
}

func (*FunctionCallContext) IsFunctionCallContext() {}

func NewFunctionCallContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionCallContext {
	var p = new(FunctionCallContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_functionCall

	return p
}

func (s *FunctionCallContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionCallContext) FunctionName() IFunctionNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunctionNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunctionNameContext)
}

func (s *FunctionCallContext) PAREN_LEFT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserPAREN_LEFT, 0)
}

func (s *FunctionCallContext) PAREN_RIGHT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserPAREN_RIGHT, 0)
}

func (s *FunctionCallContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *FunctionCallContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *FunctionCallContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PartiQLParserCOMMA)
}

func (s *FunctionCallContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PartiQLParserCOMMA, i)
}

func (s *FunctionCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionCallContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionCallContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterFunctionCall(s)
	}
}

func (s *FunctionCallContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitFunctionCall(s)
	}
}

func (p *PartiQLParser) FunctionCall() (localctx IFunctionCallContext) {
	localctx = NewFunctionCallContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 248, PartiQLParserRULE_functionCall)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1606)
		p.FunctionName()
	}
	{
		p.SetState(1607)
		p.Match(PartiQLParserPAREN_LEFT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1616)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&11558071357178112) != 0) || ((int64((_la-75)) & ^0x3f) == 0 && ((int64(1)<<(_la-75))&234187180623281297) != 0) || ((int64((_la-140)) & ^0x3f) == 0 && ((int64(1)<<(_la-140))&7026323504187375659) != 0) || ((int64((_la-207)) & ^0x3f) == 0 && ((int64(1)<<(_la-207))&1729382258948706371) != 0) || ((int64((_la-271)) & ^0x3f) == 0 && ((int64(1)<<(_la-271))&291666264083) != 0) {
		{
			p.SetState(1608)
			p.Expr()
		}
		p.SetState(1613)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == PartiQLParserCOMMA {
			{
				p.SetState(1609)
				p.Match(PartiQLParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1610)
				p.Expr()
			}

			p.SetState(1615)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}

	}
	{
		p.SetState(1618)
		p.Match(PartiQLParserPAREN_RIGHT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFunctionNameContext is an interface to support dynamic dispatch.
type IFunctionNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsFunctionNameContext differentiates from other interfaces.
	IsFunctionNameContext()
}

type FunctionNameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionNameContext() *FunctionNameContext {
	var p = new(FunctionNameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_functionName
	return p
}

func InitEmptyFunctionNameContext(p *FunctionNameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_functionName
}

func (*FunctionNameContext) IsFunctionNameContext() {}

func NewFunctionNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionNameContext {
	var p = new(FunctionNameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_functionName

	return p
}

func (s *FunctionNameContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionNameContext) CopyAll(ctx *FunctionNameContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *FunctionNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type FunctionNameSymbolContext struct {
	FunctionNameContext
	_symbolPrimitive ISymbolPrimitiveContext
	qualifier        []ISymbolPrimitiveContext
	name             ISymbolPrimitiveContext
}

func NewFunctionNameSymbolContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *FunctionNameSymbolContext {
	var p = new(FunctionNameSymbolContext)

	InitEmptyFunctionNameContext(&p.FunctionNameContext)
	p.parser = parser
	p.CopyAll(ctx.(*FunctionNameContext))

	return p
}

func (s *FunctionNameSymbolContext) Get_symbolPrimitive() ISymbolPrimitiveContext {
	return s._symbolPrimitive
}

func (s *FunctionNameSymbolContext) GetName() ISymbolPrimitiveContext { return s.name }

func (s *FunctionNameSymbolContext) Set_symbolPrimitive(v ISymbolPrimitiveContext) {
	s._symbolPrimitive = v
}

func (s *FunctionNameSymbolContext) SetName(v ISymbolPrimitiveContext) { s.name = v }

func (s *FunctionNameSymbolContext) GetQualifier() []ISymbolPrimitiveContext { return s.qualifier }

func (s *FunctionNameSymbolContext) SetQualifier(v []ISymbolPrimitiveContext) { s.qualifier = v }

func (s *FunctionNameSymbolContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionNameSymbolContext) AllSymbolPrimitive() []ISymbolPrimitiveContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISymbolPrimitiveContext); ok {
			len++
		}
	}

	tst := make([]ISymbolPrimitiveContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISymbolPrimitiveContext); ok {
			tst[i] = t.(ISymbolPrimitiveContext)
			i++
		}
	}

	return tst
}

func (s *FunctionNameSymbolContext) SymbolPrimitive(i int) ISymbolPrimitiveContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISymbolPrimitiveContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISymbolPrimitiveContext)
}

func (s *FunctionNameSymbolContext) AllPERIOD() []antlr.TerminalNode {
	return s.GetTokens(PartiQLParserPERIOD)
}

func (s *FunctionNameSymbolContext) PERIOD(i int) antlr.TerminalNode {
	return s.GetToken(PartiQLParserPERIOD, i)
}

func (s *FunctionNameSymbolContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterFunctionNameSymbol(s)
	}
}

func (s *FunctionNameSymbolContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitFunctionNameSymbol(s)
	}
}

type FunctionNameReservedContext struct {
	FunctionNameContext
	_symbolPrimitive ISymbolPrimitiveContext
	qualifier        []ISymbolPrimitiveContext
	name             antlr.Token
}

func NewFunctionNameReservedContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *FunctionNameReservedContext {
	var p = new(FunctionNameReservedContext)

	InitEmptyFunctionNameContext(&p.FunctionNameContext)
	p.parser = parser
	p.CopyAll(ctx.(*FunctionNameContext))

	return p
}

func (s *FunctionNameReservedContext) GetName() antlr.Token { return s.name }

func (s *FunctionNameReservedContext) SetName(v antlr.Token) { s.name = v }

func (s *FunctionNameReservedContext) Get_symbolPrimitive() ISymbolPrimitiveContext {
	return s._symbolPrimitive
}

func (s *FunctionNameReservedContext) Set_symbolPrimitive(v ISymbolPrimitiveContext) {
	s._symbolPrimitive = v
}

func (s *FunctionNameReservedContext) GetQualifier() []ISymbolPrimitiveContext { return s.qualifier }

func (s *FunctionNameReservedContext) SetQualifier(v []ISymbolPrimitiveContext) { s.qualifier = v }

func (s *FunctionNameReservedContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionNameReservedContext) CHAR_LENGTH() antlr.TerminalNode {
	return s.GetToken(PartiQLParserCHAR_LENGTH, 0)
}

func (s *FunctionNameReservedContext) CHARACTER_LENGTH() antlr.TerminalNode {
	return s.GetToken(PartiQLParserCHARACTER_LENGTH, 0)
}

func (s *FunctionNameReservedContext) OCTET_LENGTH() antlr.TerminalNode {
	return s.GetToken(PartiQLParserOCTET_LENGTH, 0)
}

func (s *FunctionNameReservedContext) BIT_LENGTH() antlr.TerminalNode {
	return s.GetToken(PartiQLParserBIT_LENGTH, 0)
}

func (s *FunctionNameReservedContext) UPPER() antlr.TerminalNode {
	return s.GetToken(PartiQLParserUPPER, 0)
}

func (s *FunctionNameReservedContext) LOWER() antlr.TerminalNode {
	return s.GetToken(PartiQLParserLOWER, 0)
}

func (s *FunctionNameReservedContext) SIZE() antlr.TerminalNode {
	return s.GetToken(PartiQLParserSIZE, 0)
}

func (s *FunctionNameReservedContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(PartiQLParserEXISTS, 0)
}

func (s *FunctionNameReservedContext) COUNT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserCOUNT, 0)
}

func (s *FunctionNameReservedContext) AllPERIOD() []antlr.TerminalNode {
	return s.GetTokens(PartiQLParserPERIOD)
}

func (s *FunctionNameReservedContext) PERIOD(i int) antlr.TerminalNode {
	return s.GetToken(PartiQLParserPERIOD, i)
}

func (s *FunctionNameReservedContext) AllSymbolPrimitive() []ISymbolPrimitiveContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISymbolPrimitiveContext); ok {
			len++
		}
	}

	tst := make([]ISymbolPrimitiveContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISymbolPrimitiveContext); ok {
			tst[i] = t.(ISymbolPrimitiveContext)
			i++
		}
	}

	return tst
}

func (s *FunctionNameReservedContext) SymbolPrimitive(i int) ISymbolPrimitiveContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISymbolPrimitiveContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISymbolPrimitiveContext)
}

func (s *FunctionNameReservedContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterFunctionNameReserved(s)
	}
}

func (s *FunctionNameReservedContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitFunctionNameReserved(s)
	}
}

func (p *PartiQLParser) FunctionName() (localctx IFunctionNameContext) {
	localctx = NewFunctionNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 250, PartiQLParserRULE_functionName)
	var _la int

	var _alt int

	p.SetState(1638)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 202, p.GetParserRuleContext()) {
	case 1:
		localctx = NewFunctionNameReservedContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		p.SetState(1625)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == PartiQLParserIDENTIFIER || _la == PartiQLParserIDENTIFIER_QUOTED {
			{
				p.SetState(1620)

				var _x = p.SymbolPrimitive()

				localctx.(*FunctionNameReservedContext)._symbolPrimitive = _x
			}
			localctx.(*FunctionNameReservedContext).qualifier = append(localctx.(*FunctionNameReservedContext).qualifier, localctx.(*FunctionNameReservedContext)._symbolPrimitive)
			{
				p.SetState(1621)
				p.Match(PartiQLParserPERIOD)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(1627)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1628)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*FunctionNameReservedContext).name = _lt

			_la = p.GetTokenStream().LA(1)

			if !(((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&17592991875072) != 0) || ((int64((_la-82)) & ^0x3f) == 0 && ((int64(1)<<(_la-82))&-9223231299366420479) != 0) || _la == PartiQLParserSIZE || _la == PartiQLParserUPPER) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*FunctionNameReservedContext).name = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case 2:
		localctx = NewFunctionNameSymbolContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		p.SetState(1634)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 201, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(1629)

					var _x = p.SymbolPrimitive()

					localctx.(*FunctionNameSymbolContext)._symbolPrimitive = _x
				}
				localctx.(*FunctionNameSymbolContext).qualifier = append(localctx.(*FunctionNameSymbolContext).qualifier, localctx.(*FunctionNameSymbolContext)._symbolPrimitive)
				{
					p.SetState(1630)
					p.Match(PartiQLParserPERIOD)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(1636)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 201, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}
		{
			p.SetState(1637)

			var _x = p.SymbolPrimitive()

			localctx.(*FunctionNameSymbolContext).name = _x
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPathStepContext is an interface to support dynamic dispatch.
type IPathStepContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsPathStepContext differentiates from other interfaces.
	IsPathStepContext()
}

type PathStepContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPathStepContext() *PathStepContext {
	var p = new(PathStepContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_pathStep
	return p
}

func InitEmptyPathStepContext(p *PathStepContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_pathStep
}

func (*PathStepContext) IsPathStepContext() {}

func NewPathStepContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PathStepContext {
	var p = new(PathStepContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_pathStep

	return p
}

func (s *PathStepContext) GetParser() antlr.Parser { return s.parser }

func (s *PathStepContext) CopyAll(ctx *PathStepContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *PathStepContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PathStepContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type PathStepDotAllContext struct {
	PathStepContext
	all antlr.Token
}

func NewPathStepDotAllContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PathStepDotAllContext {
	var p = new(PathStepDotAllContext)

	InitEmptyPathStepContext(&p.PathStepContext)
	p.parser = parser
	p.CopyAll(ctx.(*PathStepContext))

	return p
}

func (s *PathStepDotAllContext) GetAll() antlr.Token { return s.all }

func (s *PathStepDotAllContext) SetAll(v antlr.Token) { s.all = v }

func (s *PathStepDotAllContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PathStepDotAllContext) PERIOD() antlr.TerminalNode {
	return s.GetToken(PartiQLParserPERIOD, 0)
}

func (s *PathStepDotAllContext) ASTERISK() antlr.TerminalNode {
	return s.GetToken(PartiQLParserASTERISK, 0)
}

func (s *PathStepDotAllContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterPathStepDotAll(s)
	}
}

func (s *PathStepDotAllContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitPathStepDotAll(s)
	}
}

type PathStepIndexAllContext struct {
	PathStepContext
	all antlr.Token
}

func NewPathStepIndexAllContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PathStepIndexAllContext {
	var p = new(PathStepIndexAllContext)

	InitEmptyPathStepContext(&p.PathStepContext)
	p.parser = parser
	p.CopyAll(ctx.(*PathStepContext))

	return p
}

func (s *PathStepIndexAllContext) GetAll() antlr.Token { return s.all }

func (s *PathStepIndexAllContext) SetAll(v antlr.Token) { s.all = v }

func (s *PathStepIndexAllContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PathStepIndexAllContext) BRACKET_LEFT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserBRACKET_LEFT, 0)
}

func (s *PathStepIndexAllContext) BRACKET_RIGHT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserBRACKET_RIGHT, 0)
}

func (s *PathStepIndexAllContext) ASTERISK() antlr.TerminalNode {
	return s.GetToken(PartiQLParserASTERISK, 0)
}

func (s *PathStepIndexAllContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterPathStepIndexAll(s)
	}
}

func (s *PathStepIndexAllContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitPathStepIndexAll(s)
	}
}

type PathStepIndexExprContext struct {
	PathStepContext
	key IExprContext
}

func NewPathStepIndexExprContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PathStepIndexExprContext {
	var p = new(PathStepIndexExprContext)

	InitEmptyPathStepContext(&p.PathStepContext)
	p.parser = parser
	p.CopyAll(ctx.(*PathStepContext))

	return p
}

func (s *PathStepIndexExprContext) GetKey() IExprContext { return s.key }

func (s *PathStepIndexExprContext) SetKey(v IExprContext) { s.key = v }

func (s *PathStepIndexExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PathStepIndexExprContext) BRACKET_LEFT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserBRACKET_LEFT, 0)
}

func (s *PathStepIndexExprContext) BRACKET_RIGHT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserBRACKET_RIGHT, 0)
}

func (s *PathStepIndexExprContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *PathStepIndexExprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterPathStepIndexExpr(s)
	}
}

func (s *PathStepIndexExprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitPathStepIndexExpr(s)
	}
}

type PathStepDotExprContext struct {
	PathStepContext
	key ISymbolPrimitiveContext
}

func NewPathStepDotExprContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PathStepDotExprContext {
	var p = new(PathStepDotExprContext)

	InitEmptyPathStepContext(&p.PathStepContext)
	p.parser = parser
	p.CopyAll(ctx.(*PathStepContext))

	return p
}

func (s *PathStepDotExprContext) GetKey() ISymbolPrimitiveContext { return s.key }

func (s *PathStepDotExprContext) SetKey(v ISymbolPrimitiveContext) { s.key = v }

func (s *PathStepDotExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PathStepDotExprContext) PERIOD() antlr.TerminalNode {
	return s.GetToken(PartiQLParserPERIOD, 0)
}

func (s *PathStepDotExprContext) SymbolPrimitive() ISymbolPrimitiveContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISymbolPrimitiveContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISymbolPrimitiveContext)
}

func (s *PathStepDotExprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterPathStepDotExpr(s)
	}
}

func (s *PathStepDotExprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitPathStepDotExpr(s)
	}
}

func (p *PartiQLParser) PathStep() (localctx IPathStepContext) {
	localctx = NewPathStepContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 252, PartiQLParserRULE_pathStep)
	p.SetState(1651)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 203, p.GetParserRuleContext()) {
	case 1:
		localctx = NewPathStepIndexExprContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1640)
			p.Match(PartiQLParserBRACKET_LEFT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1641)

			var _x = p.Expr()

			localctx.(*PathStepIndexExprContext).key = _x
		}
		{
			p.SetState(1642)
			p.Match(PartiQLParserBRACKET_RIGHT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		localctx = NewPathStepIndexAllContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1644)
			p.Match(PartiQLParserBRACKET_LEFT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1645)

			var _m = p.Match(PartiQLParserASTERISK)

			localctx.(*PathStepIndexAllContext).all = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1646)
			p.Match(PartiQLParserBRACKET_RIGHT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 3:
		localctx = NewPathStepDotExprContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1647)
			p.Match(PartiQLParserPERIOD)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1648)

			var _x = p.SymbolPrimitive()

			localctx.(*PathStepDotExprContext).key = _x
		}

	case 4:
		localctx = NewPathStepDotAllContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1649)
			p.Match(PartiQLParserPERIOD)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1650)

			var _m = p.Match(PartiQLParserASTERISK)

			localctx.(*PathStepDotAllContext).all = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExprGraphMatchManyContext is an interface to support dynamic dispatch.
type IExprGraphMatchManyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	PAREN_LEFT() antlr.TerminalNode
	ExprPrimary() IExprPrimaryContext
	MATCH() antlr.TerminalNode
	GpmlPatternList() IGpmlPatternListContext
	PAREN_RIGHT() antlr.TerminalNode

	// IsExprGraphMatchManyContext differentiates from other interfaces.
	IsExprGraphMatchManyContext()
}

type ExprGraphMatchManyContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExprGraphMatchManyContext() *ExprGraphMatchManyContext {
	var p = new(ExprGraphMatchManyContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_exprGraphMatchMany
	return p
}

func InitEmptyExprGraphMatchManyContext(p *ExprGraphMatchManyContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_exprGraphMatchMany
}

func (*ExprGraphMatchManyContext) IsExprGraphMatchManyContext() {}

func NewExprGraphMatchManyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExprGraphMatchManyContext {
	var p = new(ExprGraphMatchManyContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_exprGraphMatchMany

	return p
}

func (s *ExprGraphMatchManyContext) GetParser() antlr.Parser { return s.parser }

func (s *ExprGraphMatchManyContext) PAREN_LEFT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserPAREN_LEFT, 0)
}

func (s *ExprGraphMatchManyContext) ExprPrimary() IExprPrimaryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprPrimaryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprPrimaryContext)
}

func (s *ExprGraphMatchManyContext) MATCH() antlr.TerminalNode {
	return s.GetToken(PartiQLParserMATCH, 0)
}

func (s *ExprGraphMatchManyContext) GpmlPatternList() IGpmlPatternListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGpmlPatternListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGpmlPatternListContext)
}

func (s *ExprGraphMatchManyContext) PAREN_RIGHT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserPAREN_RIGHT, 0)
}

func (s *ExprGraphMatchManyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExprGraphMatchManyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExprGraphMatchManyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterExprGraphMatchMany(s)
	}
}

func (s *ExprGraphMatchManyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitExprGraphMatchMany(s)
	}
}

func (p *PartiQLParser) ExprGraphMatchMany() (localctx IExprGraphMatchManyContext) {
	localctx = NewExprGraphMatchManyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 254, PartiQLParserRULE_exprGraphMatchMany)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1653)
		p.Match(PartiQLParserPAREN_LEFT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1654)
		p.exprPrimary(0)
	}
	{
		p.SetState(1655)
		p.Match(PartiQLParserMATCH)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1656)
		p.GpmlPatternList()
	}
	{
		p.SetState(1657)
		p.Match(PartiQLParserPAREN_RIGHT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExprGraphMatchOneContext is an interface to support dynamic dispatch.
type IExprGraphMatchOneContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ExprPrimary() IExprPrimaryContext
	MATCH() antlr.TerminalNode
	GpmlPattern() IGpmlPatternContext

	// IsExprGraphMatchOneContext differentiates from other interfaces.
	IsExprGraphMatchOneContext()
}

type ExprGraphMatchOneContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExprGraphMatchOneContext() *ExprGraphMatchOneContext {
	var p = new(ExprGraphMatchOneContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_exprGraphMatchOne
	return p
}

func InitEmptyExprGraphMatchOneContext(p *ExprGraphMatchOneContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_exprGraphMatchOne
}

func (*ExprGraphMatchOneContext) IsExprGraphMatchOneContext() {}

func NewExprGraphMatchOneContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExprGraphMatchOneContext {
	var p = new(ExprGraphMatchOneContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_exprGraphMatchOne

	return p
}

func (s *ExprGraphMatchOneContext) GetParser() antlr.Parser { return s.parser }

func (s *ExprGraphMatchOneContext) ExprPrimary() IExprPrimaryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprPrimaryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprPrimaryContext)
}

func (s *ExprGraphMatchOneContext) MATCH() antlr.TerminalNode {
	return s.GetToken(PartiQLParserMATCH, 0)
}

func (s *ExprGraphMatchOneContext) GpmlPattern() IGpmlPatternContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGpmlPatternContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGpmlPatternContext)
}

func (s *ExprGraphMatchOneContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExprGraphMatchOneContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExprGraphMatchOneContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterExprGraphMatchOne(s)
	}
}

func (s *ExprGraphMatchOneContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitExprGraphMatchOne(s)
	}
}

func (p *PartiQLParser) ExprGraphMatchOne() (localctx IExprGraphMatchOneContext) {
	localctx = NewExprGraphMatchOneContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 256, PartiQLParserRULE_exprGraphMatchOne)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1659)
		p.exprPrimary(0)
	}
	{
		p.SetState(1660)
		p.Match(PartiQLParserMATCH)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1661)
		p.GpmlPattern()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IParameterContext is an interface to support dynamic dispatch.
type IParameterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	QUESTION_MARK() antlr.TerminalNode

	// IsParameterContext differentiates from other interfaces.
	IsParameterContext()
}

type ParameterContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParameterContext() *ParameterContext {
	var p = new(ParameterContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_parameter
	return p
}

func InitEmptyParameterContext(p *ParameterContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_parameter
}

func (*ParameterContext) IsParameterContext() {}

func NewParameterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ParameterContext {
	var p = new(ParameterContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_parameter

	return p
}

func (s *ParameterContext) GetParser() antlr.Parser { return s.parser }

func (s *ParameterContext) QUESTION_MARK() antlr.TerminalNode {
	return s.GetToken(PartiQLParserQUESTION_MARK, 0)
}

func (s *ParameterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParameterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ParameterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterParameter(s)
	}
}

func (s *ParameterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitParameter(s)
	}
}

func (p *PartiQLParser) Parameter() (localctx IParameterContext) {
	localctx = NewParameterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 258, PartiQLParserRULE_parameter)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1663)
		p.Match(PartiQLParserQUESTION_MARK)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IVarRefExprContext is an interface to support dynamic dispatch.
type IVarRefExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsVarRefExprContext differentiates from other interfaces.
	IsVarRefExprContext()
}

type VarRefExprContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVarRefExprContext() *VarRefExprContext {
	var p = new(VarRefExprContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_varRefExpr
	return p
}

func InitEmptyVarRefExprContext(p *VarRefExprContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_varRefExpr
}

func (*VarRefExprContext) IsVarRefExprContext() {}

func NewVarRefExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VarRefExprContext {
	var p = new(VarRefExprContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_varRefExpr

	return p
}

func (s *VarRefExprContext) GetParser() antlr.Parser { return s.parser }

func (s *VarRefExprContext) CopyAll(ctx *VarRefExprContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *VarRefExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VarRefExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type VariableKeywordContext struct {
	VarRefExprContext
	qualifier antlr.Token
	key       INonReservedKeywordsContext
}

func NewVariableKeywordContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *VariableKeywordContext {
	var p = new(VariableKeywordContext)

	InitEmptyVarRefExprContext(&p.VarRefExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*VarRefExprContext))

	return p
}

func (s *VariableKeywordContext) GetQualifier() antlr.Token { return s.qualifier }

func (s *VariableKeywordContext) SetQualifier(v antlr.Token) { s.qualifier = v }

func (s *VariableKeywordContext) GetKey() INonReservedKeywordsContext { return s.key }

func (s *VariableKeywordContext) SetKey(v INonReservedKeywordsContext) { s.key = v }

func (s *VariableKeywordContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VariableKeywordContext) NonReservedKeywords() INonReservedKeywordsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INonReservedKeywordsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INonReservedKeywordsContext)
}

func (s *VariableKeywordContext) AT_SIGN() antlr.TerminalNode {
	return s.GetToken(PartiQLParserAT_SIGN, 0)
}

func (s *VariableKeywordContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterVariableKeyword(s)
	}
}

func (s *VariableKeywordContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitVariableKeyword(s)
	}
}

type VariableIdentifierContext struct {
	VarRefExprContext
	qualifier antlr.Token
	ident     antlr.Token
}

func NewVariableIdentifierContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *VariableIdentifierContext {
	var p = new(VariableIdentifierContext)

	InitEmptyVarRefExprContext(&p.VarRefExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*VarRefExprContext))

	return p
}

func (s *VariableIdentifierContext) GetQualifier() antlr.Token { return s.qualifier }

func (s *VariableIdentifierContext) GetIdent() antlr.Token { return s.ident }

func (s *VariableIdentifierContext) SetQualifier(v antlr.Token) { s.qualifier = v }

func (s *VariableIdentifierContext) SetIdent(v antlr.Token) { s.ident = v }

func (s *VariableIdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VariableIdentifierContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(PartiQLParserIDENTIFIER, 0)
}

func (s *VariableIdentifierContext) IDENTIFIER_QUOTED() antlr.TerminalNode {
	return s.GetToken(PartiQLParserIDENTIFIER_QUOTED, 0)
}

func (s *VariableIdentifierContext) AT_SIGN() antlr.TerminalNode {
	return s.GetToken(PartiQLParserAT_SIGN, 0)
}

func (s *VariableIdentifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterVariableIdentifier(s)
	}
}

func (s *VariableIdentifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitVariableIdentifier(s)
	}
}

func (p *PartiQLParser) VarRefExpr() (localctx IVarRefExprContext) {
	localctx = NewVarRefExprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 260, PartiQLParserRULE_varRefExpr)
	var _la int

	p.SetState(1673)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 206, p.GetParserRuleContext()) {
	case 1:
		localctx = NewVariableIdentifierContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		p.SetState(1666)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == PartiQLParserAT_SIGN {
			{
				p.SetState(1665)

				var _m = p.Match(PartiQLParserAT_SIGN)

				localctx.(*VariableIdentifierContext).qualifier = _m
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(1668)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*VariableIdentifierContext).ident = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == PartiQLParserIDENTIFIER || _la == PartiQLParserIDENTIFIER_QUOTED) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*VariableIdentifierContext).ident = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case 2:
		localctx = NewVariableKeywordContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		p.SetState(1670)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == PartiQLParserAT_SIGN {
			{
				p.SetState(1669)

				var _m = p.Match(PartiQLParserAT_SIGN)

				localctx.(*VariableKeywordContext).qualifier = _m
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(1672)

			var _x = p.NonReservedKeywords()

			localctx.(*VariableKeywordContext).key = _x
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INonReservedKeywordsContext is an interface to support dynamic dispatch.
type INonReservedKeywordsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	EXCLUDED() antlr.TerminalNode

	// IsNonReservedKeywordsContext differentiates from other interfaces.
	IsNonReservedKeywordsContext()
}

type NonReservedKeywordsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNonReservedKeywordsContext() *NonReservedKeywordsContext {
	var p = new(NonReservedKeywordsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_nonReservedKeywords
	return p
}

func InitEmptyNonReservedKeywordsContext(p *NonReservedKeywordsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_nonReservedKeywords
}

func (*NonReservedKeywordsContext) IsNonReservedKeywordsContext() {}

func NewNonReservedKeywordsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NonReservedKeywordsContext {
	var p = new(NonReservedKeywordsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_nonReservedKeywords

	return p
}

func (s *NonReservedKeywordsContext) GetParser() antlr.Parser { return s.parser }

func (s *NonReservedKeywordsContext) EXCLUDED() antlr.TerminalNode {
	return s.GetToken(PartiQLParserEXCLUDED, 0)
}

func (s *NonReservedKeywordsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NonReservedKeywordsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NonReservedKeywordsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterNonReservedKeywords(s)
	}
}

func (s *NonReservedKeywordsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitNonReservedKeywords(s)
	}
}

func (p *PartiQLParser) NonReservedKeywords() (localctx INonReservedKeywordsContext) {
	localctx = NewNonReservedKeywordsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 262, PartiQLParserRULE_nonReservedKeywords)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1675)
		p.Match(PartiQLParserEXCLUDED)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICollectionContext is an interface to support dynamic dispatch.
type ICollectionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Array() IArrayContext
	Bag() IBagContext

	// IsCollectionContext differentiates from other interfaces.
	IsCollectionContext()
}

type CollectionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCollectionContext() *CollectionContext {
	var p = new(CollectionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_collection
	return p
}

func InitEmptyCollectionContext(p *CollectionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_collection
}

func (*CollectionContext) IsCollectionContext() {}

func NewCollectionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CollectionContext {
	var p = new(CollectionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_collection

	return p
}

func (s *CollectionContext) GetParser() antlr.Parser { return s.parser }

func (s *CollectionContext) Array() IArrayContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArrayContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArrayContext)
}

func (s *CollectionContext) Bag() IBagContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBagContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBagContext)
}

func (s *CollectionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CollectionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CollectionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterCollection(s)
	}
}

func (s *CollectionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitCollection(s)
	}
}

func (p *PartiQLParser) Collection() (localctx ICollectionContext) {
	localctx = NewCollectionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 264, PartiQLParserRULE_collection)
	p.SetState(1679)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case PartiQLParserBRACKET_LEFT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1677)
			p.Array()
		}

	case PartiQLParserANGLE_DOUBLE_LEFT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1678)
			p.Bag()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IArrayContext is an interface to support dynamic dispatch.
type IArrayContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	BRACKET_LEFT() antlr.TerminalNode
	BRACKET_RIGHT() antlr.TerminalNode
	AllExpr() []IExprContext
	Expr(i int) IExprContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsArrayContext differentiates from other interfaces.
	IsArrayContext()
}

type ArrayContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArrayContext() *ArrayContext {
	var p = new(ArrayContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_array
	return p
}

func InitEmptyArrayContext(p *ArrayContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_array
}

func (*ArrayContext) IsArrayContext() {}

func NewArrayContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArrayContext {
	var p = new(ArrayContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_array

	return p
}

func (s *ArrayContext) GetParser() antlr.Parser { return s.parser }

func (s *ArrayContext) BRACKET_LEFT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserBRACKET_LEFT, 0)
}

func (s *ArrayContext) BRACKET_RIGHT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserBRACKET_RIGHT, 0)
}

func (s *ArrayContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *ArrayContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *ArrayContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PartiQLParserCOMMA)
}

func (s *ArrayContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PartiQLParserCOMMA, i)
}

func (s *ArrayContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArrayContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArrayContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterArray(s)
	}
}

func (s *ArrayContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitArray(s)
	}
}

func (p *PartiQLParser) Array() (localctx IArrayContext) {
	localctx = NewArrayContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 266, PartiQLParserRULE_array)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1681)
		p.Match(PartiQLParserBRACKET_LEFT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1690)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&11558071357178112) != 0) || ((int64((_la-75)) & ^0x3f) == 0 && ((int64(1)<<(_la-75))&234187180623281297) != 0) || ((int64((_la-140)) & ^0x3f) == 0 && ((int64(1)<<(_la-140))&7026323504187375659) != 0) || ((int64((_la-207)) & ^0x3f) == 0 && ((int64(1)<<(_la-207))&1729382258948706371) != 0) || ((int64((_la-271)) & ^0x3f) == 0 && ((int64(1)<<(_la-271))&291666264083) != 0) {
		{
			p.SetState(1682)
			p.Expr()
		}
		p.SetState(1687)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == PartiQLParserCOMMA {
			{
				p.SetState(1683)
				p.Match(PartiQLParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1684)
				p.Expr()
			}

			p.SetState(1689)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}

	}
	{
		p.SetState(1692)
		p.Match(PartiQLParserBRACKET_RIGHT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBagContext is an interface to support dynamic dispatch.
type IBagContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ANGLE_DOUBLE_LEFT() antlr.TerminalNode
	ANGLE_DOUBLE_RIGHT() antlr.TerminalNode
	AllExpr() []IExprContext
	Expr(i int) IExprContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsBagContext differentiates from other interfaces.
	IsBagContext()
}

type BagContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBagContext() *BagContext {
	var p = new(BagContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_bag
	return p
}

func InitEmptyBagContext(p *BagContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_bag
}

func (*BagContext) IsBagContext() {}

func NewBagContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BagContext {
	var p = new(BagContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_bag

	return p
}

func (s *BagContext) GetParser() antlr.Parser { return s.parser }

func (s *BagContext) ANGLE_DOUBLE_LEFT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserANGLE_DOUBLE_LEFT, 0)
}

func (s *BagContext) ANGLE_DOUBLE_RIGHT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserANGLE_DOUBLE_RIGHT, 0)
}

func (s *BagContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *BagContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *BagContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PartiQLParserCOMMA)
}

func (s *BagContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PartiQLParserCOMMA, i)
}

func (s *BagContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BagContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BagContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterBag(s)
	}
}

func (s *BagContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitBag(s)
	}
}

func (p *PartiQLParser) Bag() (localctx IBagContext) {
	localctx = NewBagContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 268, PartiQLParserRULE_bag)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1694)
		p.Match(PartiQLParserANGLE_DOUBLE_LEFT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1703)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&11558071357178112) != 0) || ((int64((_la-75)) & ^0x3f) == 0 && ((int64(1)<<(_la-75))&234187180623281297) != 0) || ((int64((_la-140)) & ^0x3f) == 0 && ((int64(1)<<(_la-140))&7026323504187375659) != 0) || ((int64((_la-207)) & ^0x3f) == 0 && ((int64(1)<<(_la-207))&1729382258948706371) != 0) || ((int64((_la-271)) & ^0x3f) == 0 && ((int64(1)<<(_la-271))&291666264083) != 0) {
		{
			p.SetState(1695)
			p.Expr()
		}
		p.SetState(1700)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == PartiQLParserCOMMA {
			{
				p.SetState(1696)
				p.Match(PartiQLParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1697)
				p.Expr()
			}

			p.SetState(1702)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}

	}
	{
		p.SetState(1705)
		p.Match(PartiQLParserANGLE_DOUBLE_RIGHT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITupleContext is an interface to support dynamic dispatch.
type ITupleContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	BRACE_LEFT() antlr.TerminalNode
	BRACE_RIGHT() antlr.TerminalNode
	AllPair() []IPairContext
	Pair(i int) IPairContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsTupleContext differentiates from other interfaces.
	IsTupleContext()
}

type TupleContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTupleContext() *TupleContext {
	var p = new(TupleContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_tuple
	return p
}

func InitEmptyTupleContext(p *TupleContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_tuple
}

func (*TupleContext) IsTupleContext() {}

func NewTupleContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TupleContext {
	var p = new(TupleContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_tuple

	return p
}

func (s *TupleContext) GetParser() antlr.Parser { return s.parser }

func (s *TupleContext) BRACE_LEFT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserBRACE_LEFT, 0)
}

func (s *TupleContext) BRACE_RIGHT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserBRACE_RIGHT, 0)
}

func (s *TupleContext) AllPair() []IPairContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IPairContext); ok {
			len++
		}
	}

	tst := make([]IPairContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IPairContext); ok {
			tst[i] = t.(IPairContext)
			i++
		}
	}

	return tst
}

func (s *TupleContext) Pair(i int) IPairContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPairContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPairContext)
}

func (s *TupleContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PartiQLParserCOMMA)
}

func (s *TupleContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PartiQLParserCOMMA, i)
}

func (s *TupleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TupleContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TupleContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterTuple(s)
	}
}

func (s *TupleContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitTuple(s)
	}
}

func (p *PartiQLParser) Tuple() (localctx ITupleContext) {
	localctx = NewTupleContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 270, PartiQLParserRULE_tuple)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1707)
		p.Match(PartiQLParserBRACE_LEFT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1716)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&11558071357178112) != 0) || ((int64((_la-75)) & ^0x3f) == 0 && ((int64(1)<<(_la-75))&234187180623281297) != 0) || ((int64((_la-140)) & ^0x3f) == 0 && ((int64(1)<<(_la-140))&7026323504187375659) != 0) || ((int64((_la-207)) & ^0x3f) == 0 && ((int64(1)<<(_la-207))&1729382258948706371) != 0) || ((int64((_la-271)) & ^0x3f) == 0 && ((int64(1)<<(_la-271))&291666264083) != 0) {
		{
			p.SetState(1708)
			p.Pair()
		}
		p.SetState(1713)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == PartiQLParserCOMMA {
			{
				p.SetState(1709)
				p.Match(PartiQLParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1710)
				p.Pair()
			}

			p.SetState(1715)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}

	}
	{
		p.SetState(1718)
		p.Match(PartiQLParserBRACE_RIGHT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPairContext is an interface to support dynamic dispatch.
type IPairContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetLhs returns the lhs rule contexts.
	GetLhs() IExprContext

	// GetRhs returns the rhs rule contexts.
	GetRhs() IExprContext

	// SetLhs sets the lhs rule contexts.
	SetLhs(IExprContext)

	// SetRhs sets the rhs rule contexts.
	SetRhs(IExprContext)

	// Getter signatures
	COLON() antlr.TerminalNode
	AllExpr() []IExprContext
	Expr(i int) IExprContext

	// IsPairContext differentiates from other interfaces.
	IsPairContext()
}

type PairContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	lhs    IExprContext
	rhs    IExprContext
}

func NewEmptyPairContext() *PairContext {
	var p = new(PairContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_pair
	return p
}

func InitEmptyPairContext(p *PairContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_pair
}

func (*PairContext) IsPairContext() {}

func NewPairContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PairContext {
	var p = new(PairContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_pair

	return p
}

func (s *PairContext) GetParser() antlr.Parser { return s.parser }

func (s *PairContext) GetLhs() IExprContext { return s.lhs }

func (s *PairContext) GetRhs() IExprContext { return s.rhs }

func (s *PairContext) SetLhs(v IExprContext) { s.lhs = v }

func (s *PairContext) SetRhs(v IExprContext) { s.rhs = v }

func (s *PairContext) COLON() antlr.TerminalNode {
	return s.GetToken(PartiQLParserCOLON, 0)
}

func (s *PairContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *PairContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *PairContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PairContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PairContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterPair(s)
	}
}

func (s *PairContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitPair(s)
	}
}

func (p *PartiQLParser) Pair() (localctx IPairContext) {
	localctx = NewPairContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 272, PartiQLParserRULE_pair)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1720)

		var _x = p.Expr()

		localctx.(*PairContext).lhs = _x
	}
	{
		p.SetState(1721)
		p.Match(PartiQLParserCOLON)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1722)

		var _x = p.Expr()

		localctx.(*PairContext).rhs = _x
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ILiteralContext is an interface to support dynamic dispatch.
type ILiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsLiteralContext differentiates from other interfaces.
	IsLiteralContext()
}

type LiteralContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLiteralContext() *LiteralContext {
	var p = new(LiteralContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_literal
	return p
}

func InitEmptyLiteralContext(p *LiteralContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_literal
}

func (*LiteralContext) IsLiteralContext() {}

func NewLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LiteralContext {
	var p = new(LiteralContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_literal

	return p
}

func (s *LiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *LiteralContext) CopyAll(ctx *LiteralContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *LiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type LiteralMissingContext struct {
	LiteralContext
}

func NewLiteralMissingContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *LiteralMissingContext {
	var p = new(LiteralMissingContext)

	InitEmptyLiteralContext(&p.LiteralContext)
	p.parser = parser
	p.CopyAll(ctx.(*LiteralContext))

	return p
}

func (s *LiteralMissingContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LiteralMissingContext) MISSING() antlr.TerminalNode {
	return s.GetToken(PartiQLParserMISSING, 0)
}

func (s *LiteralMissingContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterLiteralMissing(s)
	}
}

func (s *LiteralMissingContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitLiteralMissing(s)
	}
}

type LiteralTimestampContext struct {
	LiteralContext
}

func NewLiteralTimestampContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *LiteralTimestampContext {
	var p = new(LiteralTimestampContext)

	InitEmptyLiteralContext(&p.LiteralContext)
	p.parser = parser
	p.CopyAll(ctx.(*LiteralContext))

	return p
}

func (s *LiteralTimestampContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LiteralTimestampContext) TIMESTAMP() antlr.TerminalNode {
	return s.GetToken(PartiQLParserTIMESTAMP, 0)
}

func (s *LiteralTimestampContext) LITERAL_STRING() antlr.TerminalNode {
	return s.GetToken(PartiQLParserLITERAL_STRING, 0)
}

func (s *LiteralTimestampContext) PAREN_LEFT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserPAREN_LEFT, 0)
}

func (s *LiteralTimestampContext) LITERAL_INTEGER() antlr.TerminalNode {
	return s.GetToken(PartiQLParserLITERAL_INTEGER, 0)
}

func (s *LiteralTimestampContext) PAREN_RIGHT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserPAREN_RIGHT, 0)
}

func (s *LiteralTimestampContext) WITH() antlr.TerminalNode {
	return s.GetToken(PartiQLParserWITH, 0)
}

func (s *LiteralTimestampContext) TIME() antlr.TerminalNode {
	return s.GetToken(PartiQLParserTIME, 0)
}

func (s *LiteralTimestampContext) ZONE() antlr.TerminalNode {
	return s.GetToken(PartiQLParserZONE, 0)
}

func (s *LiteralTimestampContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterLiteralTimestamp(s)
	}
}

func (s *LiteralTimestampContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitLiteralTimestamp(s)
	}
}

type LiteralIntegerContext struct {
	LiteralContext
}

func NewLiteralIntegerContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *LiteralIntegerContext {
	var p = new(LiteralIntegerContext)

	InitEmptyLiteralContext(&p.LiteralContext)
	p.parser = parser
	p.CopyAll(ctx.(*LiteralContext))

	return p
}

func (s *LiteralIntegerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LiteralIntegerContext) LITERAL_INTEGER() antlr.TerminalNode {
	return s.GetToken(PartiQLParserLITERAL_INTEGER, 0)
}

func (s *LiteralIntegerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterLiteralInteger(s)
	}
}

func (s *LiteralIntegerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitLiteralInteger(s)
	}
}

type LiteralDateContext struct {
	LiteralContext
}

func NewLiteralDateContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *LiteralDateContext {
	var p = new(LiteralDateContext)

	InitEmptyLiteralContext(&p.LiteralContext)
	p.parser = parser
	p.CopyAll(ctx.(*LiteralContext))

	return p
}

func (s *LiteralDateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LiteralDateContext) DATE() antlr.TerminalNode {
	return s.GetToken(PartiQLParserDATE, 0)
}

func (s *LiteralDateContext) LITERAL_STRING() antlr.TerminalNode {
	return s.GetToken(PartiQLParserLITERAL_STRING, 0)
}

func (s *LiteralDateContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterLiteralDate(s)
	}
}

func (s *LiteralDateContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitLiteralDate(s)
	}
}

type LiteralFalseContext struct {
	LiteralContext
}

func NewLiteralFalseContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *LiteralFalseContext {
	var p = new(LiteralFalseContext)

	InitEmptyLiteralContext(&p.LiteralContext)
	p.parser = parser
	p.CopyAll(ctx.(*LiteralContext))

	return p
}

func (s *LiteralFalseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LiteralFalseContext) FALSE() antlr.TerminalNode {
	return s.GetToken(PartiQLParserFALSE, 0)
}

func (s *LiteralFalseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterLiteralFalse(s)
	}
}

func (s *LiteralFalseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitLiteralFalse(s)
	}
}

type LiteralStringContext struct {
	LiteralContext
}

func NewLiteralStringContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *LiteralStringContext {
	var p = new(LiteralStringContext)

	InitEmptyLiteralContext(&p.LiteralContext)
	p.parser = parser
	p.CopyAll(ctx.(*LiteralContext))

	return p
}

func (s *LiteralStringContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LiteralStringContext) LITERAL_STRING() antlr.TerminalNode {
	return s.GetToken(PartiQLParserLITERAL_STRING, 0)
}

func (s *LiteralStringContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterLiteralString(s)
	}
}

func (s *LiteralStringContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitLiteralString(s)
	}
}

type LiteralDecimalContext struct {
	LiteralContext
}

func NewLiteralDecimalContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *LiteralDecimalContext {
	var p = new(LiteralDecimalContext)

	InitEmptyLiteralContext(&p.LiteralContext)
	p.parser = parser
	p.CopyAll(ctx.(*LiteralContext))

	return p
}

func (s *LiteralDecimalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LiteralDecimalContext) LITERAL_DECIMAL() antlr.TerminalNode {
	return s.GetToken(PartiQLParserLITERAL_DECIMAL, 0)
}

func (s *LiteralDecimalContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterLiteralDecimal(s)
	}
}

func (s *LiteralDecimalContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitLiteralDecimal(s)
	}
}

type LiteralNullContext struct {
	LiteralContext
}

func NewLiteralNullContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *LiteralNullContext {
	var p = new(LiteralNullContext)

	InitEmptyLiteralContext(&p.LiteralContext)
	p.parser = parser
	p.CopyAll(ctx.(*LiteralContext))

	return p
}

func (s *LiteralNullContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LiteralNullContext) NULL() antlr.TerminalNode {
	return s.GetToken(PartiQLParserNULL, 0)
}

func (s *LiteralNullContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterLiteralNull(s)
	}
}

func (s *LiteralNullContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitLiteralNull(s)
	}
}

type LiteralIonContext struct {
	LiteralContext
}

func NewLiteralIonContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *LiteralIonContext {
	var p = new(LiteralIonContext)

	InitEmptyLiteralContext(&p.LiteralContext)
	p.parser = parser
	p.CopyAll(ctx.(*LiteralContext))

	return p
}

func (s *LiteralIonContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LiteralIonContext) ION_CLOSURE() antlr.TerminalNode {
	return s.GetToken(PartiQLParserION_CLOSURE, 0)
}

func (s *LiteralIonContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterLiteralIon(s)
	}
}

func (s *LiteralIonContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitLiteralIon(s)
	}
}

type LiteralTrueContext struct {
	LiteralContext
}

func NewLiteralTrueContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *LiteralTrueContext {
	var p = new(LiteralTrueContext)

	InitEmptyLiteralContext(&p.LiteralContext)
	p.parser = parser
	p.CopyAll(ctx.(*LiteralContext))

	return p
}

func (s *LiteralTrueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LiteralTrueContext) TRUE() antlr.TerminalNode {
	return s.GetToken(PartiQLParserTRUE, 0)
}

func (s *LiteralTrueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterLiteralTrue(s)
	}
}

func (s *LiteralTrueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitLiteralTrue(s)
	}
}

type LiteralTimeContext struct {
	LiteralContext
}

func NewLiteralTimeContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *LiteralTimeContext {
	var p = new(LiteralTimeContext)

	InitEmptyLiteralContext(&p.LiteralContext)
	p.parser = parser
	p.CopyAll(ctx.(*LiteralContext))

	return p
}

func (s *LiteralTimeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LiteralTimeContext) AllTIME() []antlr.TerminalNode {
	return s.GetTokens(PartiQLParserTIME)
}

func (s *LiteralTimeContext) TIME(i int) antlr.TerminalNode {
	return s.GetToken(PartiQLParserTIME, i)
}

func (s *LiteralTimeContext) LITERAL_STRING() antlr.TerminalNode {
	return s.GetToken(PartiQLParserLITERAL_STRING, 0)
}

func (s *LiteralTimeContext) PAREN_LEFT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserPAREN_LEFT, 0)
}

func (s *LiteralTimeContext) LITERAL_INTEGER() antlr.TerminalNode {
	return s.GetToken(PartiQLParserLITERAL_INTEGER, 0)
}

func (s *LiteralTimeContext) PAREN_RIGHT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserPAREN_RIGHT, 0)
}

func (s *LiteralTimeContext) WITH() antlr.TerminalNode {
	return s.GetToken(PartiQLParserWITH, 0)
}

func (s *LiteralTimeContext) ZONE() antlr.TerminalNode {
	return s.GetToken(PartiQLParserZONE, 0)
}

func (s *LiteralTimeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterLiteralTime(s)
	}
}

func (s *LiteralTimeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitLiteralTime(s)
	}
}

func (p *PartiQLParser) Literal() (localctx ILiteralContext) {
	localctx = NewLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 274, PartiQLParserRULE_literal)
	var _la int

	p.SetState(1758)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case PartiQLParserNULL:
		localctx = NewLiteralNullContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1724)
			p.Match(PartiQLParserNULL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case PartiQLParserMISSING:
		localctx = NewLiteralMissingContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1725)
			p.Match(PartiQLParserMISSING)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case PartiQLParserTRUE:
		localctx = NewLiteralTrueContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1726)
			p.Match(PartiQLParserTRUE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case PartiQLParserFALSE:
		localctx = NewLiteralFalseContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1727)
			p.Match(PartiQLParserFALSE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case PartiQLParserLITERAL_STRING:
		localctx = NewLiteralStringContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1728)
			p.Match(PartiQLParserLITERAL_STRING)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case PartiQLParserLITERAL_INTEGER:
		localctx = NewLiteralIntegerContext(p, localctx)
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1729)
			p.Match(PartiQLParserLITERAL_INTEGER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case PartiQLParserLITERAL_DECIMAL:
		localctx = NewLiteralDecimalContext(p, localctx)
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1730)
			p.Match(PartiQLParserLITERAL_DECIMAL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case PartiQLParserION_CLOSURE:
		localctx = NewLiteralIonContext(p, localctx)
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(1731)
			p.Match(PartiQLParserION_CLOSURE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case PartiQLParserDATE:
		localctx = NewLiteralDateContext(p, localctx)
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(1732)
			p.Match(PartiQLParserDATE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1733)
			p.Match(PartiQLParserLITERAL_STRING)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case PartiQLParserTIME:
		localctx = NewLiteralTimeContext(p, localctx)
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(1734)
			p.Match(PartiQLParserTIME)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1738)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == PartiQLParserPAREN_LEFT {
			{
				p.SetState(1735)
				p.Match(PartiQLParserPAREN_LEFT)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1736)
				p.Match(PartiQLParserLITERAL_INTEGER)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1737)
				p.Match(PartiQLParserPAREN_RIGHT)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1743)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == PartiQLParserWITH {
			{
				p.SetState(1740)
				p.Match(PartiQLParserWITH)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1741)
				p.Match(PartiQLParserTIME)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1742)
				p.Match(PartiQLParserZONE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(1745)
			p.Match(PartiQLParserLITERAL_STRING)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case PartiQLParserTIMESTAMP:
		localctx = NewLiteralTimestampContext(p, localctx)
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(1746)
			p.Match(PartiQLParserTIMESTAMP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1750)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == PartiQLParserPAREN_LEFT {
			{
				p.SetState(1747)
				p.Match(PartiQLParserPAREN_LEFT)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1748)
				p.Match(PartiQLParserLITERAL_INTEGER)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1749)
				p.Match(PartiQLParserPAREN_RIGHT)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1755)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == PartiQLParserWITH {
			{
				p.SetState(1752)
				p.Match(PartiQLParserWITH)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1753)
				p.Match(PartiQLParserTIME)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1754)
				p.Match(PartiQLParserZONE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(1757)
			p.Match(PartiQLParserLITERAL_STRING)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITypeContext is an interface to support dynamic dispatch.
type ITypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsTypeContext differentiates from other interfaces.
	IsTypeContext()
}

type TypeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeContext() *TypeContext {
	var p = new(TypeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_type
	return p
}

func InitEmptyTypeContext(p *TypeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = PartiQLParserRULE_type
}

func (*TypeContext) IsTypeContext() {}

func NewTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeContext {
	var p = new(TypeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = PartiQLParserRULE_type

	return p
}

func (s *TypeContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeContext) CopyAll(ctx *TypeContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *TypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type TypeArgSingleContext struct {
	TypeContext
	datatype antlr.Token
	arg0     antlr.Token
}

func NewTypeArgSingleContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TypeArgSingleContext {
	var p = new(TypeArgSingleContext)

	InitEmptyTypeContext(&p.TypeContext)
	p.parser = parser
	p.CopyAll(ctx.(*TypeContext))

	return p
}

func (s *TypeArgSingleContext) GetDatatype() antlr.Token { return s.datatype }

func (s *TypeArgSingleContext) GetArg0() antlr.Token { return s.arg0 }

func (s *TypeArgSingleContext) SetDatatype(v antlr.Token) { s.datatype = v }

func (s *TypeArgSingleContext) SetArg0(v antlr.Token) { s.arg0 = v }

func (s *TypeArgSingleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeArgSingleContext) CHARACTER() antlr.TerminalNode {
	return s.GetToken(PartiQLParserCHARACTER, 0)
}

func (s *TypeArgSingleContext) CHAR() antlr.TerminalNode {
	return s.GetToken(PartiQLParserCHAR, 0)
}

func (s *TypeArgSingleContext) FLOAT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserFLOAT, 0)
}

func (s *TypeArgSingleContext) VARCHAR() antlr.TerminalNode {
	return s.GetToken(PartiQLParserVARCHAR, 0)
}

func (s *TypeArgSingleContext) PAREN_LEFT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserPAREN_LEFT, 0)
}

func (s *TypeArgSingleContext) PAREN_RIGHT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserPAREN_RIGHT, 0)
}

func (s *TypeArgSingleContext) LITERAL_INTEGER() antlr.TerminalNode {
	return s.GetToken(PartiQLParserLITERAL_INTEGER, 0)
}

func (s *TypeArgSingleContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterTypeArgSingle(s)
	}
}

func (s *TypeArgSingleContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitTypeArgSingle(s)
	}
}

type TypeAtomicContext struct {
	TypeContext
	datatype antlr.Token
}

func NewTypeAtomicContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TypeAtomicContext {
	var p = new(TypeAtomicContext)

	InitEmptyTypeContext(&p.TypeContext)
	p.parser = parser
	p.CopyAll(ctx.(*TypeContext))

	return p
}

func (s *TypeAtomicContext) GetDatatype() antlr.Token { return s.datatype }

func (s *TypeAtomicContext) SetDatatype(v antlr.Token) { s.datatype = v }

func (s *TypeAtomicContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeAtomicContext) NULL() antlr.TerminalNode {
	return s.GetToken(PartiQLParserNULL, 0)
}

func (s *TypeAtomicContext) BOOL() antlr.TerminalNode {
	return s.GetToken(PartiQLParserBOOL, 0)
}

func (s *TypeAtomicContext) BOOLEAN() antlr.TerminalNode {
	return s.GetToken(PartiQLParserBOOLEAN, 0)
}

func (s *TypeAtomicContext) SMALLINT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserSMALLINT, 0)
}

func (s *TypeAtomicContext) INTEGER2() antlr.TerminalNode {
	return s.GetToken(PartiQLParserINTEGER2, 0)
}

func (s *TypeAtomicContext) INT2() antlr.TerminalNode {
	return s.GetToken(PartiQLParserINT2, 0)
}

func (s *TypeAtomicContext) INTEGER() antlr.TerminalNode {
	return s.GetToken(PartiQLParserINTEGER, 0)
}

func (s *TypeAtomicContext) INT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserINT, 0)
}

func (s *TypeAtomicContext) INTEGER4() antlr.TerminalNode {
	return s.GetToken(PartiQLParserINTEGER4, 0)
}

func (s *TypeAtomicContext) INT4() antlr.TerminalNode {
	return s.GetToken(PartiQLParserINT4, 0)
}

func (s *TypeAtomicContext) INTEGER8() antlr.TerminalNode {
	return s.GetToken(PartiQLParserINTEGER8, 0)
}

func (s *TypeAtomicContext) INT8() antlr.TerminalNode {
	return s.GetToken(PartiQLParserINT8, 0)
}

func (s *TypeAtomicContext) BIGINT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserBIGINT, 0)
}

func (s *TypeAtomicContext) REAL() antlr.TerminalNode {
	return s.GetToken(PartiQLParserREAL, 0)
}

func (s *TypeAtomicContext) CHAR() antlr.TerminalNode {
	return s.GetToken(PartiQLParserCHAR, 0)
}

func (s *TypeAtomicContext) CHARACTER() antlr.TerminalNode {
	return s.GetToken(PartiQLParserCHARACTER, 0)
}

func (s *TypeAtomicContext) MISSING() antlr.TerminalNode {
	return s.GetToken(PartiQLParserMISSING, 0)
}

func (s *TypeAtomicContext) STRING() antlr.TerminalNode {
	return s.GetToken(PartiQLParserSTRING, 0)
}

func (s *TypeAtomicContext) SYMBOL() antlr.TerminalNode {
	return s.GetToken(PartiQLParserSYMBOL, 0)
}

func (s *TypeAtomicContext) BLOB() antlr.TerminalNode {
	return s.GetToken(PartiQLParserBLOB, 0)
}

func (s *TypeAtomicContext) CLOB() antlr.TerminalNode {
	return s.GetToken(PartiQLParserCLOB, 0)
}

func (s *TypeAtomicContext) DATE() antlr.TerminalNode {
	return s.GetToken(PartiQLParserDATE, 0)
}

func (s *TypeAtomicContext) STRUCT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserSTRUCT, 0)
}

func (s *TypeAtomicContext) TUPLE() antlr.TerminalNode {
	return s.GetToken(PartiQLParserTUPLE, 0)
}

func (s *TypeAtomicContext) LIST() antlr.TerminalNode {
	return s.GetToken(PartiQLParserLIST, 0)
}

func (s *TypeAtomicContext) SEXP() antlr.TerminalNode {
	return s.GetToken(PartiQLParserSEXP, 0)
}

func (s *TypeAtomicContext) BAG() antlr.TerminalNode {
	return s.GetToken(PartiQLParserBAG, 0)
}

func (s *TypeAtomicContext) ANY() antlr.TerminalNode {
	return s.GetToken(PartiQLParserANY, 0)
}

func (s *TypeAtomicContext) PRECISION() antlr.TerminalNode {
	return s.GetToken(PartiQLParserPRECISION, 0)
}

func (s *TypeAtomicContext) DOUBLE() antlr.TerminalNode {
	return s.GetToken(PartiQLParserDOUBLE, 0)
}

func (s *TypeAtomicContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterTypeAtomic(s)
	}
}

func (s *TypeAtomicContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitTypeAtomic(s)
	}
}

type TypeArgDoubleContext struct {
	TypeContext
	datatype antlr.Token
	arg0     antlr.Token
	arg1     antlr.Token
}

func NewTypeArgDoubleContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TypeArgDoubleContext {
	var p = new(TypeArgDoubleContext)

	InitEmptyTypeContext(&p.TypeContext)
	p.parser = parser
	p.CopyAll(ctx.(*TypeContext))

	return p
}

func (s *TypeArgDoubleContext) GetDatatype() antlr.Token { return s.datatype }

func (s *TypeArgDoubleContext) GetArg0() antlr.Token { return s.arg0 }

func (s *TypeArgDoubleContext) GetArg1() antlr.Token { return s.arg1 }

func (s *TypeArgDoubleContext) SetDatatype(v antlr.Token) { s.datatype = v }

func (s *TypeArgDoubleContext) SetArg0(v antlr.Token) { s.arg0 = v }

func (s *TypeArgDoubleContext) SetArg1(v antlr.Token) { s.arg1 = v }

func (s *TypeArgDoubleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeArgDoubleContext) DECIMAL() antlr.TerminalNode {
	return s.GetToken(PartiQLParserDECIMAL, 0)
}

func (s *TypeArgDoubleContext) DEC() antlr.TerminalNode {
	return s.GetToken(PartiQLParserDEC, 0)
}

func (s *TypeArgDoubleContext) NUMERIC() antlr.TerminalNode {
	return s.GetToken(PartiQLParserNUMERIC, 0)
}

func (s *TypeArgDoubleContext) PAREN_LEFT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserPAREN_LEFT, 0)
}

func (s *TypeArgDoubleContext) PAREN_RIGHT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserPAREN_RIGHT, 0)
}

func (s *TypeArgDoubleContext) AllLITERAL_INTEGER() []antlr.TerminalNode {
	return s.GetTokens(PartiQLParserLITERAL_INTEGER)
}

func (s *TypeArgDoubleContext) LITERAL_INTEGER(i int) antlr.TerminalNode {
	return s.GetToken(PartiQLParserLITERAL_INTEGER, i)
}

func (s *TypeArgDoubleContext) COMMA() antlr.TerminalNode {
	return s.GetToken(PartiQLParserCOMMA, 0)
}

func (s *TypeArgDoubleContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterTypeArgDouble(s)
	}
}

func (s *TypeArgDoubleContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitTypeArgDouble(s)
	}
}

type TypeTimeZoneContext struct {
	TypeContext
	datatype  antlr.Token
	precision antlr.Token
}

func NewTypeTimeZoneContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TypeTimeZoneContext {
	var p = new(TypeTimeZoneContext)

	InitEmptyTypeContext(&p.TypeContext)
	p.parser = parser
	p.CopyAll(ctx.(*TypeContext))

	return p
}

func (s *TypeTimeZoneContext) GetDatatype() antlr.Token { return s.datatype }

func (s *TypeTimeZoneContext) GetPrecision() antlr.Token { return s.precision }

func (s *TypeTimeZoneContext) SetDatatype(v antlr.Token) { s.datatype = v }

func (s *TypeTimeZoneContext) SetPrecision(v antlr.Token) { s.precision = v }

func (s *TypeTimeZoneContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeTimeZoneContext) AllTIME() []antlr.TerminalNode {
	return s.GetTokens(PartiQLParserTIME)
}

func (s *TypeTimeZoneContext) TIME(i int) antlr.TerminalNode {
	return s.GetToken(PartiQLParserTIME, i)
}

func (s *TypeTimeZoneContext) TIMESTAMP() antlr.TerminalNode {
	return s.GetToken(PartiQLParserTIMESTAMP, 0)
}

func (s *TypeTimeZoneContext) PAREN_LEFT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserPAREN_LEFT, 0)
}

func (s *TypeTimeZoneContext) PAREN_RIGHT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserPAREN_RIGHT, 0)
}

func (s *TypeTimeZoneContext) WITH() antlr.TerminalNode {
	return s.GetToken(PartiQLParserWITH, 0)
}

func (s *TypeTimeZoneContext) ZONE() antlr.TerminalNode {
	return s.GetToken(PartiQLParserZONE, 0)
}

func (s *TypeTimeZoneContext) LITERAL_INTEGER() antlr.TerminalNode {
	return s.GetToken(PartiQLParserLITERAL_INTEGER, 0)
}

func (s *TypeTimeZoneContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterTypeTimeZone(s)
	}
}

func (s *TypeTimeZoneContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitTypeTimeZone(s)
	}
}

type TypeCustomContext struct {
	TypeContext
}

func NewTypeCustomContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TypeCustomContext {
	var p = new(TypeCustomContext)

	InitEmptyTypeContext(&p.TypeContext)
	p.parser = parser
	p.CopyAll(ctx.(*TypeContext))

	return p
}

func (s *TypeCustomContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeCustomContext) SymbolPrimitive() ISymbolPrimitiveContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISymbolPrimitiveContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISymbolPrimitiveContext)
}

func (s *TypeCustomContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterTypeCustom(s)
	}
}

func (s *TypeCustomContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitTypeCustom(s)
	}
}

type TypeVarCharContext struct {
	TypeContext
	arg0 antlr.Token
}

func NewTypeVarCharContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TypeVarCharContext {
	var p = new(TypeVarCharContext)

	InitEmptyTypeContext(&p.TypeContext)
	p.parser = parser
	p.CopyAll(ctx.(*TypeContext))

	return p
}

func (s *TypeVarCharContext) GetArg0() antlr.Token { return s.arg0 }

func (s *TypeVarCharContext) SetArg0(v antlr.Token) { s.arg0 = v }

func (s *TypeVarCharContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeVarCharContext) CHARACTER() antlr.TerminalNode {
	return s.GetToken(PartiQLParserCHARACTER, 0)
}

func (s *TypeVarCharContext) VARYING() antlr.TerminalNode {
	return s.GetToken(PartiQLParserVARYING, 0)
}

func (s *TypeVarCharContext) PAREN_LEFT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserPAREN_LEFT, 0)
}

func (s *TypeVarCharContext) PAREN_RIGHT() antlr.TerminalNode {
	return s.GetToken(PartiQLParserPAREN_RIGHT, 0)
}

func (s *TypeVarCharContext) LITERAL_INTEGER() antlr.TerminalNode {
	return s.GetToken(PartiQLParserLITERAL_INTEGER, 0)
}

func (s *TypeVarCharContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.EnterTypeVarChar(s)
	}
}

func (s *TypeVarCharContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PartiQLParserListener); ok {
		listenerT.ExitTypeVarChar(s)
	}
}

func (p *PartiQLParser) Type_() (localctx ITypeContext) {
	localctx = NewTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 276, PartiQLParserRULE_type)
	var _la int

	p.SetState(1798)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 225, p.GetParserRuleContext()) {
	case 1:
		localctx = NewTypeAtomicContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1760)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*TypeAtomicContext).datatype = _lt

			_la = p.GetTokenStream().LA(1)

			if !(((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&9007199456067840) != 0) || ((int64((_la-113)) & ^0x3f) == 0 && ((int64(1)<<(_la-113))&144115188344291331) != 0) || ((int64((_la-188)) & ^0x3f) == 0 && ((int64(1)<<(_la-188))&-9223090561878065151) != 0) || ((int64((_la-252)) & ^0x3f) == 0 && ((int64(1)<<(_la-252))&131071) != 0)) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*TypeAtomicContext).datatype = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case 2:
		localctx = NewTypeAtomicContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1761)

			var _m = p.Match(PartiQLParserDOUBLE)

			localctx.(*TypeAtomicContext).datatype = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1762)
			p.Match(PartiQLParserPRECISION)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 3:
		localctx = NewTypeArgSingleContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1763)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*TypeArgSingleContext).datatype = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == PartiQLParserCHAR || _la == PartiQLParserCHARACTER || _la == PartiQLParserFLOAT || _la == PartiQLParserVARCHAR) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*TypeArgSingleContext).datatype = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(1767)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 219, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1764)
				p.Match(PartiQLParserPAREN_LEFT)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1765)

				var _m = p.Match(PartiQLParserLITERAL_INTEGER)

				localctx.(*TypeArgSingleContext).arg0 = _m
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1766)
				p.Match(PartiQLParserPAREN_RIGHT)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case 4:
		localctx = NewTypeVarCharContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1769)
			p.Match(PartiQLParserCHARACTER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1770)
			p.Match(PartiQLParserVARYING)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1774)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 220, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1771)
				p.Match(PartiQLParserPAREN_LEFT)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1772)

				var _m = p.Match(PartiQLParserLITERAL_INTEGER)

				localctx.(*TypeVarCharContext).arg0 = _m
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1773)
				p.Match(PartiQLParserPAREN_RIGHT)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case 5:
		localctx = NewTypeArgDoubleContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1776)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*TypeArgDoubleContext).datatype = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == PartiQLParserDEC || _la == PartiQLParserDECIMAL || _la == PartiQLParserNUMERIC) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*TypeArgDoubleContext).datatype = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(1784)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 222, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1777)
				p.Match(PartiQLParserPAREN_LEFT)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1778)

				var _m = p.Match(PartiQLParserLITERAL_INTEGER)

				localctx.(*TypeArgDoubleContext).arg0 = _m
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			p.SetState(1781)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			if _la == PartiQLParserCOMMA {
				{
					p.SetState(1779)
					p.Match(PartiQLParserCOMMA)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(1780)

					var _m = p.Match(PartiQLParserLITERAL_INTEGER)

					localctx.(*TypeArgDoubleContext).arg1 = _m
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			{
				p.SetState(1783)
				p.Match(PartiQLParserPAREN_RIGHT)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case 6:
		localctx = NewTypeTimeZoneContext(p, localctx)
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1786)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*TypeTimeZoneContext).datatype = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == PartiQLParserTIME || _la == PartiQLParserTIMESTAMP) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*TypeTimeZoneContext).datatype = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(1790)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 223, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1787)
				p.Match(PartiQLParserPAREN_LEFT)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1788)

				var _m = p.Match(PartiQLParserLITERAL_INTEGER)

				localctx.(*TypeTimeZoneContext).precision = _m
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1789)
				p.Match(PartiQLParserPAREN_RIGHT)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(1795)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 224, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1792)
				p.Match(PartiQLParserWITH)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1793)
				p.Match(PartiQLParserTIME)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1794)
				p.Match(PartiQLParserZONE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case 7:
		localctx = NewTypeCustomContext(p, localctx)
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1797)
			p.SymbolPrimitive()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

func (p *PartiQLParser) Sempred(localctx antlr.RuleContext, ruleIndex, predIndex int) bool {
	switch ruleIndex {
	case 81:
		var t *LabelSpecContext = nil
		if localctx != nil {
			t = localctx.(*LabelSpecContext)
		}
		return p.LabelSpec_Sempred(t, predIndex)

	case 82:
		var t *LabelTermContext = nil
		if localctx != nil {
			t = localctx.(*LabelTermContext)
		}
		return p.LabelTerm_Sempred(t, predIndex)

	case 86:
		var t *TableReferenceContext = nil
		if localctx != nil {
			t = localctx.(*TableReferenceContext)
		}
		return p.TableReference_Sempred(t, predIndex)

	case 94:
		var t *ExprBagOpContext = nil
		if localctx != nil {
			t = localctx.(*ExprBagOpContext)
		}
		return p.ExprBagOp_Sempred(t, predIndex)

	case 96:
		var t *ExprOrContext = nil
		if localctx != nil {
			t = localctx.(*ExprOrContext)
		}
		return p.ExprOr_Sempred(t, predIndex)

	case 97:
		var t *ExprAndContext = nil
		if localctx != nil {
			t = localctx.(*ExprAndContext)
		}
		return p.ExprAnd_Sempred(t, predIndex)

	case 99:
		var t *ExprPredicateContext = nil
		if localctx != nil {
			t = localctx.(*ExprPredicateContext)
		}
		return p.ExprPredicate_Sempred(t, predIndex)

	case 100:
		var t *MathOp00Context = nil
		if localctx != nil {
			t = localctx.(*MathOp00Context)
		}
		return p.MathOp00_Sempred(t, predIndex)

	case 101:
		var t *MathOp01Context = nil
		if localctx != nil {
			t = localctx.(*MathOp01Context)
		}
		return p.MathOp01_Sempred(t, predIndex)

	case 102:
		var t *MathOp02Context = nil
		if localctx != nil {
			t = localctx.(*MathOp02Context)
		}
		return p.MathOp02_Sempred(t, predIndex)

	case 104:
		var t *ExprPrimaryContext = nil
		if localctx != nil {
			t = localctx.(*ExprPrimaryContext)
		}
		return p.ExprPrimary_Sempred(t, predIndex)

	default:
		panic("No predicate with index: " + fmt.Sprint(ruleIndex))
	}
}

func (p *PartiQLParser) LabelSpec_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 0:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *PartiQLParser) LabelTerm_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 1:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *PartiQLParser) TableReference_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 2:
		return p.Precpred(p.GetParserRuleContext(), 5)

	case 3:
		return p.Precpred(p.GetParserRuleContext(), 4)

	case 4:
		return p.Precpred(p.GetParserRuleContext(), 3)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *PartiQLParser) ExprBagOp_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 5:
		return p.Precpred(p.GetParserRuleContext(), 4)

	case 6:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 7:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *PartiQLParser) ExprOr_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 8:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *PartiQLParser) ExprAnd_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 9:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *PartiQLParser) ExprPredicate_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 10:
		return p.Precpred(p.GetParserRuleContext(), 7)

	case 11:
		return p.Precpred(p.GetParserRuleContext(), 6)

	case 12:
		return p.Precpred(p.GetParserRuleContext(), 5)

	case 13:
		return p.Precpred(p.GetParserRuleContext(), 4)

	case 14:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 15:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *PartiQLParser) MathOp00_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 16:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *PartiQLParser) MathOp01_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 17:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *PartiQLParser) MathOp02_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 18:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *PartiQLParser) ExprPrimary_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 19:
		return p.Precpred(p.GetParserRuleContext(), 6)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}
